{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'https://hopewellapi-azcvcferesfpgjgm.southafricanorth-01.azurewebsites.net/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Create a separate API instance for admin operations that doesn't auto-logout\nconst adminApi = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Admin API request interceptor (same as regular API)\nadminApi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle common errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Token expired or invalid - only redirect if not already on auth page\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    if (window.location.pathname !== '/auth') {\n      window.location.href = '/auth';\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Admin API response interceptor (NO auto-logout)\nadminApi.interceptors.response.use(response => response, error => {\n  // Don't auto-logout for admin operations - let components handle errors\n  return Promise.reject(error);\n});\n\n// Mock API for testing when backend is not available\nconst MOCK_MODE = false; // Set to false when backend is running\n\n// Auth API\nexport const authAPI = {\n  register: async userData => {\n    if (MOCK_MODE) {\n      // Mock successful registration\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            message: \"User registered successfully.\"\n          });\n        }, 1000);\n      });\n    }\n    try {\n      console.log('Attempting registration to:', API_BASE_URL + '/Auth/register');\n      console.log('Registration data:', userData);\n      const response = await api.post('/Auth/register', userData);\n      console.log('Registration response:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response3, _error$response4;\n      console.error('Registration error:', error);\n      console.error('Error response:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n      console.error('Error status:', (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status);\n      throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message;\n    }\n  },\n  login: async credentials => {\n    if (MOCK_MODE) {\n      // Mock successful login\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            token: \"mock-jwt-token-\" + Date.now(),\n            user: {\n              id: \"mock-user-id\",\n              email: credentials.email,\n              firstName: \"Mock\",\n              lastName: \"User\",\n              roles: [\"patient\"]\n            }\n          });\n        }, 1000);\n      });\n    }\n    try {\n      console.log('Attempting login to:', API_BASE_URL + '/Auth/login');\n      console.log('Credentials:', credentials);\n      const response = await api.post('/Auth/login', credentials);\n      console.log('Login response:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response6, _error$response7;\n      console.error('Login error:', error);\n      console.error('Error response:', (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data);\n      console.error('Error status:', (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.status);\n      throw ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || error.message;\n    }\n  },\n  logout: async () => {\n    if (MOCK_MODE) {\n      // Mock successful logout\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            message: \"Logged out successfully\"\n          });\n        }, 500);\n      });\n    }\n    try {\n      const response = await api.post('/Auth/logout');\n      return response.data;\n    } catch (error) {\n      var _error$response8;\n      throw ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data) || error.message;\n    }\n  }\n};\n\n// Services API\nexport const servicesAPI = {\n  getAll: async () => {\n    try {\n      console.log('Fetching services from:', API_BASE_URL + '/Services');\n      const response = await api.get('/Services');\n      console.log('Services response:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response9, _error$response0;\n      console.error('Error fetching services:', error);\n      console.error('Error response:', (_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.data);\n      throw ((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : _error$response0.data) || error.message;\n    }\n  },\n  create: async serviceData => {\n    try {\n      const response = await api.post('/Services', serviceData);\n      return response.data;\n    } catch (error) {\n      var _error$response1;\n      throw ((_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : _error$response1.data) || error.message;\n    }\n  },\n  update: async (id, serviceData) => {\n    try {\n      const response = await api.put(`/Services/${id}`, serviceData);\n      return response.data;\n    } catch (error) {\n      var _error$response10;\n      throw ((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : _error$response10.data) || error.message;\n    }\n  },\n  delete: async id => {\n    try {\n      console.log('Deleting service with ID:', id);\n      const response = await api.delete(`/Services/${id}`);\n      console.log('Delete service response:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response11, _error$response12, _error$response13;\n      console.error('Delete service error:', error);\n      console.error('Error response:', (_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : _error$response11.data);\n      console.error('Error status:', (_error$response12 = error.response) === null || _error$response12 === void 0 ? void 0 : _error$response12.status);\n      throw ((_error$response13 = error.response) === null || _error$response13 === void 0 ? void 0 : _error$response13.data) || error.message;\n    }\n  }\n};\n\n// Time Slots API\nexport const timeSlotsAPI = {\n  getByDay: async day => {\n    try {\n      const response = await api.get(`/time-slots/by-day/${day}`);\n      return response.data;\n    } catch (error) {\n      var _error$response14;\n      throw ((_error$response14 = error.response) === null || _error$response14 === void 0 ? void 0 : _error$response14.data) || error.message;\n    }\n  },\n  getAvailable: async date => {\n    try {\n      const params = date ? {\n        date\n      } : {};\n      const response = await api.get('/time-slots/available', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response15;\n      throw ((_error$response15 = error.response) === null || _error$response15 === void 0 ? void 0 : _error$response15.data) || error.message;\n    }\n  }\n};\n\n// Staff API\nexport const staffAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Staff');\n      return response.data;\n    } catch (error) {\n      var _error$response16;\n      throw ((_error$response16 = error.response) === null || _error$response16 === void 0 ? void 0 : _error$response16.data) || error.message;\n    }\n  },\n  getById: async id => {\n    try {\n      const response = await api.get(`/Staff/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response17;\n      throw ((_error$response17 = error.response) === null || _error$response17 === void 0 ? void 0 : _error$response17.data) || error.message;\n    }\n  },\n  getByRole: async role => {\n    try {\n      const response = await api.get(`/Staff/by-role/${role}`);\n      return response.data;\n    } catch (error) {\n      var _error$response18;\n      throw ((_error$response18 = error.response) === null || _error$response18 === void 0 ? void 0 : _error$response18.data) || error.message;\n    }\n  },\n  getSchedule: async (id, startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get(`/Staff/${id}/schedule`, {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response19;\n      throw ((_error$response19 = error.response) === null || _error$response19 === void 0 ? void 0 : _error$response19.data) || error.message;\n    }\n  },\n  getAvailability: async (id, date) => {\n    try {\n      const response = await api.get(`/Staff/${id}/availability`, {\n        params: {\n          date\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response20;\n      throw ((_error$response20 = error.response) === null || _error$response20 === void 0 ? void 0 : _error$response20.data) || error.message;\n    }\n  },\n  update: async (id, staffData) => {\n    try {\n      const response = await api.put(`/Staff/${id}`, staffData);\n      return response.data;\n    } catch (error) {\n      var _error$response21;\n      throw ((_error$response21 = error.response) === null || _error$response21 === void 0 ? void 0 : _error$response21.data) || error.message;\n    }\n  },\n  updateAvailability: async (id, availabilityData) => {\n    try {\n      const response = await api.post(`/Staff/${id}/availability`, availabilityData);\n      return response.data;\n    } catch (error) {\n      var _error$response22;\n      throw ((_error$response22 = error.response) === null || _error$response22 === void 0 ? void 0 : _error$response22.data) || error.message;\n    }\n  }\n};\n\n// Appointments API\nexport const appointmentsAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Appointments');\n      return response.data;\n    } catch (error) {\n      var _error$response23;\n      throw ((_error$response23 = error.response) === null || _error$response23 === void 0 ? void 0 : _error$response23.data) || error.message;\n    }\n  },\n  getById: async id => {\n    try {\n      const response = await api.get(`/Appointments/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response24;\n      throw ((_error$response24 = error.response) === null || _error$response24 === void 0 ? void 0 : _error$response24.data) || error.message;\n    }\n  },\n  getByPatient: async patientId => {\n    try {\n      const response = await api.get(`/Appointments/patient/${patientId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response25;\n      throw ((_error$response25 = error.response) === null || _error$response25 === void 0 ? void 0 : _error$response25.data) || error.message;\n    }\n  },\n  getToday: async () => {\n    try {\n      const response = await api.get('/Appointments/today');\n      return response.data;\n    } catch (error) {\n      var _error$response26;\n      throw ((_error$response26 = error.response) === null || _error$response26 === void 0 ? void 0 : _error$response26.data) || error.message;\n    }\n  },\n  getAvailable: async date => {\n    try {\n      const response = await api.get('/Appointments/available-slots', {\n        params: {\n          date\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response27;\n      throw ((_error$response27 = error.response) === null || _error$response27 === void 0 ? void 0 : _error$response27.data) || error.message;\n    }\n  },\n  create: async appointmentData => {\n    try {\n      console.log('Creating appointment with data:', appointmentData);\n      const response = await api.post('/Appointments', appointmentData);\n      console.log('Appointment created successfully:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response28, _error$response29, _error$response30;\n      console.error('Appointment creation error:', error);\n      console.error('Error response:', (_error$response28 = error.response) === null || _error$response28 === void 0 ? void 0 : _error$response28.data);\n      console.error('Error status:', (_error$response29 = error.response) === null || _error$response29 === void 0 ? void 0 : _error$response29.status);\n      throw ((_error$response30 = error.response) === null || _error$response30 === void 0 ? void 0 : _error$response30.data) || error.message;\n    }\n  },\n  update: async (id, appointmentData) => {\n    try {\n      const response = await api.put(`/Appointments/${id}`, appointmentData);\n      return response.data;\n    } catch (error) {\n      var _error$response31;\n      throw ((_error$response31 = error.response) === null || _error$response31 === void 0 ? void 0 : _error$response31.data) || error.message;\n    }\n  },\n  updateStatus: async (id, status) => {\n    try {\n      const response = await api.put(`/Appointments/${id}/status`, {\n        status\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response32;\n      throw ((_error$response32 = error.response) === null || _error$response32 === void 0 ? void 0 : _error$response32.data) || error.message;\n    }\n  },\n  delete: async id => {\n    try {\n      const response = await api.delete(`/Appointments/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response33;\n      throw ((_error$response33 = error.response) === null || _error$response33 === void 0 ? void 0 : _error$response33.data) || error.message;\n    }\n  },\n  assignStaff: async (id, staffId) => {\n    try {\n      const response = await api.post(`/Appointments/${id}/assign-staff`, {\n        staffId\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response34;\n      throw ((_error$response34 = error.response) === null || _error$response34 === void 0 ? void 0 : _error$response34.data) || error.message;\n    }\n  },\n  bookForPatient: async appointmentData => {\n    try {\n      const response = await api.post('/Appointments/book-for-patient', appointmentData);\n      return response.data;\n    } catch (error) {\n      var _error$response35;\n      throw ((_error$response35 = error.response) === null || _error$response35 === void 0 ? void 0 : _error$response35.data) || error.message;\n    }\n  },\n  getDoctorsOnDuty: async (date, serviceId = null) => {\n    try {\n      const params = {\n        date\n      };\n      if (serviceId) params.serviceId = serviceId;\n      console.log('🔍 API: Getting doctors on duty for date:', date);\n      const response = await api.get('/Booking/doctors-on-duty', {\n        params\n      });\n      console.log('✅ API: Doctors on duty response:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response36, _error$response37, _error$response38, _error$response39;\n      console.error('❌ API: Error fetching doctors on duty:', error);\n      console.error('❌ API: Error status:', (_error$response36 = error.response) === null || _error$response36 === void 0 ? void 0 : _error$response36.status);\n\n      // Fallback to existing staff API if new endpoint returns 500 or doesn't exist\n      if (((_error$response37 = error.response) === null || _error$response37 === void 0 ? void 0 : _error$response37.status) === 500 || ((_error$response38 = error.response) === null || _error$response38 === void 0 ? void 0 : _error$response38.status) === 404) {\n        try {\n          console.log('🔄 API: Falling back to staff API...');\n          const staffResponse = await api.get('/Staff/by-role/doctor');\n          const doctors = staffResponse.data;\n\n          // Filter doctors based on their shift schedule for the requested date\n          const availableDoctors = await appointmentsAPI.filterDoctorsByAvailability(doctors, date);\n          console.log('✅ API: Filtered available doctors:', availableDoctors.length);\n          return {\n            doctors: availableDoctors\n          };\n        } catch (fallbackError) {\n          console.error('❌ API: Fallback also failed:', fallbackError);\n          // Return empty array instead of throwing to prevent UI crashes\n          console.log('⚠️ API: Returning empty doctors array due to API failures');\n          return {\n            doctors: []\n          };\n        }\n      }\n      throw ((_error$response39 = error.response) === null || _error$response39 === void 0 ? void 0 : _error$response39.data) || error.message;\n    }\n  },\n  // Helper function to filter doctors by their availability on a specific date\n  filterDoctorsByAvailability: async (doctors, date) => {\n    try {\n      const selectedDate = new Date(date);\n      const dayOfWeek = selectedDate.toLocaleDateString('en-US', {\n        weekday: 'long'\n      });\n      console.log('🔍 API: Filtering doctors for:', {\n        date,\n        dayOfWeek\n      });\n      const availableDoctors = [];\n      for (const doctor of doctors) {\n        try {\n          // Get doctor's shift schedule\n          const shiftResponse = await api.get(`/Doctor/${doctor.id}/shifts`);\n          const shiftSchedule = shiftResponse.data;\n\n          // Check if doctor is available on this day\n          const dayShift = shiftSchedule.find(shift => shift.dayOfWeek === dayOfWeek && shift.isActive);\n          if (dayShift) {\n            console.log(`✅ API: Doctor ${doctor.firstName} ${doctor.lastName} is available on ${dayOfWeek} (${dayShift.startTime} - ${dayShift.endTime})`);\n            availableDoctors.push({\n              ...doctor,\n              shiftStart: dayShift.startTime,\n              shiftEnd: dayShift.endTime,\n              isAvailable: true\n            });\n          } else {\n            console.log(`❌ API: Doctor ${doctor.firstName} ${doctor.lastName} is not available on ${dayOfWeek}`);\n          }\n        } catch (shiftError) {\n          console.log(`⚠️ API: Could not check shift schedule for doctor ${doctor.firstName} ${doctor.lastName}, including anyway`);\n          // If we can't check shift schedule, include the doctor anyway\n          availableDoctors.push({\n            ...doctor,\n            isAvailable: true\n          });\n        }\n      }\n      return availableDoctors;\n    } catch (error) {\n      console.error('❌ API: Error filtering doctors by availability:', error);\n      // Return all doctors if filtering fails\n      return doctors.map(doctor => ({\n        ...doctor,\n        isAvailable: true\n      }));\n    }\n  },\n  getAvailableSlotsByDoctor: async (doctorId, date, serviceId = null) => {\n    try {\n      // Try the new doctor-specific endpoint first\n      const params = {\n        doctorId,\n        date\n      };\n      if (serviceId) params.serviceId = serviceId;\n      const response = await api.get('/Booking/available-slots-by-doctor', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response40, _error$response41, _error$response42, _error$response43;\n      console.error('Doctor-specific slots endpoint error:', error);\n      console.error('Error status:', (_error$response40 = error.response) === null || _error$response40 === void 0 ? void 0 : _error$response40.status);\n\n      // Fallback to existing available slots API with doctor filter\n      if (((_error$response41 = error.response) === null || _error$response41 === void 0 ? void 0 : _error$response41.status) === 500 || ((_error$response42 = error.response) === null || _error$response42 === void 0 ? void 0 : _error$response42.status) === 404) {\n        try {\n          console.log('Falling back to generic slots API...');\n          const params = {\n            date,\n            doctorId\n          };\n          if (serviceId) params.serviceId = serviceId;\n          const slotsResponse = await api.get('/Booking/available-slots', {\n            params\n          });\n          return {\n            availableSlots: slotsResponse.data\n          };\n        } catch (fallbackError) {\n          console.error('Both slot endpoints failed:', fallbackError);\n          // Return empty array instead of throwing to prevent UI crashes\n          console.log('Returning empty slots array due to API failures');\n          return {\n            availableSlots: []\n          };\n        }\n      }\n      throw ((_error$response43 = error.response) === null || _error$response43 === void 0 ? void 0 : _error$response43.data) || error.message;\n    }\n  },\n  getByDoctorAndDate: async (doctorId, date) => {\n    try {\n      var _response$data, _response$data$appoin, _response$data2;\n      console.log('🔍 API: getByDoctorAndDate called with:', {\n        doctorId,\n        date\n      });\n      console.log('🔍 API: Full URL will be:', `${API_BASE_URL}/Appointments/doctor/${doctorId}/date/${date}`);\n\n      // Validate doctor ID format\n      if (!doctorId || doctorId.length !== 36) {\n        console.error('❌ API: Invalid doctor ID format:', doctorId);\n        throw new Error('Invalid doctor ID format');\n      }\n\n      // Validate date format\n      if (!date || !date.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\n        console.error('❌ API: Invalid date format:', date);\n        throw new Error('Invalid date format. Expected YYYY-MM-DD');\n      }\n      const response = await api.get(`/Appointments/doctor/${doctorId}/date/${date}`);\n      console.log('✅ API: Direct endpoint response:', response.data);\n      console.log('✅ API: Response length:', ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$appoin = _response$data.appointments) === null || _response$data$appoin === void 0 ? void 0 : _response$data$appoin.length) || ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.length) || 0);\n\n      // Handle the expected response format: { appointments: [...], totalAppointmentsFound: N }\n      let appointments = [];\n      if (response.data && response.data.appointments) {\n        appointments = response.data.appointments;\n        console.log('✅ API: Extracted appointments from response.appointments:', appointments.length);\n      } else if (Array.isArray(response.data)) {\n        appointments = response.data;\n        console.log('✅ API: Response is direct array:', appointments.length);\n      }\n\n      // If the direct endpoint returns empty array, try the fallback anyway\n      if (!appointments || appointments.length === 0) {\n        console.log('⚠️ API: Direct endpoint returned empty array, trying fallback...');\n        throw new Error('Direct endpoint returned empty array');\n      }\n      console.log('✅ API: Successfully retrieved appointments from direct endpoint:', appointments.length);\n      return appointments;\n    } catch (error) {\n      var _error$response44, _error$response45, _error$response46, _error$response47, _error$response48;\n      console.error('❌ API: Doctor-specific date endpoint error:', error);\n      console.error('❌ API: Error status:', (_error$response44 = error.response) === null || _error$response44 === void 0 ? void 0 : _error$response44.status);\n      console.error('❌ API: Error response:', (_error$response45 = error.response) === null || _error$response45 === void 0 ? void 0 : _error$response45.data);\n\n      // Fallback: Get all appointments and filter on the frontend\n      if (((_error$response46 = error.response) === null || _error$response46 === void 0 ? void 0 : _error$response46.status) === 404 || ((_error$response47 = error.response) === null || _error$response47 === void 0 ? void 0 : _error$response47.status) === 500 || error.message === 'Direct endpoint returned empty array') {\n        try {\n          console.log('🔄 API: Falling back to filtering all appointments...');\n          console.log('🎯 API: Looking for doctor ID:', doctorId);\n          console.log('📅 API: Looking for date:', date);\n\n          // Use the new public endpoint instead of the authenticated one\n          const allAppointments = await api.get('/Appointments/all-appointments');\n          const appointments = allAppointments.data;\n          console.log('📋 API: Total appointments fetched:', appointments.length);\n          console.log('📋 API: Sample appointment structure:', appointments[0]);\n          console.log('📋 API: Full appointment structure keys:', Object.keys(appointments[0]));\n\n          // Let's examine all appointments on the target date to see their structure\n          const appointmentsOnDate = appointments.filter(apt => {\n            const appointmentDate = new Date(apt.appointmentDate).toISOString().split('T')[0];\n            return appointmentDate === date;\n          });\n          console.log('📅 API: Appointments on target date:', appointmentsOnDate.length);\n          console.log('📅 API: Sample appointment on date:', appointmentsOnDate[0]);\n\n          // Filter by doctor ID (check both staffId and doctorId fields)\n          const doctorAppointments = appointmentsOnDate.filter(apt => {\n            const matchesStaffId = apt.staffId === doctorId;\n            const matchesDoctorId = apt.doctorId === doctorId;\n            console.log(`🔍 API: Checking appointment ${apt.id}: staffId=${apt.staffId}, doctorId=${apt.doctorId}, matchesStaffId=${matchesStaffId}, matchesDoctorId=${matchesDoctorId}`);\n            return matchesStaffId || matchesDoctorId;\n          });\n          console.log('👨‍⚕️ API: Doctor-specific appointments found:', doctorAppointments.length);\n          console.log('👨‍⚕️ API: Doctor appointments:', doctorAppointments);\n          return doctorAppointments;\n        } catch (fallbackError) {\n          console.error('❌ API: Fallback also failed:', fallbackError);\n          throw fallbackError;\n        }\n      }\n      throw ((_error$response48 = error.response) === null || _error$response48 === void 0 ? void 0 : _error$response48.data) || error.message;\n    }\n  }\n};\n\n// Patients API\nexport const patientsAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Patients');\n      return response.data;\n    } catch (error) {\n      var _error$response49;\n      throw ((_error$response49 = error.response) === null || _error$response49 === void 0 ? void 0 : _error$response49.data) || error.message;\n    }\n  },\n  getById: async id => {\n    try {\n      const response = await api.get(`/Patients/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response50;\n      throw ((_error$response50 = error.response) === null || _error$response50 === void 0 ? void 0 : _error$response50.data) || error.message;\n    }\n  },\n  getByUserId: async userId => {\n    try {\n      // Get all patients and find the one with matching userId\n      const response = await api.get('/Patients');\n      const patients = response.data;\n      const patient = patients.find(p => p.userId === userId);\n      if (!patient) {\n        throw new Error('Patient not found for this user');\n      }\n      return patient;\n    } catch (error) {\n      var _error$response51;\n      throw ((_error$response51 = error.response) === null || _error$response51 === void 0 ? void 0 : _error$response51.data) || error.message;\n    }\n  },\n  search: async query => {\n    try {\n      const response = await api.get('/Patients/search', {\n        params: {\n          query\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response52;\n      throw ((_error$response52 = error.response) === null || _error$response52 === void 0 ? void 0 : _error$response52.data) || error.message;\n    }\n  },\n  update: async (id, patientData) => {\n    try {\n      const response = await api.put(`/Patients/${id}`, patientData);\n      return response.data;\n    } catch (error) {\n      var _error$response53;\n      throw ((_error$response53 = error.response) === null || _error$response53 === void 0 ? void 0 : _error$response53.data) || error.message;\n    }\n  }\n};\n\n// Doctor API\nexport const doctorAPI = {\n  getPatients: async doctorId => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/patients`);\n      return response.data;\n    } catch (error) {\n      var _error$response54;\n      throw ((_error$response54 = error.response) === null || _error$response54 === void 0 ? void 0 : _error$response54.data) || error.message;\n    }\n  },\n  getUpcomingAppointments: async doctorId => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/appointments/upcoming`);\n      return response.data;\n    } catch (error) {\n      var _error$response55;\n      throw ((_error$response55 = error.response) === null || _error$response55 === void 0 ? void 0 : _error$response55.data) || error.message;\n    }\n  },\n  getAllAppointments: async doctorId => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/appointments`);\n      return response.data;\n    } catch (error) {\n      var _error$response56;\n      throw ((_error$response56 = error.response) === null || _error$response56 === void 0 ? void 0 : _error$response56.data) || error.message;\n    }\n  },\n  getSchedule: async (doctorId, startDate, endDate) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/schedule`, {\n        params: {\n          startDate,\n          endDate\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response57;\n      throw ((_error$response57 = error.response) === null || _error$response57 === void 0 ? void 0 : _error$response57.data) || error.message;\n    }\n  },\n  approveAppointment: async appointmentId => {\n    try {\n      const response = await api.put(`/Doctor/appointments/${appointmentId}/approve`);\n      return response.data;\n    } catch (error) {\n      var _error$response58;\n      throw ((_error$response58 = error.response) === null || _error$response58 === void 0 ? void 0 : _error$response58.data) || error.message;\n    }\n  },\n  rejectAppointment: async (appointmentId, reason) => {\n    try {\n      const response = await api.put(`/Doctor/appointments/${appointmentId}/reject`, {\n        reason\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response59;\n      throw ((_error$response59 = error.response) === null || _error$response59 === void 0 ? void 0 : _error$response59.data) || error.message;\n    }\n  },\n  getPatientDetails: async patientId => {\n    try {\n      const response = await api.get(`/Doctor/patients/${patientId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response60;\n      throw ((_error$response60 = error.response) === null || _error$response60 === void 0 ? void 0 : _error$response60.data) || error.message;\n    }\n  },\n  createWalkinAppointment: async appointmentData => {\n    try {\n      const response = await api.post('/Doctor/appointments/walkin', appointmentData);\n      return response.data;\n    } catch (error) {\n      var _error$response61;\n      throw ((_error$response61 = error.response) === null || _error$response61 === void 0 ? void 0 : _error$response61.data) || error.message;\n    }\n  },\n  getShiftSchedule: async doctorId => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/shifts`);\n      return response.data;\n    } catch (error) {\n      var _error$response62;\n      throw ((_error$response62 = error.response) === null || _error$response62 === void 0 ? void 0 : _error$response62.data) || error.message;\n    }\n  },\n  updateShiftSchedule: async (doctorId, shiftData) => {\n    try {\n      const response = await api.put(`/Doctor/${doctorId}/shifts`, {\n        shifts: shiftData\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response63;\n      throw ((_error$response63 = error.response) === null || _error$response63 === void 0 ? void 0 : _error$response63.data) || error.message;\n    }\n  },\n  // Admin schedule management functions (using public endpoints)\n  getShiftSchedulePublic: async doctorId => {\n    try {\n      // Use a completely public API call without authentication\n      const response = await axios.get(`${API_BASE_URL}/DoctorSchedule/${doctorId}/shifts`);\n      return response.data;\n    } catch (error) {\n      var _error$response64;\n      throw ((_error$response64 = error.response) === null || _error$response64 === void 0 ? void 0 : _error$response64.data) || error.message;\n    }\n  },\n  updateShiftSchedulePublic: async (doctorId, shiftData) => {\n    try {\n      // Use a completely public API call without authentication\n      const response = await axios.put(`${API_BASE_URL}/DoctorSchedule/${doctorId}/shifts`, shiftData);\n      return response.data;\n    } catch (error) {\n      var _error$response65;\n      throw ((_error$response65 = error.response) === null || _error$response65 === void 0 ? void 0 : _error$response65.data) || error.message;\n    }\n  }\n};\n\n// Admin API\nexport const adminAPI = {\n  getUsers: async () => {\n    try {\n      const response = await api.get('/Admin/users');\n      return response.data;\n    } catch (error) {\n      var _error$response66;\n      throw ((_error$response66 = error.response) === null || _error$response66 === void 0 ? void 0 : _error$response66.data) || error.message;\n    }\n  },\n  getRoles: async () => {\n    try {\n      const response = await api.get('/Admin/roles');\n      return response.data;\n    } catch (error) {\n      var _error$response67;\n      throw ((_error$response67 = error.response) === null || _error$response67 === void 0 ? void 0 : _error$response67.data) || error.message;\n    }\n  },\n  createStaff: async staffData => {\n    try {\n      const response = await api.post('/Admin/create-staff', staffData);\n      return response.data;\n    } catch (error) {\n      var _error$response68;\n      throw ((_error$response68 = error.response) === null || _error$response68 === void 0 ? void 0 : _error$response68.data) || error.message;\n    }\n  },\n  updateUserStatus: async (userId, isActive) => {\n    try {\n      const response = await api.put(`/Admin/users/${userId}`, {\n        isActive\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response69;\n      throw ((_error$response69 = error.response) === null || _error$response69 === void 0 ? void 0 : _error$response69.data) || error.message;\n    }\n  },\n  updateUserRole: async (userId, newRole) => {\n    try {\n      const response = await api.put(`/Admin/users/${userId}/role`, {\n        newRole\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response70;\n      throw ((_error$response70 = error.response) === null || _error$response70 === void 0 ? void 0 : _error$response70.data) || error.message;\n    }\n  },\n  getAppointmentStats: async (startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get('/Admin/reports/appointment-stats', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response71;\n      throw ((_error$response71 = error.response) === null || _error$response71 === void 0 ? void 0 : _error$response71.data) || error.message;\n    }\n  },\n  getRevenueReport: async (startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get('/Admin/reports/revenue', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response72;\n      throw ((_error$response72 = error.response) === null || _error$response72 === void 0 ? void 0 : _error$response72.data) || error.message;\n    }\n  },\n  // Admin-specific doctor schedule management\n  getDoctorShiftSchedule: async doctorId => {\n    try {\n      const response = await api.get(`/Admin/doctors/${doctorId}/schedule`);\n      return response.data;\n    } catch (error) {\n      var _error$response73;\n      throw ((_error$response73 = error.response) === null || _error$response73 === void 0 ? void 0 : _error$response73.data) || error.message;\n    }\n  },\n  updateDoctorShiftSchedule: async (doctorId, shiftData) => {\n    try {\n      const response = await api.put(`/Admin/doctors/${doctorId}/schedule`, {\n        request: shiftData\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response74;\n      throw ((_error$response74 = error.response) === null || _error$response74 === void 0 ? void 0 : _error$response74.data) || error.message;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","adminApi","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","pathname","href","MOCK_MODE","authAPI","register","userData","resolve","setTimeout","message","console","log","post","data","_error$response2","_error$response3","_error$response4","login","credentials","Date","now","user","id","email","firstName","lastName","roles","_error$response5","_error$response6","_error$response7","logout","_error$response8","servicesAPI","getAll","get","_error$response9","_error$response0","serviceData","_error$response1","update","put","_error$response10","delete","_error$response11","_error$response12","_error$response13","timeSlotsAPI","getByDay","day","_error$response14","getAvailable","date","params","_error$response15","staffAPI","_error$response16","getById","_error$response17","getByRole","role","_error$response18","getSchedule","startDate","endDate","_error$response19","getAvailability","_error$response20","staffData","_error$response21","updateAvailability","availabilityData","_error$response22","appointmentsAPI","_error$response23","_error$response24","getByPatient","patientId","_error$response25","getToday","_error$response26","_error$response27","appointmentData","_error$response28","_error$response29","_error$response30","_error$response31","updateStatus","_error$response32","_error$response33","assignStaff","staffId","_error$response34","bookForPatient","_error$response35","getDoctorsOnDuty","serviceId","_error$response36","_error$response37","_error$response38","_error$response39","staffResponse","doctors","availableDoctors","filterDoctorsByAvailability","length","fallbackError","selectedDate","dayOfWeek","toLocaleDateString","weekday","doctor","shiftResponse","shiftSchedule","dayShift","find","shift","isActive","startTime","endTime","push","shiftStart","shiftEnd","isAvailable","shiftError","map","getAvailableSlotsByDoctor","doctorId","_error$response40","_error$response41","_error$response42","_error$response43","slotsResponse","availableSlots","getByDoctorAndDate","_response$data","_response$data$appoin","_response$data2","Error","match","appointments","Array","isArray","_error$response44","_error$response45","_error$response46","_error$response47","_error$response48","allAppointments","Object","keys","appointmentsOnDate","filter","apt","appointmentDate","toISOString","split","doctorAppointments","matchesStaffId","matchesDoctorId","patientsAPI","_error$response49","_error$response50","getByUserId","userId","patients","patient","p","_error$response51","search","query","_error$response52","patientData","_error$response53","doctorAPI","getPatients","_error$response54","getUpcomingAppointments","_error$response55","getAllAppointments","_error$response56","_error$response57","approveAppointment","appointmentId","_error$response58","rejectAppointment","reason","_error$response59","getPatientDetails","_error$response60","createWalkinAppointment","_error$response61","getShiftSchedule","_error$response62","updateShiftSchedule","shiftData","shifts","_error$response63","getShiftSchedulePublic","_error$response64","updateShiftSchedulePublic","_error$response65","adminAPI","getUsers","_error$response66","getRoles","_error$response67","createStaff","_error$response68","updateUserStatus","_error$response69","updateUserRole","newRole","_error$response70","getAppointmentStats","_error$response71","getRevenueReport","_error$response72","getDoctorShiftSchedule","_error$response73","updateDoctorShiftSchedule","_error$response74"],"sources":["C:/Project/HopewellClinic/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'https://hopewellapi-azcvcferesfpgjgm.southafricanorth-01.azurewebsites.net/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Create a separate API instance for admin operations that doesn't auto-logout\nconst adminApi = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Admin API request interceptor (same as regular API)\nadminApi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle common errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Token expired or invalid - only redirect if not already on auth page\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      if (window.location.pathname !== '/auth') {\n        window.location.href = '/auth';\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Admin API response interceptor (NO auto-logout)\nadminApi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    // Don't auto-logout for admin operations - let components handle errors\n    return Promise.reject(error);\n  }\n);\n\n// Mock API for testing when backend is not available\nconst MOCK_MODE = false; // Set to false when backend is running\n\n// Auth API\nexport const authAPI = {\n  register: async (userData) => {\n    if (MOCK_MODE) {\n      // Mock successful registration\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve({ message: \"User registered successfully.\" });\n        }, 1000);\n      });\n    }\n    \n    try {\n      console.log('Attempting registration to:', API_BASE_URL + '/Auth/register');\n      console.log('Registration data:', userData);\n      const response = await api.post('/Auth/register', userData);\n      console.log('Registration response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Registration error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  login: async (credentials) => {\n    if (MOCK_MODE) {\n      // Mock successful login\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve({\n            token: \"mock-jwt-token-\" + Date.now(),\n            user: {\n              id: \"mock-user-id\",\n              email: credentials.email,\n              firstName: \"Mock\",\n              lastName: \"User\",\n              roles: [\"patient\"]\n            }\n          });\n        }, 1000);\n      });\n    }\n    \n    try {\n      console.log('Attempting login to:', API_BASE_URL + '/Auth/login');\n      console.log('Credentials:', credentials);\n      const response = await api.post('/Auth/login', credentials);\n      console.log('Login response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Login error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  logout: async () => {\n    if (MOCK_MODE) {\n      // Mock successful logout\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve({ message: \"Logged out successfully\" });\n        }, 500);\n      });\n    }\n    \n    try {\n      const response = await api.post('/Auth/logout');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Services API\nexport const servicesAPI = {\n  getAll: async () => {\n    try {\n      console.log('Fetching services from:', API_BASE_URL + '/Services');\n      const response = await api.get('/Services');\n      console.log('Services response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching services:', error);\n      console.error('Error response:', error.response?.data);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  create: async (serviceData) => {\n    try {\n      const response = await api.post('/Services', serviceData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, serviceData) => {\n    try {\n      const response = await api.put(`/Services/${id}`, serviceData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  delete: async (id) => {\n    try {\n      console.log('Deleting service with ID:', id);\n      const response = await api.delete(`/Services/${id}`);\n      console.log('Delete service response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Delete service error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Time Slots API\nexport const timeSlotsAPI = {\n  getByDay: async (day) => {\n    try {\n      const response = await api.get(`/time-slots/by-day/${day}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAvailable: async (date) => {\n    try {\n      const params = date ? { date } : {};\n      const response = await api.get('/time-slots/available', { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Staff API\nexport const staffAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Staff');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/Staff/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getByRole: async (role) => {\n    try {\n      const response = await api.get(`/Staff/by-role/${role}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getSchedule: async (id, startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get(`/Staff/${id}/schedule`, { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAvailability: async (id, date) => {\n    try {\n      const response = await api.get(`/Staff/${id}/availability`, {\n        params: { date }\n      });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, staffData) => {\n    try {\n      const response = await api.put(`/Staff/${id}`, staffData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateAvailability: async (id, availabilityData) => {\n    try {\n      const response = await api.post(`/Staff/${id}/availability`, availabilityData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Appointments API\nexport const appointmentsAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Appointments');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/Appointments/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getByPatient: async (patientId) => {\n    try {\n      const response = await api.get(`/Appointments/patient/${patientId}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getToday: async () => {\n    try {\n      const response = await api.get('/Appointments/today');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAvailable: async (date) => {\n    try {\n      const response = await api.get('/Appointments/available-slots', {\n        params: { date }\n      });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  create: async (appointmentData) => {\n    try {\n      console.log('Creating appointment with data:', appointmentData);\n      const response = await api.post('/Appointments', appointmentData);\n      console.log('Appointment created successfully:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Appointment creation error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, appointmentData) => {\n    try {\n      const response = await api.put(`/Appointments/${id}`, appointmentData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateStatus: async (id, status) => {\n    try {\n      const response = await api.put(`/Appointments/${id}/status`, { status });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  delete: async (id) => {\n    try {\n      const response = await api.delete(`/Appointments/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  assignStaff: async (id, staffId) => {\n    try {\n      const response = await api.post(`/Appointments/${id}/assign-staff`, { staffId });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  bookForPatient: async (appointmentData) => {\n    try {\n      const response = await api.post('/Appointments/book-for-patient', appointmentData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getDoctorsOnDuty: async (date, serviceId = null) => {\n    try {\n      const params = { date };\n      if (serviceId) params.serviceId = serviceId;\n      \n      console.log('🔍 API: Getting doctors on duty for date:', date);\n      const response = await api.get('/Booking/doctors-on-duty', { params });\n      console.log('✅ API: Doctors on duty response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('❌ API: Error fetching doctors on duty:', error);\n      console.error('❌ API: Error status:', error.response?.status);\n      \n      // Fallback to existing staff API if new endpoint returns 500 or doesn't exist\n      if (error.response?.status === 500 || error.response?.status === 404) {\n        try {\n          console.log('🔄 API: Falling back to staff API...');\n          const staffResponse = await api.get('/Staff/by-role/doctor');\n          const doctors = staffResponse.data;\n          \n          // Filter doctors based on their shift schedule for the requested date\n          const availableDoctors = await appointmentsAPI.filterDoctorsByAvailability(doctors, date);\n          console.log('✅ API: Filtered available doctors:', availableDoctors.length);\n          \n          return { doctors: availableDoctors };\n        } catch (fallbackError) {\n          console.error('❌ API: Fallback also failed:', fallbackError);\n          // Return empty array instead of throwing to prevent UI crashes\n          console.log('⚠️ API: Returning empty doctors array due to API failures');\n          return { doctors: [] };\n        }\n      }\n      \n      throw error.response?.data || error.message;\n    }\n  },\n\n  // Helper function to filter doctors by their availability on a specific date\n  filterDoctorsByAvailability: async (doctors, date) => {\n    try {\n      const selectedDate = new Date(date);\n      const dayOfWeek = selectedDate.toLocaleDateString('en-US', { weekday: 'long' });\n      \n      console.log('🔍 API: Filtering doctors for:', { date, dayOfWeek });\n      \n      const availableDoctors = [];\n      \n      for (const doctor of doctors) {\n        try {\n          // Get doctor's shift schedule\n          const shiftResponse = await api.get(`/Doctor/${doctor.id}/shifts`);\n          const shiftSchedule = shiftResponse.data;\n          \n          // Check if doctor is available on this day\n          const dayShift = shiftSchedule.find(shift => \n            shift.dayOfWeek === dayOfWeek && shift.isActive\n          );\n          \n          if (dayShift) {\n            console.log(`✅ API: Doctor ${doctor.firstName} ${doctor.lastName} is available on ${dayOfWeek} (${dayShift.startTime} - ${dayShift.endTime})`);\n            availableDoctors.push({\n              ...doctor,\n              shiftStart: dayShift.startTime,\n              shiftEnd: dayShift.endTime,\n              isAvailable: true\n            });\n          } else {\n            console.log(`❌ API: Doctor ${doctor.firstName} ${doctor.lastName} is not available on ${dayOfWeek}`);\n          }\n        } catch (shiftError) {\n          console.log(`⚠️ API: Could not check shift schedule for doctor ${doctor.firstName} ${doctor.lastName}, including anyway`);\n          // If we can't check shift schedule, include the doctor anyway\n          availableDoctors.push({\n            ...doctor,\n            isAvailable: true\n          });\n        }\n      }\n      \n      return availableDoctors;\n    } catch (error) {\n      console.error('❌ API: Error filtering doctors by availability:', error);\n      // Return all doctors if filtering fails\n      return doctors.map(doctor => ({ ...doctor, isAvailable: true }));\n    }\n  },\n\n  getAvailableSlotsByDoctor: async (doctorId, date, serviceId = null) => {\n    try {\n      // Try the new doctor-specific endpoint first\n      const params = { doctorId, date };\n      if (serviceId) params.serviceId = serviceId;\n      \n      const response = await api.get('/Booking/available-slots-by-doctor', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Doctor-specific slots endpoint error:', error);\n      console.error('Error status:', error.response?.status);\n      \n      // Fallback to existing available slots API with doctor filter\n      if (error.response?.status === 500 || error.response?.status === 404) {\n        try {\n          console.log('Falling back to generic slots API...');\n          const params = { date, doctorId };\n          if (serviceId) params.serviceId = serviceId;\n          \n          const slotsResponse = await api.get('/Booking/available-slots', { params });\n          return { availableSlots: slotsResponse.data };\n        } catch (fallbackError) {\n          console.error('Both slot endpoints failed:', fallbackError);\n          // Return empty array instead of throwing to prevent UI crashes\n          console.log('Returning empty slots array due to API failures');\n          return { availableSlots: [] };\n        }\n      }\n      \n      throw error.response?.data || error.message;\n    }\n  },\n\n  getByDoctorAndDate: async (doctorId, date) => {\n    try {\n      console.log('🔍 API: getByDoctorAndDate called with:', { doctorId, date });\n      console.log('🔍 API: Full URL will be:', `${API_BASE_URL}/Appointments/doctor/${doctorId}/date/${date}`);\n      \n      // Validate doctor ID format\n      if (!doctorId || doctorId.length !== 36) {\n        console.error('❌ API: Invalid doctor ID format:', doctorId);\n        throw new Error('Invalid doctor ID format');\n      }\n      \n      // Validate date format\n      if (!date || !date.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\n        console.error('❌ API: Invalid date format:', date);\n        throw new Error('Invalid date format. Expected YYYY-MM-DD');\n      }\n      \n      const response = await api.get(`/Appointments/doctor/${doctorId}/date/${date}`);\n      console.log('✅ API: Direct endpoint response:', response.data);\n      console.log('✅ API: Response length:', response.data?.appointments?.length || response.data?.length || 0);\n      \n      // Handle the expected response format: { appointments: [...], totalAppointmentsFound: N }\n      let appointments = [];\n      if (response.data && response.data.appointments) {\n        appointments = response.data.appointments;\n        console.log('✅ API: Extracted appointments from response.appointments:', appointments.length);\n      } else if (Array.isArray(response.data)) {\n        appointments = response.data;\n        console.log('✅ API: Response is direct array:', appointments.length);\n      }\n      \n      // If the direct endpoint returns empty array, try the fallback anyway\n      if (!appointments || appointments.length === 0) {\n        console.log('⚠️ API: Direct endpoint returned empty array, trying fallback...');\n        throw new Error('Direct endpoint returned empty array');\n      }\n      \n      console.log('✅ API: Successfully retrieved appointments from direct endpoint:', appointments.length);\n      return appointments;\n    } catch (error) {\n      console.error('❌ API: Doctor-specific date endpoint error:', error);\n      console.error('❌ API: Error status:', error.response?.status);\n      console.error('❌ API: Error response:', error.response?.data);\n      \n      // Fallback: Get all appointments and filter on the frontend\n      if (error.response?.status === 404 || error.response?.status === 500 || error.message === 'Direct endpoint returned empty array') {\n        try {\n          console.log('🔄 API: Falling back to filtering all appointments...');\n          console.log('🎯 API: Looking for doctor ID:', doctorId);\n          console.log('📅 API: Looking for date:', date);\n          \n          // Use the new public endpoint instead of the authenticated one\n          const allAppointments = await api.get('/Appointments/all-appointments');\n          const appointments = allAppointments.data;\n          \n          console.log('📋 API: Total appointments fetched:', appointments.length);\n          console.log('📋 API: Sample appointment structure:', appointments[0]);\n          console.log('📋 API: Full appointment structure keys:', Object.keys(appointments[0]));\n          \n          // Let's examine all appointments on the target date to see their structure\n          const appointmentsOnDate = appointments.filter(apt => {\n            const appointmentDate = new Date(apt.appointmentDate).toISOString().split('T')[0];\n            return appointmentDate === date;\n          });\n          \n          console.log('📅 API: Appointments on target date:', appointmentsOnDate.length);\n          console.log('📅 API: Sample appointment on date:', appointmentsOnDate[0]);\n          \n          // Filter by doctor ID (check both staffId and doctorId fields)\n          const doctorAppointments = appointmentsOnDate.filter(apt => {\n            const matchesStaffId = apt.staffId === doctorId;\n            const matchesDoctorId = apt.doctorId === doctorId;\n            console.log(`🔍 API: Checking appointment ${apt.id}: staffId=${apt.staffId}, doctorId=${apt.doctorId}, matchesStaffId=${matchesStaffId}, matchesDoctorId=${matchesDoctorId}`);\n            return matchesStaffId || matchesDoctorId;\n          });\n          \n          console.log('👨‍⚕️ API: Doctor-specific appointments found:', doctorAppointments.length);\n          console.log('👨‍⚕️ API: Doctor appointments:', doctorAppointments);\n          \n          return doctorAppointments;\n        } catch (fallbackError) {\n          console.error('❌ API: Fallback also failed:', fallbackError);\n          throw fallbackError;\n        }\n      }\n      \n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Patients API\nexport const patientsAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Patients');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/Patients/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getByUserId: async (userId) => {\n    try {\n      // Get all patients and find the one with matching userId\n      const response = await api.get('/Patients');\n      const patients = response.data;\n      const patient = patients.find(p => p.userId === userId);\n      if (!patient) {\n        throw new Error('Patient not found for this user');\n      }\n      return patient;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  search: async (query) => {\n    try {\n      const response = await api.get('/Patients/search', { params: { query } });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, patientData) => {\n    try {\n      const response = await api.put(`/Patients/${id}`, patientData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Doctor API\nexport const doctorAPI = {\n  getPatients: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/patients`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getUpcomingAppointments: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/appointments/upcoming`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAllAppointments: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/appointments`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getSchedule: async (doctorId, startDate, endDate) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/schedule`, {\n        params: { startDate, endDate }\n      });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  approveAppointment: async (appointmentId) => {\n    try {\n      const response = await api.put(`/Doctor/appointments/${appointmentId}/approve`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  rejectAppointment: async (appointmentId, reason) => {\n    try {\n      const response = await api.put(`/Doctor/appointments/${appointmentId}/reject`, { reason });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getPatientDetails: async (patientId) => {\n    try {\n      const response = await api.get(`/Doctor/patients/${patientId}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  createWalkinAppointment: async (appointmentData) => {\n    try {\n      const response = await api.post('/Doctor/appointments/walkin', appointmentData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getShiftSchedule: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/shifts`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateShiftSchedule: async (doctorId, shiftData) => {\n    try {\n      const response = await api.put(`/Doctor/${doctorId}/shifts`, { shifts: shiftData });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  // Admin schedule management functions (using public endpoints)\n  getShiftSchedulePublic: async (doctorId) => {\n    try {\n      // Use a completely public API call without authentication\n      const response = await axios.get(`${API_BASE_URL}/DoctorSchedule/${doctorId}/shifts`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateShiftSchedulePublic: async (doctorId, shiftData) => {\n    try {\n      // Use a completely public API call without authentication\n      const response = await axios.put(`${API_BASE_URL}/DoctorSchedule/${doctorId}/shifts`, shiftData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Admin API\nexport const adminAPI = {\n  getUsers: async () => {\n    try {\n      const response = await api.get('/Admin/users');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getRoles: async () => {\n    try {\n      const response = await api.get('/Admin/roles');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  createStaff: async (staffData) => {\n    try {\n      const response = await api.post('/Admin/create-staff', staffData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateUserStatus: async (userId, isActive) => {\n    try {\n      const response = await api.put(`/Admin/users/${userId}`, { isActive });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateUserRole: async (userId, newRole) => {\n    try {\n      const response = await api.put(`/Admin/users/${userId}/role`, { newRole });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAppointmentStats: async (startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get('/Admin/reports/appointment-stats', { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getRevenueReport: async (startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get('/Admin/reports/revenue', { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  // Admin-specific doctor schedule management\n  getDoctorShiftSchedule: async (doctorId) => {\n    try {\n      const response = await api.get(`/Admin/doctors/${doctorId}/schedule`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateDoctorShiftSchedule: async (doctorId, shiftData) => {\n    try {\n      const response = await api.put(`/Admin/doctors/${doctorId}/schedule`, { request: shiftData });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}