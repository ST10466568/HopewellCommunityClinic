{"ast":null,"code":"import axios from'axios';const API_BASE_URL='https://hopewellapi-azcvcferesfpgjgm.southafricanorth-01.azurewebsites.net/api';// Create axios instance with default config\nconst api=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});// Request interceptor to add auth token\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>{return Promise.reject(error);});// Response interceptor to handle common errors\napi.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){// Token expired or invalid - only redirect if not already on auth page\nlocalStorage.removeItem('token');localStorage.removeItem('user');if(window.location.pathname!=='/auth'){window.location.href='/auth';}}return Promise.reject(error);});// Mock API for testing when backend is not available\nconst MOCK_MODE=false;// Set to false when backend is running\n// Auth API\nexport const authAPI={register:async userData=>{if(MOCK_MODE){// Mock successful registration\nreturn new Promise(resolve=>{setTimeout(()=>{resolve({message:\"User registered successfully.\"});},1000);});}try{console.log('Attempting registration to:',API_BASE_URL+'/Auth/register');console.log('Registration data:',userData);const response=await api.post('/Auth/register',userData);console.log('Registration response:',response.data);return response.data;}catch(error){var _error$response2,_error$response3,_error$response4;console.error('Registration error:',error);console.error('Error response:',(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data);console.error('Error status:',(_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status);throw((_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.data)||error.message;}},login:async credentials=>{if(MOCK_MODE){// Mock successful login\nreturn new Promise(resolve=>{setTimeout(()=>{resolve({token:\"mock-jwt-token-\"+Date.now(),user:{id:\"mock-user-id\",email:credentials.email,firstName:\"Mock\",lastName:\"User\",roles:[\"patient\"]}});},1000);});}try{console.log('Attempting login to:',API_BASE_URL+'/Auth/login');console.log('Credentials:',credentials);const response=await api.post('/Auth/login',credentials);console.log('Login response:',response.data);return response.data;}catch(error){var _error$response5,_error$response6,_error$response7;console.error('Login error:',error);console.error('Error response:',(_error$response5=error.response)===null||_error$response5===void 0?void 0:_error$response5.data);console.error('Error status:',(_error$response6=error.response)===null||_error$response6===void 0?void 0:_error$response6.status);throw((_error$response7=error.response)===null||_error$response7===void 0?void 0:_error$response7.data)||error.message;}},logout:async()=>{if(MOCK_MODE){// Mock successful logout\nreturn new Promise(resolve=>{setTimeout(()=>{resolve({message:\"Logged out successfully\"});},500);});}try{const response=await api.post('/Auth/logout');return response.data;}catch(error){var _error$response8;throw((_error$response8=error.response)===null||_error$response8===void 0?void 0:_error$response8.data)||error.message;}}};// Services API\nexport const servicesAPI={getAll:async()=>{try{console.log('Fetching services from:',API_BASE_URL+'/Services');const response=await api.get('/Services');console.log('Services response:',response.data);return response.data;}catch(error){var _error$response9,_error$response0;console.error('Error fetching services:',error);console.error('Error response:',(_error$response9=error.response)===null||_error$response9===void 0?void 0:_error$response9.data);throw((_error$response0=error.response)===null||_error$response0===void 0?void 0:_error$response0.data)||error.message;}},create:async serviceData=>{try{const response=await api.post('/Services',serviceData);return response.data;}catch(error){var _error$response1;throw((_error$response1=error.response)===null||_error$response1===void 0?void 0:_error$response1.data)||error.message;}},update:async(id,serviceData)=>{try{const response=await api.put(\"/Services/\".concat(id),serviceData);return response.data;}catch(error){var _error$response10;throw((_error$response10=error.response)===null||_error$response10===void 0?void 0:_error$response10.data)||error.message;}},delete:async id=>{try{console.log('Deleting service with ID:',id);const response=await api.delete(\"/Services/\".concat(id));console.log('Delete service response:',response.data);return response.data;}catch(error){var _error$response11,_error$response12,_error$response13;console.error('Delete service error:',error);console.error('Error response:',(_error$response11=error.response)===null||_error$response11===void 0?void 0:_error$response11.data);console.error('Error status:',(_error$response12=error.response)===null||_error$response12===void 0?void 0:_error$response12.status);throw((_error$response13=error.response)===null||_error$response13===void 0?void 0:_error$response13.data)||error.message;}}};// Time Slots API\nexport const timeSlotsAPI={getByDay:async day=>{try{const response=await api.get(\"/time-slots/by-day/\".concat(day));return response.data;}catch(error){var _error$response14;throw((_error$response14=error.response)===null||_error$response14===void 0?void 0:_error$response14.data)||error.message;}},getAvailable:async date=>{try{const params=date?{date}:{};const response=await api.get('/time-slots/available',{params});return response.data;}catch(error){var _error$response15;throw((_error$response15=error.response)===null||_error$response15===void 0?void 0:_error$response15.data)||error.message;}}};// Staff API\nexport const staffAPI={getAll:async()=>{try{const response=await api.get('/Staff');return response.data;}catch(error){var _error$response16;throw((_error$response16=error.response)===null||_error$response16===void 0?void 0:_error$response16.data)||error.message;}},getById:async id=>{try{const response=await api.get(\"/Staff/\".concat(id));return response.data;}catch(error){var _error$response17;throw((_error$response17=error.response)===null||_error$response17===void 0?void 0:_error$response17.data)||error.message;}},getByRole:async role=>{try{const response=await api.get(\"/Staff/by-role/\".concat(role));return response.data;}catch(error){var _error$response18;throw((_error$response18=error.response)===null||_error$response18===void 0?void 0:_error$response18.data)||error.message;}},getSchedule:async(id,startDate,endDate)=>{try{const params={};if(startDate)params.startDate=startDate;if(endDate)params.endDate=endDate;const response=await api.get(\"/Staff/\".concat(id,\"/schedule\"),{params});return response.data;}catch(error){var _error$response19;throw((_error$response19=error.response)===null||_error$response19===void 0?void 0:_error$response19.data)||error.message;}},getAvailability:async(id,date)=>{try{const response=await api.get(\"/Staff/\".concat(id,\"/availability\"),{params:{date}});return response.data;}catch(error){var _error$response20;throw((_error$response20=error.response)===null||_error$response20===void 0?void 0:_error$response20.data)||error.message;}},update:async(id,staffData)=>{try{const response=await api.put(\"/Staff/\".concat(id),staffData);return response.data;}catch(error){var _error$response21;throw((_error$response21=error.response)===null||_error$response21===void 0?void 0:_error$response21.data)||error.message;}},updateAvailability:async(id,availabilityData)=>{try{const response=await api.post(\"/Staff/\".concat(id,\"/availability\"),availabilityData);return response.data;}catch(error){var _error$response22;throw((_error$response22=error.response)===null||_error$response22===void 0?void 0:_error$response22.data)||error.message;}}};// Appointments API\nexport const appointmentsAPI={getAll:async()=>{try{const response=await api.get('/Appointments');return response.data;}catch(error){var _error$response23;throw((_error$response23=error.response)===null||_error$response23===void 0?void 0:_error$response23.data)||error.message;}},getById:async id=>{try{const response=await api.get(\"/Appointments/\".concat(id));return response.data;}catch(error){var _error$response24;throw((_error$response24=error.response)===null||_error$response24===void 0?void 0:_error$response24.data)||error.message;}},getByPatient:async patientId=>{try{const response=await api.get(\"/Appointments/patient/\".concat(patientId));return response.data;}catch(error){var _error$response25;throw((_error$response25=error.response)===null||_error$response25===void 0?void 0:_error$response25.data)||error.message;}},getToday:async()=>{try{const response=await api.get('/Appointments/today');return response.data;}catch(error){var _error$response26;throw((_error$response26=error.response)===null||_error$response26===void 0?void 0:_error$response26.data)||error.message;}},getAvailable:async date=>{try{const response=await api.get('/Appointments/available-slots',{params:{date}});return response.data;}catch(error){var _error$response27;throw((_error$response27=error.response)===null||_error$response27===void 0?void 0:_error$response27.data)||error.message;}},create:async appointmentData=>{try{console.log('Creating appointment with data:',appointmentData);const response=await api.post('/Appointments',appointmentData);console.log('Appointment created successfully:',response.data);return response.data;}catch(error){var _error$response28,_error$response29,_error$response30;console.error('Appointment creation error:',error);console.error('Error response:',(_error$response28=error.response)===null||_error$response28===void 0?void 0:_error$response28.data);console.error('Error status:',(_error$response29=error.response)===null||_error$response29===void 0?void 0:_error$response29.status);throw((_error$response30=error.response)===null||_error$response30===void 0?void 0:_error$response30.data)||error.message;}},update:async(id,appointmentData)=>{try{const response=await api.put(\"/Appointments/\".concat(id),appointmentData);return response.data;}catch(error){var _error$response31;throw((_error$response31=error.response)===null||_error$response31===void 0?void 0:_error$response31.data)||error.message;}},updateStatus:async(id,status)=>{try{const response=await api.put(\"/Appointments/\".concat(id,\"/status\"),{status});return response.data;}catch(error){var _error$response32;throw((_error$response32=error.response)===null||_error$response32===void 0?void 0:_error$response32.data)||error.message;}},delete:async id=>{try{const response=await api.delete(\"/Appointments/\".concat(id));return response.data;}catch(error){var _error$response33;throw((_error$response33=error.response)===null||_error$response33===void 0?void 0:_error$response33.data)||error.message;}},assignStaff:async(id,staffId)=>{try{const response=await api.post(\"/Appointments/\".concat(id,\"/assign-staff\"),{staffId});return response.data;}catch(error){var _error$response34;throw((_error$response34=error.response)===null||_error$response34===void 0?void 0:_error$response34.data)||error.message;}},bookForPatient:async appointmentData=>{try{const response=await api.post('/Appointments/book-for-patient',appointmentData);return response.data;}catch(error){var _error$response35;throw((_error$response35=error.response)===null||_error$response35===void 0?void 0:_error$response35.data)||error.message;}}};// Patients API\nexport const patientsAPI={getAll:async()=>{try{const response=await api.get('/Patients');return response.data;}catch(error){var _error$response36;throw((_error$response36=error.response)===null||_error$response36===void 0?void 0:_error$response36.data)||error.message;}},getById:async id=>{try{const response=await api.get(\"/Patients/\".concat(id));return response.data;}catch(error){var _error$response37;throw((_error$response37=error.response)===null||_error$response37===void 0?void 0:_error$response37.data)||error.message;}},getByUserId:async userId=>{try{// Get all patients and find the one with matching userId\nconst response=await api.get('/Patients');const patients=response.data;const patient=patients.find(p=>p.userId===userId);if(!patient){throw new Error('Patient not found for this user');}return patient;}catch(error){var _error$response38;throw((_error$response38=error.response)===null||_error$response38===void 0?void 0:_error$response38.data)||error.message;}},search:async query=>{try{const response=await api.get('/Patients/search',{params:{query}});return response.data;}catch(error){var _error$response39;throw((_error$response39=error.response)===null||_error$response39===void 0?void 0:_error$response39.data)||error.message;}},update:async(id,patientData)=>{try{const response=await api.put(\"/Patients/\".concat(id),patientData);return response.data;}catch(error){var _error$response40;throw((_error$response40=error.response)===null||_error$response40===void 0?void 0:_error$response40.data)||error.message;}}};// Doctor API\nexport const doctorAPI={getPatients:async doctorId=>{try{const response=await api.get(\"/Doctor/\".concat(doctorId,\"/patients\"));return response.data;}catch(error){var _error$response41;throw((_error$response41=error.response)===null||_error$response41===void 0?void 0:_error$response41.data)||error.message;}},getUpcomingAppointments:async doctorId=>{try{const response=await api.get(\"/Doctor/\".concat(doctorId,\"/appointments/upcoming\"));return response.data;}catch(error){var _error$response42;throw((_error$response42=error.response)===null||_error$response42===void 0?void 0:_error$response42.data)||error.message;}},getAllAppointments:async doctorId=>{try{const response=await api.get(\"/Doctor/\".concat(doctorId,\"/appointments\"));return response.data;}catch(error){var _error$response43;throw((_error$response43=error.response)===null||_error$response43===void 0?void 0:_error$response43.data)||error.message;}},getSchedule:async(doctorId,startDate,endDate)=>{try{const response=await api.get(\"/Doctor/\".concat(doctorId,\"/schedule\"),{params:{startDate,endDate}});return response.data;}catch(error){var _error$response44;throw((_error$response44=error.response)===null||_error$response44===void 0?void 0:_error$response44.data)||error.message;}},updateShiftSchedule:async(doctorId,shiftData)=>{try{const response=await api.put(\"/Doctor/\".concat(doctorId,\"/shifts\"),shiftData);return response.data;}catch(error){var _error$response45;throw((_error$response45=error.response)===null||_error$response45===void 0?void 0:_error$response45.data)||error.message;}},getShiftSchedule:async doctorId=>{try{const response=await api.get(\"/Doctor/\".concat(doctorId,\"/shifts\"));return response.data;}catch(error){var _error$response46;throw((_error$response46=error.response)===null||_error$response46===void 0?void 0:_error$response46.data)||error.message;}},approveAppointment:async appointmentId=>{try{const response=await api.put(\"/Doctor/appointments/\".concat(appointmentId,\"/approve\"));return response.data;}catch(error){var _error$response47;throw((_error$response47=error.response)===null||_error$response47===void 0?void 0:_error$response47.data)||error.message;}},rejectAppointment:async(appointmentId,reason)=>{try{const response=await api.put(\"/Doctor/appointments/\".concat(appointmentId,\"/reject\"),{reason});return response.data;}catch(error){var _error$response48;throw((_error$response48=error.response)===null||_error$response48===void 0?void 0:_error$response48.data)||error.message;}},getPatientDetails:async patientId=>{try{const response=await api.get(\"/Doctor/patients/\".concat(patientId));return response.data;}catch(error){var _error$response49;throw((_error$response49=error.response)===null||_error$response49===void 0?void 0:_error$response49.data)||error.message;}},createWalkinAppointment:async appointmentData=>{try{const response=await api.post('/Doctor/appointments/walkin',appointmentData);return response.data;}catch(error){var _error$response50;throw((_error$response50=error.response)===null||_error$response50===void 0?void 0:_error$response50.data)||error.message;}}};// Admin API\nexport const adminAPI={getUsers:async()=>{try{const response=await api.get('/Admin/users');return response.data;}catch(error){var _error$response51;throw((_error$response51=error.response)===null||_error$response51===void 0?void 0:_error$response51.data)||error.message;}},getRoles:async()=>{try{const response=await api.get('/Admin/roles');return response.data;}catch(error){var _error$response52;throw((_error$response52=error.response)===null||_error$response52===void 0?void 0:_error$response52.data)||error.message;}},createStaff:async staffData=>{try{const response=await api.post('/Admin/create-staff',staffData);return response.data;}catch(error){var _error$response53;throw((_error$response53=error.response)===null||_error$response53===void 0?void 0:_error$response53.data)||error.message;}},updateUserStatus:async(userId,isActive)=>{try{const response=await api.put(\"/Admin/users/\".concat(userId),{isActive});return response.data;}catch(error){var _error$response54;throw((_error$response54=error.response)===null||_error$response54===void 0?void 0:_error$response54.data)||error.message;}},updateUserRole:async(userId,newRole)=>{try{const response=await api.put(\"/Admin/users/\".concat(userId,\"/role\"),{newRole});return response.data;}catch(error){var _error$response55;throw((_error$response55=error.response)===null||_error$response55===void 0?void 0:_error$response55.data)||error.message;}},getAppointmentStats:async(startDate,endDate)=>{try{const params={};if(startDate)params.startDate=startDate;if(endDate)params.endDate=endDate;const response=await api.get('/Admin/reports/appointment-stats',{params});return response.data;}catch(error){var _error$response56;throw((_error$response56=error.response)===null||_error$response56===void 0?void 0:_error$response56.data)||error.message;}},getRevenueReport:async(startDate,endDate)=>{try{const params={};if(startDate)params.startDate=startDate;if(endDate)params.endDate=endDate;const response=await api.get('/Admin/reports/revenue',{params});return response.data;}catch(error){var _error$response57;throw((_error$response57=error.response)===null||_error$response57===void 0?void 0:_error$response57.data)||error.message;}}};export default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","error","Promise","reject","response","_error$response","status","removeItem","window","location","pathname","href","MOCK_MODE","authAPI","register","userData","resolve","setTimeout","message","console","log","post","data","_error$response2","_error$response3","_error$response4","login","credentials","Date","now","user","id","email","firstName","lastName","roles","_error$response5","_error$response6","_error$response7","logout","_error$response8","servicesAPI","getAll","get","_error$response9","_error$response0","serviceData","_error$response1","update","put","_error$response10","delete","_error$response11","_error$response12","_error$response13","timeSlotsAPI","getByDay","day","_error$response14","getAvailable","date","params","_error$response15","staffAPI","_error$response16","getById","_error$response17","getByRole","role","_error$response18","getSchedule","startDate","endDate","_error$response19","getAvailability","_error$response20","staffData","_error$response21","updateAvailability","availabilityData","_error$response22","appointmentsAPI","_error$response23","_error$response24","getByPatient","patientId","_error$response25","getToday","_error$response26","_error$response27","appointmentData","_error$response28","_error$response29","_error$response30","_error$response31","updateStatus","_error$response32","_error$response33","assignStaff","staffId","_error$response34","bookForPatient","_error$response35","patientsAPI","_error$response36","_error$response37","getByUserId","userId","patients","patient","find","p","Error","_error$response38","search","query","_error$response39","patientData","_error$response40","doctorAPI","getPatients","doctorId","_error$response41","getUpcomingAppointments","_error$response42","getAllAppointments","_error$response43","_error$response44","updateShiftSchedule","shiftData","_error$response45","getShiftSchedule","_error$response46","approveAppointment","appointmentId","_error$response47","rejectAppointment","reason","_error$response48","getPatientDetails","_error$response49","createWalkinAppointment","_error$response50","adminAPI","getUsers","_error$response51","getRoles","_error$response52","createStaff","_error$response53","updateUserStatus","isActive","_error$response54","updateUserRole","newRole","_error$response55","getAppointmentStats","_error$response56","getRevenueReport","_error$response57"],"sources":["C:/Project/HopewellClinic/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'https://hopewellapi-azcvcferesfpgjgm.southafricanorth-01.azurewebsites.net/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle common errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Token expired or invalid - only redirect if not already on auth page\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      if (window.location.pathname !== '/auth') {\n        window.location.href = '/auth';\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Mock API for testing when backend is not available\nconst MOCK_MODE = false; // Set to false when backend is running\n\n// Auth API\nexport const authAPI = {\n  register: async (userData) => {\n    if (MOCK_MODE) {\n      // Mock successful registration\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve({ message: \"User registered successfully.\" });\n        }, 1000);\n      });\n    }\n    \n    try {\n      console.log('Attempting registration to:', API_BASE_URL + '/Auth/register');\n      console.log('Registration data:', userData);\n      const response = await api.post('/Auth/register', userData);\n      console.log('Registration response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Registration error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  login: async (credentials) => {\n    if (MOCK_MODE) {\n      // Mock successful login\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve({\n            token: \"mock-jwt-token-\" + Date.now(),\n            user: {\n              id: \"mock-user-id\",\n              email: credentials.email,\n              firstName: \"Mock\",\n              lastName: \"User\",\n              roles: [\"patient\"]\n            }\n          });\n        }, 1000);\n      });\n    }\n    \n    try {\n      console.log('Attempting login to:', API_BASE_URL + '/Auth/login');\n      console.log('Credentials:', credentials);\n      const response = await api.post('/Auth/login', credentials);\n      console.log('Login response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Login error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  logout: async () => {\n    if (MOCK_MODE) {\n      // Mock successful logout\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve({ message: \"Logged out successfully\" });\n        }, 500);\n      });\n    }\n    \n    try {\n      const response = await api.post('/Auth/logout');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Services API\nexport const servicesAPI = {\n  getAll: async () => {\n    try {\n      console.log('Fetching services from:', API_BASE_URL + '/Services');\n      const response = await api.get('/Services');\n      console.log('Services response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching services:', error);\n      console.error('Error response:', error.response?.data);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  create: async (serviceData) => {\n    try {\n      const response = await api.post('/Services', serviceData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, serviceData) => {\n    try {\n      const response = await api.put(`/Services/${id}`, serviceData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  delete: async (id) => {\n    try {\n      console.log('Deleting service with ID:', id);\n      const response = await api.delete(`/Services/${id}`);\n      console.log('Delete service response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Delete service error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Time Slots API\nexport const timeSlotsAPI = {\n  getByDay: async (day) => {\n    try {\n      const response = await api.get(`/time-slots/by-day/${day}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAvailable: async (date) => {\n    try {\n      const params = date ? { date } : {};\n      const response = await api.get('/time-slots/available', { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Staff API\nexport const staffAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Staff');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/Staff/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getByRole: async (role) => {\n    try {\n      const response = await api.get(`/Staff/by-role/${role}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getSchedule: async (id, startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get(`/Staff/${id}/schedule`, { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAvailability: async (id, date) => {\n    try {\n      const response = await api.get(`/Staff/${id}/availability`, {\n        params: { date }\n      });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, staffData) => {\n    try {\n      const response = await api.put(`/Staff/${id}`, staffData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateAvailability: async (id, availabilityData) => {\n    try {\n      const response = await api.post(`/Staff/${id}/availability`, availabilityData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Appointments API\nexport const appointmentsAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Appointments');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/Appointments/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getByPatient: async (patientId) => {\n    try {\n      const response = await api.get(`/Appointments/patient/${patientId}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getToday: async () => {\n    try {\n      const response = await api.get('/Appointments/today');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAvailable: async (date) => {\n    try {\n      const response = await api.get('/Appointments/available-slots', {\n        params: { date }\n      });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  create: async (appointmentData) => {\n    try {\n      console.log('Creating appointment with data:', appointmentData);\n      const response = await api.post('/Appointments', appointmentData);\n      console.log('Appointment created successfully:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Appointment creation error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, appointmentData) => {\n    try {\n      const response = await api.put(`/Appointments/${id}`, appointmentData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateStatus: async (id, status) => {\n    try {\n      const response = await api.put(`/Appointments/${id}/status`, { status });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  delete: async (id) => {\n    try {\n      const response = await api.delete(`/Appointments/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  assignStaff: async (id, staffId) => {\n    try {\n      const response = await api.post(`/Appointments/${id}/assign-staff`, { staffId });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  bookForPatient: async (appointmentData) => {\n    try {\n      const response = await api.post('/Appointments/book-for-patient', appointmentData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Patients API\nexport const patientsAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Patients');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/Patients/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getByUserId: async (userId) => {\n    try {\n      // Get all patients and find the one with matching userId\n      const response = await api.get('/Patients');\n      const patients = response.data;\n      const patient = patients.find(p => p.userId === userId);\n      if (!patient) {\n        throw new Error('Patient not found for this user');\n      }\n      return patient;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  search: async (query) => {\n    try {\n      const response = await api.get('/Patients/search', { params: { query } });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, patientData) => {\n    try {\n      const response = await api.put(`/Patients/${id}`, patientData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Doctor API\nexport const doctorAPI = {\n  getPatients: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/patients`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getUpcomingAppointments: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/appointments/upcoming`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAllAppointments: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/appointments`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getSchedule: async (doctorId, startDate, endDate) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/schedule`, {\n        params: { startDate, endDate }\n      });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateShiftSchedule: async (doctorId, shiftData) => {\n    try {\n      const response = await api.put(`/Doctor/${doctorId}/shifts`, shiftData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getShiftSchedule: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/shifts`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  approveAppointment: async (appointmentId) => {\n    try {\n      const response = await api.put(`/Doctor/appointments/${appointmentId}/approve`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  rejectAppointment: async (appointmentId, reason) => {\n    try {\n      const response = await api.put(`/Doctor/appointments/${appointmentId}/reject`, { reason });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getPatientDetails: async (patientId) => {\n    try {\n      const response = await api.get(`/Doctor/patients/${patientId}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  createWalkinAppointment: async (appointmentData) => {\n    try {\n      const response = await api.post('/Doctor/appointments/walkin', appointmentData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Admin API\nexport const adminAPI = {\n  getUsers: async () => {\n    try {\n      const response = await api.get('/Admin/users');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getRoles: async () => {\n    try {\n      const response = await api.get('/Admin/roles');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  createStaff: async (staffData) => {\n    try {\n      const response = await api.post('/Admin/create-staff', staffData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateUserStatus: async (userId, isActive) => {\n    try {\n      const response = await api.put(`/Admin/users/${userId}`, { isActive });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateUserRole: async (userId, newRole) => {\n    try {\n      const response = await api.put(`/Admin/users/${userId}/role`, { newRole });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAppointmentStats: async (startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get('/Admin/reports/appointment-stats', { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getRevenueReport: async (startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get('/Admin/reports/revenue', { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}