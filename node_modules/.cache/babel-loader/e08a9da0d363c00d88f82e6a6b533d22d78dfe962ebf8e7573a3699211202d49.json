{"ast":null,"code":"import axios from'axios';const API_BASE_URL='https://hopewellapi-azcvcferesfpgjgm.southafricanorth-01.azurewebsites.net/api';// Create axios instance with default config\nconst api=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});// Request interceptor to add auth token\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>{return Promise.reject(error);});// Response interceptor to handle common errors\napi.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){var _error$config,_error$config$url,_error$config2,_error$config2$url,_error$config3,_error$config3$url;// Only logout if this is an authentication-related endpoint or if we're in mock mode\nconst isAuthEndpoint=(_error$config=error.config)===null||_error$config===void 0?void 0:(_error$config$url=_error$config.url)===null||_error$config$url===void 0?void 0:_error$config$url.includes('/Auth/');const isLoginEndpoint=(_error$config2=error.config)===null||_error$config2===void 0?void 0:(_error$config2$url=_error$config2.url)===null||_error$config2$url===void 0?void 0:_error$config2$url.includes('/login');const isRegisterEndpoint=(_error$config3=error.config)===null||_error$config3===void 0?void 0:(_error$config3$url=_error$config3.url)===null||_error$config3$url===void 0?void 0:_error$config3$url.includes('/register');// Real API mode - be more careful about when to logout\nif(isAuthEndpoint){localStorage.removeItem('token');localStorage.removeItem('user');if(window.location.pathname!=='/auth'){window.location.href='/auth';}}}return Promise.reject(error);});// Real API only - no mock mode\n// Auth API\nexport const authAPI={register:async userData=>{try{console.log('Attempting registration to:',API_BASE_URL+'/Auth/register');console.log('Registration data:',userData);const response=await api.post('/Auth/register',userData);console.log('Registration response:',response.data);return response.data;}catch(error){var _error$response2,_error$response3,_error$response4;console.error('Registration error:',error);console.error('Error response:',(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data);console.error('Error status:',(_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status);throw((_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.data)||error.message;}},login:async credentials=>{try{console.log('Attempting login to:',API_BASE_URL+'/Auth/login');console.log('Credentials:',credentials);const response=await api.post('/Auth/login',credentials);console.log('Login response:',response.data);return response.data;}catch(error){var _error$response5,_error$response6,_error$response7;console.error('Login error:',error);console.error('Error response:',(_error$response5=error.response)===null||_error$response5===void 0?void 0:_error$response5.data);console.error('Error status:',(_error$response6=error.response)===null||_error$response6===void 0?void 0:_error$response6.status);throw((_error$response7=error.response)===null||_error$response7===void 0?void 0:_error$response7.data)||error.message;}},logout:async()=>{try{const response=await api.post('/Auth/logout');return response.data;}catch(error){var _error$response8;throw((_error$response8=error.response)===null||_error$response8===void 0?void 0:_error$response8.data)||error.message;}}};// Services API\nexport const servicesAPI={getAll:async()=>{try{console.log('Fetching services from:',API_BASE_URL+'/Services');const response=await api.get('/Services');console.log('Services response:',response.data);return response.data;}catch(error){var _error$response9,_error$response0;console.error('Error fetching services:',error);console.error('Error response:',(_error$response9=error.response)===null||_error$response9===void 0?void 0:_error$response9.data);throw((_error$response0=error.response)===null||_error$response0===void 0?void 0:_error$response0.data)||error.message;}},create:async serviceData=>{try{const response=await api.post('/Services',serviceData);return response.data;}catch(error){var _error$response1;throw((_error$response1=error.response)===null||_error$response1===void 0?void 0:_error$response1.data)||error.message;}},update:async(id,serviceData)=>{try{const response=await api.put(\"/Services/\".concat(id),serviceData);return response.data;}catch(error){var _error$response10;throw((_error$response10=error.response)===null||_error$response10===void 0?void 0:_error$response10.data)||error.message;}},delete:async id=>{try{console.log('Deleting service with ID:',id);const response=await api.delete(\"/Services/\".concat(id));console.log('Delete service response:',response.data);return response.data;}catch(error){var _error$response11,_error$response12,_error$response13;console.error('Delete service error:',error);console.error('Error response:',(_error$response11=error.response)===null||_error$response11===void 0?void 0:_error$response11.data);console.error('Error status:',(_error$response12=error.response)===null||_error$response12===void 0?void 0:_error$response12.status);throw((_error$response13=error.response)===null||_error$response13===void 0?void 0:_error$response13.data)||error.message;}}};// Time Slots API\nexport const timeSlotsAPI={getByDay:async day=>{try{const response=await api.get(\"/time-slots/by-day/\".concat(day));return response.data;}catch(error){var _error$response14;throw((_error$response14=error.response)===null||_error$response14===void 0?void 0:_error$response14.data)||error.message;}},getAvailable:async date=>{try{const params=date?{date}:{};const response=await api.get('/time-slots/available',{params});return response.data;}catch(error){var _error$response15;throw((_error$response15=error.response)===null||_error$response15===void 0?void 0:_error$response15.data)||error.message;}}};// Staff API\nexport const staffAPI={getAll:async()=>{try{const response=await api.get('/Staff');return response.data;}catch(error){var _error$response16;throw((_error$response16=error.response)===null||_error$response16===void 0?void 0:_error$response16.data)||error.message;}},getById:async id=>{try{const response=await api.get(\"/Staff/\".concat(id));return response.data;}catch(error){var _error$response17;throw((_error$response17=error.response)===null||_error$response17===void 0?void 0:_error$response17.data)||error.message;}},getByRole:async role=>{try{const response=await api.get(\"/Staff/by-role/\".concat(role));return response.data;}catch(error){var _error$response18;throw((_error$response18=error.response)===null||_error$response18===void 0?void 0:_error$response18.data)||error.message;}},getSchedule:async(id,startDate,endDate)=>{try{const params={};if(startDate)params.startDate=startDate;if(endDate)params.endDate=endDate;const response=await api.get(\"/Staff/\".concat(id,\"/schedule\"),{params});return response.data;}catch(error){var _error$response19;throw((_error$response19=error.response)===null||_error$response19===void 0?void 0:_error$response19.data)||error.message;}},getAvailability:async(id,date)=>{try{const response=await api.get(\"/Staff/\".concat(id,\"/availability\"),{params:{date}});return response.data;}catch(error){var _error$response20;throw((_error$response20=error.response)===null||_error$response20===void 0?void 0:_error$response20.data)||error.message;}},update:async(id,staffData)=>{try{const response=await api.put(\"/Staff/\".concat(id),staffData);return response.data;}catch(error){var _error$response21;throw((_error$response21=error.response)===null||_error$response21===void 0?void 0:_error$response21.data)||error.message;}},updateAvailability:async(id,availabilityData)=>{try{const response=await api.post(\"/Staff/\".concat(id,\"/availability\"),availabilityData);return response.data;}catch(error){var _error$response22;throw((_error$response22=error.response)===null||_error$response22===void 0?void 0:_error$response22.data)||error.message;}}};// Appointments API\nexport const appointmentsAPI={getAll:async()=>{try{const response=await api.get('/Appointments');return response.data;}catch(error){var _error$response23;throw((_error$response23=error.response)===null||_error$response23===void 0?void 0:_error$response23.data)||error.message;}},getDoctorsOnDuty:async function(date){let serviceId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;try{const params={date};if(serviceId)params.serviceId=serviceId;const response=await api.get('/Appointments/doctors-on-duty',{params});return response.data;}catch(error){console.error('Error fetching doctors on duty:',error);// Fallback to existing staff API if new endpoint doesn't exist\ntry{const staffResponse=await api.get('/Staff/by-role/doctor');return{doctors:staffResponse.data};}catch(fallbackError){var _error$response24;throw((_error$response24=error.response)===null||_error$response24===void 0?void 0:_error$response24.data)||error.message;}}},getAvailableSlotsByDoctor:async function(doctorId,date){let serviceId=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;try{const params={doctorId,date};if(serviceId)params.serviceId=serviceId;const response=await api.get('/Appointments/available-slots-by-doctor',{params});return response.data;}catch(error){console.error('Error fetching doctor-specific slots:',error);// Fallback to existing available slots API\ntry{const slotsResponse=await api.get('/Appointments/available-slots',{params:{date}});return{availableSlots:slotsResponse.data};}catch(fallbackError){var _error$response25;throw((_error$response25=error.response)===null||_error$response25===void 0?void 0:_error$response25.data)||error.message;}}},getById:async id=>{try{const response=await api.get(\"/Appointments/\".concat(id));return response.data;}catch(error){var _error$response26;throw((_error$response26=error.response)===null||_error$response26===void 0?void 0:_error$response26.data)||error.message;}},getByPatient:async patientId=>{try{const response=await api.get(\"/Appointments/patient/\".concat(patientId));return response.data;}catch(error){var _error$response27;throw((_error$response27=error.response)===null||_error$response27===void 0?void 0:_error$response27.data)||error.message;}},getToday:async()=>{try{const response=await api.get('/Appointments/today');return response.data;}catch(error){var _error$response28;throw((_error$response28=error.response)===null||_error$response28===void 0?void 0:_error$response28.data)||error.message;}},getAvailable:async date=>{try{const response=await api.get('/Appointments/available-slots',{params:{date}});return response.data;}catch(error){var _error$response29;throw((_error$response29=error.response)===null||_error$response29===void 0?void 0:_error$response29.data)||error.message;}},create:async appointmentData=>{try{console.log('Creating appointment with data:',appointmentData);const response=await api.post('/Appointments',appointmentData);console.log('Appointment created successfully:',response.data);return response.data;}catch(error){var _error$response30,_error$response31,_error$response32;console.error('Appointment creation error:',error);console.error('Error response:',(_error$response30=error.response)===null||_error$response30===void 0?void 0:_error$response30.data);console.error('Error status:',(_error$response31=error.response)===null||_error$response31===void 0?void 0:_error$response31.status);throw((_error$response32=error.response)===null||_error$response32===void 0?void 0:_error$response32.data)||error.message;}},update:async(id,appointmentData)=>{try{const response=await api.put(\"/Appointments/\".concat(id),appointmentData);return response.data;}catch(error){var _error$response33;throw((_error$response33=error.response)===null||_error$response33===void 0?void 0:_error$response33.data)||error.message;}},updateStatus:async(id,status)=>{try{const response=await api.put(\"/Appointments/\".concat(id,\"/status\"),{status});return response.data;}catch(error){var _error$response34;throw((_error$response34=error.response)===null||_error$response34===void 0?void 0:_error$response34.data)||error.message;}},delete:async id=>{try{const response=await api.delete(\"/Appointments/\".concat(id));return response.data;}catch(error){var _error$response35;throw((_error$response35=error.response)===null||_error$response35===void 0?void 0:_error$response35.data)||error.message;}},assignStaff:async(id,staffId)=>{try{const response=await api.post(\"/Appointments/\".concat(id,\"/assign-staff\"),{staffId});return response.data;}catch(error){var _error$response36;throw((_error$response36=error.response)===null||_error$response36===void 0?void 0:_error$response36.data)||error.message;}},bookForPatient:async appointmentData=>{try{const response=await api.post('/Appointments/book-for-patient',appointmentData);return response.data;}catch(error){var _error$response37;throw((_error$response37=error.response)===null||_error$response37===void 0?void 0:_error$response37.data)||error.message;}}};// Patients API\nexport const patientsAPI={getAll:async()=>{try{const response=await api.get('/Patients');return response.data;}catch(error){var _error$response38;throw((_error$response38=error.response)===null||_error$response38===void 0?void 0:_error$response38.data)||error.message;}},getById:async id=>{try{const response=await api.get(\"/Patients/\".concat(id));return response.data;}catch(error){var _error$response39;throw((_error$response39=error.response)===null||_error$response39===void 0?void 0:_error$response39.data)||error.message;}},getByUserId:async userId=>{try{// Get all patients and find the one with matching userId\nconst response=await api.get('/Patients');const patients=response.data;const patient=patients.find(p=>p.userId===userId);if(!patient){throw new Error('Patient not found for this user');}return patient;}catch(error){var _error$response40;throw((_error$response40=error.response)===null||_error$response40===void 0?void 0:_error$response40.data)||error.message;}},search:async query=>{try{const response=await api.get('/Patients/search',{params:{query}});return response.data;}catch(error){var _error$response41;throw((_error$response41=error.response)===null||_error$response41===void 0?void 0:_error$response41.data)||error.message;}},update:async(id,patientData)=>{try{const response=await api.put(\"/Patients/\".concat(id),patientData);return response.data;}catch(error){var _error$response42;throw((_error$response42=error.response)===null||_error$response42===void 0?void 0:_error$response42.data)||error.message;}}};// Doctor API\nexport const doctorAPI={getPatients:async doctorId=>{try{const response=await api.get(\"/Doctor/\".concat(doctorId,\"/patients\"));return response.data;}catch(error){var _error$response43;throw((_error$response43=error.response)===null||_error$response43===void 0?void 0:_error$response43.data)||error.message;}},getUpcomingAppointments:async doctorId=>{try{const response=await api.get(\"/Doctor/\".concat(doctorId,\"/appointments/upcoming\"));return response.data;}catch(error){var _error$response44;throw((_error$response44=error.response)===null||_error$response44===void 0?void 0:_error$response44.data)||error.message;}},getAllAppointments:async doctorId=>{try{const response=await api.get(\"/Doctor/\".concat(doctorId,\"/appointments\"));return response.data;}catch(error){var _error$response45;throw((_error$response45=error.response)===null||_error$response45===void 0?void 0:_error$response45.data)||error.message;}},getSchedule:async(doctorId,startDate,endDate)=>{try{const response=await api.get(\"/Doctor/\".concat(doctorId,\"/schedule\"),{params:{startDate,endDate}});return response.data;}catch(error){var _error$response46;throw((_error$response46=error.response)===null||_error$response46===void 0?void 0:_error$response46.data)||error.message;}},updateShiftSchedule:async(doctorId,shiftData)=>{try{const response=await api.put(\"/Doctor/\".concat(doctorId,\"/shifts\"),shiftData);return response.data;}catch(error){var _error$response47;throw((_error$response47=error.response)===null||_error$response47===void 0?void 0:_error$response47.data)||error.message;}},getShiftSchedule:async doctorId=>{try{const response=await api.get(\"/Doctor/\".concat(doctorId,\"/shifts\"));return response.data;}catch(error){var _error$response48;throw((_error$response48=error.response)===null||_error$response48===void 0?void 0:_error$response48.data)||error.message;}},approveAppointment:async appointmentId=>{try{const response=await api.put(\"/Doctor/appointments/\".concat(appointmentId,\"/approve\"));return response.data;}catch(error){var _error$response49;throw((_error$response49=error.response)===null||_error$response49===void 0?void 0:_error$response49.data)||error.message;}},rejectAppointment:async(appointmentId,reason)=>{try{const response=await api.put(\"/Doctor/appointments/\".concat(appointmentId,\"/reject\"),{reason});return response.data;}catch(error){var _error$response50;throw((_error$response50=error.response)===null||_error$response50===void 0?void 0:_error$response50.data)||error.message;}},getPatientDetails:async patientId=>{try{const response=await api.get(\"/Doctor/patients/\".concat(patientId));return response.data;}catch(error){var _error$response51;throw((_error$response51=error.response)===null||_error$response51===void 0?void 0:_error$response51.data)||error.message;}},createWalkinAppointment:async appointmentData=>{try{const response=await api.post('/Doctor/appointments/walkin',appointmentData);return response.data;}catch(error){var _error$response52;throw((_error$response52=error.response)===null||_error$response52===void 0?void 0:_error$response52.data)||error.message;}}};// Admin API\nexport const adminAPI={getUsers:async()=>{try{const response=await api.get('/Admin/users');return response.data;}catch(error){var _error$response53;throw((_error$response53=error.response)===null||_error$response53===void 0?void 0:_error$response53.data)||error.message;}},getRoles:async()=>{try{const response=await api.get('/Admin/roles');return response.data;}catch(error){var _error$response54;throw((_error$response54=error.response)===null||_error$response54===void 0?void 0:_error$response54.data)||error.message;}},createStaff:async staffData=>{try{const response=await api.post('/Admin/create-staff',staffData);return response.data;}catch(error){var _error$response55;throw((_error$response55=error.response)===null||_error$response55===void 0?void 0:_error$response55.data)||error.message;}},updateUserStatus:async(userId,isActive)=>{try{const response=await api.put(\"/Admin/users/\".concat(userId),{isActive});return response.data;}catch(error){var _error$response56;throw((_error$response56=error.response)===null||_error$response56===void 0?void 0:_error$response56.data)||error.message;}},updateUserRole:async(userId,newRole)=>{try{const response=await api.put(\"/Admin/users/\".concat(userId,\"/role\"),{newRole});return response.data;}catch(error){var _error$response57;throw((_error$response57=error.response)===null||_error$response57===void 0?void 0:_error$response57.data)||error.message;}},getAppointmentStats:async(startDate,endDate)=>{try{const params={};if(startDate)params.startDate=startDate;if(endDate)params.endDate=endDate;const response=await api.get('/Admin/reports/appointment-stats',{params});return response.data;}catch(error){var _error$response58;throw((_error$response58=error.response)===null||_error$response58===void 0?void 0:_error$response58.data)||error.message;}},getRevenueReport:async(startDate,endDate)=>{try{const params={};if(startDate)params.startDate=startDate;if(endDate)params.endDate=endDate;const response=await api.get('/Admin/reports/revenue',{params});return response.data;}catch(error){var _error$response59;throw((_error$response59=error.response)===null||_error$response59===void 0?void 0:_error$response59.data)||error.message;}}};export default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","error","Promise","reject","response","_error$response","status","_error$config","_error$config$url","_error$config2","_error$config2$url","_error$config3","_error$config3$url","isAuthEndpoint","url","includes","isLoginEndpoint","isRegisterEndpoint","removeItem","window","location","pathname","href","authAPI","register","userData","console","log","post","data","_error$response2","_error$response3","_error$response4","message","login","credentials","_error$response5","_error$response6","_error$response7","logout","_error$response8","servicesAPI","getAll","get","_error$response9","_error$response0","serviceData","_error$response1","update","id","put","_error$response10","delete","_error$response11","_error$response12","_error$response13","timeSlotsAPI","getByDay","day","_error$response14","getAvailable","date","params","_error$response15","staffAPI","_error$response16","getById","_error$response17","getByRole","role","_error$response18","getSchedule","startDate","endDate","_error$response19","getAvailability","_error$response20","staffData","_error$response21","updateAvailability","availabilityData","_error$response22","appointmentsAPI","_error$response23","getDoctorsOnDuty","serviceId","arguments","length","undefined","staffResponse","doctors","fallbackError","_error$response24","getAvailableSlotsByDoctor","doctorId","slotsResponse","availableSlots","_error$response25","_error$response26","getByPatient","patientId","_error$response27","getToday","_error$response28","_error$response29","appointmentData","_error$response30","_error$response31","_error$response32","_error$response33","updateStatus","_error$response34","_error$response35","assignStaff","staffId","_error$response36","bookForPatient","_error$response37","patientsAPI","_error$response38","_error$response39","getByUserId","userId","patients","patient","find","p","Error","_error$response40","search","query","_error$response41","patientData","_error$response42","doctorAPI","getPatients","_error$response43","getUpcomingAppointments","_error$response44","getAllAppointments","_error$response45","_error$response46","updateShiftSchedule","shiftData","_error$response47","getShiftSchedule","_error$response48","approveAppointment","appointmentId","_error$response49","rejectAppointment","reason","_error$response50","getPatientDetails","_error$response51","createWalkinAppointment","_error$response52","adminAPI","getUsers","_error$response53","getRoles","_error$response54","createStaff","_error$response55","updateUserStatus","isActive","_error$response56","updateUserRole","newRole","_error$response57","getAppointmentStats","_error$response58","getRevenueReport","_error$response59"],"sources":["C:/Project/HopewellClinic/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'https://hopewellapi-azcvcferesfpgjgm.southafricanorth-01.azurewebsites.net/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle common errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Only logout if this is an authentication-related endpoint or if we're in mock mode\n      const isAuthEndpoint = error.config?.url?.includes('/Auth/');\n      const isLoginEndpoint = error.config?.url?.includes('/login');\n      const isRegisterEndpoint = error.config?.url?.includes('/register');\n      \n      // Real API mode - be more careful about when to logout\n      if (isAuthEndpoint) {\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        if (window.location.pathname !== '/auth') {\n          window.location.href = '/auth';\n        }\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Real API only - no mock mode\n\n// Auth API\nexport const authAPI = {\n  register: async (userData) => {\n    \n    try {\n      console.log('Attempting registration to:', API_BASE_URL + '/Auth/register');\n      console.log('Registration data:', userData);\n      const response = await api.post('/Auth/register', userData);\n      console.log('Registration response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Registration error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  login: async (credentials) => {\n    \n    try {\n      console.log('Attempting login to:', API_BASE_URL + '/Auth/login');\n      console.log('Credentials:', credentials);\n      const response = await api.post('/Auth/login', credentials);\n      console.log('Login response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Login error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  logout: async () => {\n    \n    try {\n      const response = await api.post('/Auth/logout');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Services API\nexport const servicesAPI = {\n  getAll: async () => {\n    \n    try {\n      console.log('Fetching services from:', API_BASE_URL + '/Services');\n      const response = await api.get('/Services');\n      console.log('Services response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching services:', error);\n      console.error('Error response:', error.response?.data);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  create: async (serviceData) => {\n    try {\n      const response = await api.post('/Services', serviceData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, serviceData) => {\n    try {\n      const response = await api.put(`/Services/${id}`, serviceData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  delete: async (id) => {\n    try {\n      console.log('Deleting service with ID:', id);\n      const response = await api.delete(`/Services/${id}`);\n      console.log('Delete service response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Delete service error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Time Slots API\nexport const timeSlotsAPI = {\n  getByDay: async (day) => {\n    try {\n      const response = await api.get(`/time-slots/by-day/${day}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAvailable: async (date) => {\n    try {\n      const params = date ? { date } : {};\n      const response = await api.get('/time-slots/available', { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Staff API\nexport const staffAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Staff');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/Staff/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getByRole: async (role) => {\n    \n    try {\n      const response = await api.get(`/Staff/by-role/${role}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getSchedule: async (id, startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get(`/Staff/${id}/schedule`, { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAvailability: async (id, date) => {\n    try {\n      const response = await api.get(`/Staff/${id}/availability`, {\n        params: { date }\n      });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, staffData) => {\n    try {\n      const response = await api.put(`/Staff/${id}`, staffData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateAvailability: async (id, availabilityData) => {\n    try {\n      const response = await api.post(`/Staff/${id}/availability`, availabilityData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Appointments API\nexport const appointmentsAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Appointments');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getDoctorsOnDuty: async (date, serviceId = null) => {\n    \n    try {\n      const params = { date };\n      if (serviceId) params.serviceId = serviceId;\n      \n      const response = await api.get('/Appointments/doctors-on-duty', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching doctors on duty:', error);\n      // Fallback to existing staff API if new endpoint doesn't exist\n      try {\n        const staffResponse = await api.get('/Staff/by-role/doctor');\n        return { doctors: staffResponse.data };\n      } catch (fallbackError) {\n        throw error.response?.data || error.message;\n      }\n    }\n  },\n\n  getAvailableSlotsByDoctor: async (doctorId, date, serviceId = null) => {\n    try {\n      const params = { doctorId, date };\n      if (serviceId) params.serviceId = serviceId;\n      \n      const response = await api.get('/Appointments/available-slots-by-doctor', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching doctor-specific slots:', error);\n      // Fallback to existing available slots API\n      try {\n        const slotsResponse = await api.get('/Appointments/available-slots', { params: { date } });\n        return { availableSlots: slotsResponse.data };\n      } catch (fallbackError) {\n        throw error.response?.data || error.message;\n      }\n    }\n  },\n\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/Appointments/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getByPatient: async (patientId) => {\n    \n    try {\n      const response = await api.get(`/Appointments/patient/${patientId}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getToday: async () => {\n    try {\n      const response = await api.get('/Appointments/today');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAvailable: async (date) => {\n    try {\n      const response = await api.get('/Appointments/available-slots', {\n        params: { date }\n      });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  create: async (appointmentData) => {\n    try {\n      console.log('Creating appointment with data:', appointmentData);\n      const response = await api.post('/Appointments', appointmentData);\n      console.log('Appointment created successfully:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Appointment creation error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, appointmentData) => {\n    try {\n      const response = await api.put(`/Appointments/${id}`, appointmentData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateStatus: async (id, status) => {\n    try {\n      const response = await api.put(`/Appointments/${id}/status`, { status });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  delete: async (id) => {\n    try {\n      const response = await api.delete(`/Appointments/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  assignStaff: async (id, staffId) => {\n    try {\n      const response = await api.post(`/Appointments/${id}/assign-staff`, { staffId });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  bookForPatient: async (appointmentData) => {\n    try {\n      const response = await api.post('/Appointments/book-for-patient', appointmentData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Patients API\nexport const patientsAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Patients');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/Patients/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getByUserId: async (userId) => {\n    \n    try {\n      // Get all patients and find the one with matching userId\n      const response = await api.get('/Patients');\n      const patients = response.data;\n      const patient = patients.find(p => p.userId === userId);\n      if (!patient) {\n        throw new Error('Patient not found for this user');\n      }\n      return patient;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  search: async (query) => {\n    try {\n      const response = await api.get('/Patients/search', { params: { query } });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, patientData) => {\n    try {\n      const response = await api.put(`/Patients/${id}`, patientData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Doctor API\nexport const doctorAPI = {\n  getPatients: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/patients`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getUpcomingAppointments: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/appointments/upcoming`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAllAppointments: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/appointments`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getSchedule: async (doctorId, startDate, endDate) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/schedule`, {\n        params: { startDate, endDate }\n      });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateShiftSchedule: async (doctorId, shiftData) => {\n    try {\n      const response = await api.put(`/Doctor/${doctorId}/shifts`, shiftData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getShiftSchedule: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/shifts`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  approveAppointment: async (appointmentId) => {\n    try {\n      const response = await api.put(`/Doctor/appointments/${appointmentId}/approve`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  rejectAppointment: async (appointmentId, reason) => {\n    try {\n      const response = await api.put(`/Doctor/appointments/${appointmentId}/reject`, { reason });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getPatientDetails: async (patientId) => {\n    try {\n      const response = await api.get(`/Doctor/patients/${patientId}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  createWalkinAppointment: async (appointmentData) => {\n    try {\n      const response = await api.post('/Doctor/appointments/walkin', appointmentData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Admin API\nexport const adminAPI = {\n  getUsers: async () => {\n    try {\n      const response = await api.get('/Admin/users');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getRoles: async () => {\n    try {\n      const response = await api.get('/Admin/roles');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  createStaff: async (staffData) => {\n    try {\n      const response = await api.post('/Admin/create-staff', staffData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateUserStatus: async (userId, isActive) => {\n    try {\n      const response = await api.put(`/Admin/users/${userId}`, { isActive });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateUserRole: async (userId, newRole) => {\n    try {\n      const response = await api.put(`/Admin/users/${userId}/role`, { newRole });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAppointmentStats: async (startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get('/Admin/reports/appointment-stats', { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getRevenueReport: async (startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get('/Admin/reports/revenue', { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}