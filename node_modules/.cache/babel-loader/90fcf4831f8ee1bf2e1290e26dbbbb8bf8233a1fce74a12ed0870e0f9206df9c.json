{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5002/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle common errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Token expired or invalid - only redirect if not already on auth page\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    if (window.location.pathname !== '/auth') {\n      window.location.href = '/auth';\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  register: async userData => {\n    try {\n      const response = await api.post('/Auth/register', userData);\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message;\n    }\n  },\n  login: async credentials => {\n    try {\n      const response = await api.post('/Auth/login', credentials);\n      return response.data;\n    } catch (error) {\n      var _error$response3;\n      throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message;\n    }\n  },\n  logout: async () => {\n    try {\n      const response = await api.post('/Auth/logout');\n      return response.data;\n    } catch (error) {\n      var _error$response4;\n      throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message;\n    }\n  }\n};\n\n// Services API\nexport const servicesAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Services');\n      return response.data;\n    } catch (error) {\n      var _error$response5;\n      throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message;\n    }\n  },\n  create: async serviceData => {\n    try {\n      const response = await api.post('/Services', serviceData);\n      return response.data;\n    } catch (error) {\n      var _error$response6;\n      throw ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || error.message;\n    }\n  },\n  update: async (id, serviceData) => {\n    try {\n      const response = await api.put(`/Services/${id}`, serviceData);\n      return response.data;\n    } catch (error) {\n      var _error$response7;\n      throw ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || error.message;\n    }\n  },\n  delete: async id => {\n    try {\n      const response = await api.delete(`/Services/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response8;\n      throw ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data) || error.message;\n    }\n  }\n};\n\n// Time Slots API\nexport const timeSlotsAPI = {\n  getByDay: async day => {\n    try {\n      const response = await api.get(`/time-slots/by-day/${day}`);\n      return response.data;\n    } catch (error) {\n      var _error$response9;\n      throw ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.data) || error.message;\n    }\n  },\n  getAvailable: async date => {\n    try {\n      const params = date ? {\n        date\n      } : {};\n      const response = await api.get('/time-slots/available', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response0;\n      throw ((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : _error$response0.data) || error.message;\n    }\n  }\n};\n\n// Staff API\nexport const staffAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Staff');\n      return response.data;\n    } catch (error) {\n      var _error$response1;\n      throw ((_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : _error$response1.data) || error.message;\n    }\n  },\n  getById: async id => {\n    try {\n      const response = await api.get(`/Staff/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response10;\n      throw ((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : _error$response10.data) || error.message;\n    }\n  },\n  getByRole: async role => {\n    try {\n      const response = await api.get(`/Staff/by-role/${role}`);\n      return response.data;\n    } catch (error) {\n      var _error$response11;\n      throw ((_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : _error$response11.data) || error.message;\n    }\n  },\n  getSchedule: async (id, startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get(`/Staff/${id}/schedule`, {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response12;\n      throw ((_error$response12 = error.response) === null || _error$response12 === void 0 ? void 0 : _error$response12.data) || error.message;\n    }\n  },\n  getAvailability: async (id, date) => {\n    try {\n      const response = await api.get(`/Staff/${id}/availability`, {\n        params: {\n          date\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response13;\n      throw ((_error$response13 = error.response) === null || _error$response13 === void 0 ? void 0 : _error$response13.data) || error.message;\n    }\n  },\n  update: async (id, staffData) => {\n    try {\n      const response = await api.put(`/Staff/${id}`, staffData);\n      return response.data;\n    } catch (error) {\n      var _error$response14;\n      throw ((_error$response14 = error.response) === null || _error$response14 === void 0 ? void 0 : _error$response14.data) || error.message;\n    }\n  },\n  updateAvailability: async (id, availabilityData) => {\n    try {\n      const response = await api.post(`/Staff/${id}/availability`, availabilityData);\n      return response.data;\n    } catch (error) {\n      var _error$response15;\n      throw ((_error$response15 = error.response) === null || _error$response15 === void 0 ? void 0 : _error$response15.data) || error.message;\n    }\n  }\n};\n\n// Appointments API\nexport const appointmentsAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Appointments');\n      return response.data;\n    } catch (error) {\n      var _error$response16;\n      throw ((_error$response16 = error.response) === null || _error$response16 === void 0 ? void 0 : _error$response16.data) || error.message;\n    }\n  },\n  getById: async id => {\n    try {\n      const response = await api.get(`/Appointments/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response17;\n      throw ((_error$response17 = error.response) === null || _error$response17 === void 0 ? void 0 : _error$response17.data) || error.message;\n    }\n  },\n  getByPatient: async patientId => {\n    try {\n      const response = await api.get(`/Appointments/patient/${patientId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response18;\n      throw ((_error$response18 = error.response) === null || _error$response18 === void 0 ? void 0 : _error$response18.data) || error.message;\n    }\n  },\n  getToday: async () => {\n    try {\n      const response = await api.get('/Appointments/today');\n      return response.data;\n    } catch (error) {\n      var _error$response19;\n      throw ((_error$response19 = error.response) === null || _error$response19 === void 0 ? void 0 : _error$response19.data) || error.message;\n    }\n  },\n  create: async appointmentData => {\n    try {\n      const response = await api.post('/Appointments', appointmentData);\n      return response.data;\n    } catch (error) {\n      var _error$response20;\n      throw ((_error$response20 = error.response) === null || _error$response20 === void 0 ? void 0 : _error$response20.data) || error.message;\n    }\n  },\n  update: async (id, appointmentData) => {\n    try {\n      const response = await api.put(`/Appointments/${id}`, appointmentData);\n      return response.data;\n    } catch (error) {\n      var _error$response21;\n      throw ((_error$response21 = error.response) === null || _error$response21 === void 0 ? void 0 : _error$response21.data) || error.message;\n    }\n  },\n  updateStatus: async (id, status) => {\n    try {\n      const response = await api.put(`/Appointments/${id}/status`, {\n        status\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response22;\n      throw ((_error$response22 = error.response) === null || _error$response22 === void 0 ? void 0 : _error$response22.data) || error.message;\n    }\n  },\n  delete: async id => {\n    try {\n      const response = await api.delete(`/Appointments/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response23;\n      throw ((_error$response23 = error.response) === null || _error$response23 === void 0 ? void 0 : _error$response23.data) || error.message;\n    }\n  },\n  assignStaff: async (id, staffId) => {\n    try {\n      const response = await api.post(`/Appointments/${id}/assign-staff`, {\n        staffId\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response24;\n      throw ((_error$response24 = error.response) === null || _error$response24 === void 0 ? void 0 : _error$response24.data) || error.message;\n    }\n  },\n  bookForPatient: async appointmentData => {\n    try {\n      const response = await api.post('/Appointments/book-for-patient', appointmentData);\n      return response.data;\n    } catch (error) {\n      var _error$response25;\n      throw ((_error$response25 = error.response) === null || _error$response25 === void 0 ? void 0 : _error$response25.data) || error.message;\n    }\n  }\n};\n\n// Patients API\nexport const patientsAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Patients');\n      return response.data;\n    } catch (error) {\n      var _error$response26;\n      throw ((_error$response26 = error.response) === null || _error$response26 === void 0 ? void 0 : _error$response26.data) || error.message;\n    }\n  },\n  getById: async id => {\n    try {\n      const response = await api.get(`/Patients/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response27;\n      throw ((_error$response27 = error.response) === null || _error$response27 === void 0 ? void 0 : _error$response27.data) || error.message;\n    }\n  },\n  search: async query => {\n    try {\n      const response = await api.get('/Patients/search', {\n        params: {\n          query\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response28;\n      throw ((_error$response28 = error.response) === null || _error$response28 === void 0 ? void 0 : _error$response28.data) || error.message;\n    }\n  },\n  update: async (id, patientData) => {\n    try {\n      const response = await api.put(`/Patients/${id}`, patientData);\n      return response.data;\n    } catch (error) {\n      var _error$response29;\n      throw ((_error$response29 = error.response) === null || _error$response29 === void 0 ? void 0 : _error$response29.data) || error.message;\n    }\n  }\n};\n\n// Doctor API\nexport const doctorAPI = {\n  getPatients: async doctorId => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/patients`);\n      return response.data;\n    } catch (error) {\n      var _error$response30;\n      throw ((_error$response30 = error.response) === null || _error$response30 === void 0 ? void 0 : _error$response30.data) || error.message;\n    }\n  },\n  getUpcomingAppointments: async doctorId => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/appointments/upcoming`);\n      return response.data;\n    } catch (error) {\n      var _error$response31;\n      throw ((_error$response31 = error.response) === null || _error$response31 === void 0 ? void 0 : _error$response31.data) || error.message;\n    }\n  },\n  createWalkinAppointment: async appointmentData => {\n    try {\n      const response = await api.post('/Doctor/appointments/walkin', appointmentData);\n      return response.data;\n    } catch (error) {\n      var _error$response32;\n      throw ((_error$response32 = error.response) === null || _error$response32 === void 0 ? void 0 : _error$response32.data) || error.message;\n    }\n  }\n};\n\n// Admin API\nexport const adminAPI = {\n  getUsers: async () => {\n    try {\n      const response = await api.get('/Admin/users');\n      return response.data;\n    } catch (error) {\n      var _error$response33;\n      throw ((_error$response33 = error.response) === null || _error$response33 === void 0 ? void 0 : _error$response33.data) || error.message;\n    }\n  },\n  getRoles: async () => {\n    try {\n      const response = await api.get('/Admin/roles');\n      return response.data;\n    } catch (error) {\n      var _error$response34;\n      throw ((_error$response34 = error.response) === null || _error$response34 === void 0 ? void 0 : _error$response34.data) || error.message;\n    }\n  },\n  createStaff: async staffData => {\n    try {\n      const response = await api.post('/Admin/create-staff', staffData);\n      return response.data;\n    } catch (error) {\n      var _error$response35;\n      throw ((_error$response35 = error.response) === null || _error$response35 === void 0 ? void 0 : _error$response35.data) || error.message;\n    }\n  },\n  updateUserStatus: async (userId, isActive) => {\n    try {\n      const response = await api.put(`/Admin/users/${userId}`, {\n        isActive\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response36;\n      throw ((_error$response36 = error.response) === null || _error$response36 === void 0 ? void 0 : _error$response36.data) || error.message;\n    }\n  },\n  updateUserRole: async (userId, newRole) => {\n    try {\n      const response = await api.put(`/Admin/users/${userId}/role`, {\n        newRole\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response37;\n      throw ((_error$response37 = error.response) === null || _error$response37 === void 0 ? void 0 : _error$response37.data) || error.message;\n    }\n  },\n  getAppointmentStats: async (startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get('/Admin/reports/appointment-stats', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response38;\n      throw ((_error$response38 = error.response) === null || _error$response38 === void 0 ? void 0 : _error$response38.data) || error.message;\n    }\n  },\n  getRevenueReport: async (startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get('/Admin/reports/revenue', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response39;\n      throw ((_error$response39 = error.response) === null || _error$response39 === void 0 ? void 0 : _error$response39.data) || error.message;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","pathname","href","authAPI","register","userData","post","data","_error$response2","message","login","credentials","_error$response3","logout","_error$response4","servicesAPI","getAll","get","_error$response5","serviceData","_error$response6","update","id","put","_error$response7","delete","_error$response8","timeSlotsAPI","getByDay","day","_error$response9","getAvailable","date","params","_error$response0","staffAPI","_error$response1","getById","_error$response10","getByRole","role","_error$response11","getSchedule","startDate","endDate","_error$response12","getAvailability","_error$response13","staffData","_error$response14","updateAvailability","availabilityData","_error$response15","appointmentsAPI","_error$response16","_error$response17","getByPatient","patientId","_error$response18","getToday","_error$response19","appointmentData","_error$response20","_error$response21","updateStatus","_error$response22","_error$response23","assignStaff","staffId","_error$response24","bookForPatient","_error$response25","patientsAPI","_error$response26","_error$response27","search","query","_error$response28","patientData","_error$response29","doctorAPI","getPatients","doctorId","_error$response30","getUpcomingAppointments","_error$response31","createWalkinAppointment","_error$response32","adminAPI","getUsers","_error$response33","getRoles","_error$response34","createStaff","_error$response35","updateUserStatus","userId","isActive","_error$response36","updateUserRole","newRole","_error$response37","getAppointmentStats","_error$response38","getRevenueReport","_error$response39"],"sources":["C:/Project/HopewellClinic/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:5002/api';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle common errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      // Token expired or invalid - only redirect if not already on auth page\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      if (window.location.pathname !== '/auth') {\r\n        window.location.href = '/auth';\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth API\r\nexport const authAPI = {\r\n  register: async (userData) => {\r\n    try {\r\n      const response = await api.post('/Auth/register', userData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  login: async (credentials) => {\r\n    try {\r\n      const response = await api.post('/Auth/login', credentials);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  logout: async () => {\r\n    try {\r\n      const response = await api.post('/Auth/logout');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n};\r\n\r\n// Services API\r\nexport const servicesAPI = {\r\n  getAll: async () => {\r\n    try {\r\n      const response = await api.get('/Services');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  create: async (serviceData) => {\r\n    try {\r\n      const response = await api.post('/Services', serviceData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  update: async (id, serviceData) => {\r\n    try {\r\n      const response = await api.put(`/Services/${id}`, serviceData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  delete: async (id) => {\r\n    try {\r\n      const response = await api.delete(`/Services/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n};\r\n\r\n// Time Slots API\r\nexport const timeSlotsAPI = {\r\n  getByDay: async (day) => {\r\n    try {\r\n      const response = await api.get(`/time-slots/by-day/${day}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  getAvailable: async (date) => {\r\n    try {\r\n      const params = date ? { date } : {};\r\n      const response = await api.get('/time-slots/available', { params });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n};\r\n\r\n// Staff API\r\nexport const staffAPI = {\r\n  getAll: async () => {\r\n    try {\r\n      const response = await api.get('/Staff');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  getById: async (id) => {\r\n    try {\r\n      const response = await api.get(`/Staff/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  getByRole: async (role) => {\r\n    try {\r\n      const response = await api.get(`/Staff/by-role/${role}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  getSchedule: async (id, startDate, endDate) => {\r\n    try {\r\n      const params = {};\r\n      if (startDate) params.startDate = startDate;\r\n      if (endDate) params.endDate = endDate;\r\n      const response = await api.get(`/Staff/${id}/schedule`, { params });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  getAvailability: async (id, date) => {\r\n    try {\r\n      const response = await api.get(`/Staff/${id}/availability`, {\r\n        params: { date }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  update: async (id, staffData) => {\r\n    try {\r\n      const response = await api.put(`/Staff/${id}`, staffData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  updateAvailability: async (id, availabilityData) => {\r\n    try {\r\n      const response = await api.post(`/Staff/${id}/availability`, availabilityData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n};\r\n\r\n// Appointments API\r\nexport const appointmentsAPI = {\r\n  getAll: async () => {\r\n    try {\r\n      const response = await api.get('/Appointments');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  getById: async (id) => {\r\n    try {\r\n      const response = await api.get(`/Appointments/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  getByPatient: async (patientId) => {\r\n    try {\r\n      const response = await api.get(`/Appointments/patient/${patientId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  getToday: async () => {\r\n    try {\r\n      const response = await api.get('/Appointments/today');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  create: async (appointmentData) => {\r\n    try {\r\n      const response = await api.post('/Appointments', appointmentData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  update: async (id, appointmentData) => {\r\n    try {\r\n      const response = await api.put(`/Appointments/${id}`, appointmentData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  updateStatus: async (id, status) => {\r\n    try {\r\n      const response = await api.put(`/Appointments/${id}/status`, { status });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  delete: async (id) => {\r\n    try {\r\n      const response = await api.delete(`/Appointments/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  assignStaff: async (id, staffId) => {\r\n    try {\r\n      const response = await api.post(`/Appointments/${id}/assign-staff`, { staffId });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  bookForPatient: async (appointmentData) => {\r\n    try {\r\n      const response = await api.post('/Appointments/book-for-patient', appointmentData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n};\r\n\r\n// Patients API\r\nexport const patientsAPI = {\r\n  getAll: async () => {\r\n    try {\r\n      const response = await api.get('/Patients');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  getById: async (id) => {\r\n    try {\r\n      const response = await api.get(`/Patients/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  search: async (query) => {\r\n    try {\r\n      const response = await api.get('/Patients/search', { params: { query } });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  update: async (id, patientData) => {\r\n    try {\r\n      const response = await api.put(`/Patients/${id}`, patientData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n};\r\n\r\n// Doctor API\r\nexport const doctorAPI = {\r\n  getPatients: async (doctorId) => {\r\n    try {\r\n      const response = await api.get(`/Doctor/${doctorId}/patients`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  getUpcomingAppointments: async (doctorId) => {\r\n    try {\r\n      const response = await api.get(`/Doctor/${doctorId}/appointments/upcoming`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  createWalkinAppointment: async (appointmentData) => {\r\n    try {\r\n      const response = await api.post('/Doctor/appointments/walkin', appointmentData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n};\r\n\r\n// Admin API\r\nexport const adminAPI = {\r\n  getUsers: async () => {\r\n    try {\r\n      const response = await api.get('/Admin/users');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  getRoles: async () => {\r\n    try {\r\n      const response = await api.get('/Admin/roles');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  createStaff: async (staffData) => {\r\n    try {\r\n      const response = await api.post('/Admin/create-staff', staffData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  updateUserStatus: async (userId, isActive) => {\r\n    try {\r\n      const response = await api.put(`/Admin/users/${userId}`, { isActive });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  updateUserRole: async (userId, newRole) => {\r\n    try {\r\n      const response = await api.put(`/Admin/users/${userId}/role`, { newRole });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  getAppointmentStats: async (startDate, endDate) => {\r\n    try {\r\n      const params = {};\r\n      if (startDate) params.startDate = startDate;\r\n      if (endDate) params.endDate = endDate;\r\n      const response = await api.get('/Admin/reports/appointment-stats', { params });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  getRevenueReport: async (startDate, endDate) => {\r\n    try {\r\n      const params = {};\r\n      if (startDate) params.startDate = startDate;\r\n      if (endDate) params.endDate = endDate;\r\n      const response = await api.get('/Admin/reports/revenue', { params });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}