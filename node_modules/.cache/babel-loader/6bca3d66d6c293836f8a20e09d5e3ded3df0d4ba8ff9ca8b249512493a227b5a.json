{"ast":null,"code":"import _objectSpread from\"C:/Project/HopewellClinic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React from'react';import{BrowserRouter as Router,Routes,Route,Navigate}from'react-router-dom';import{AuthProvider,useAuth}from'./contexts/AuthContext';import LandingPage from'./components/LandingPage';import AuthPage from'./components/AuthPage';import PatientDashboard from'./components/PatientDashboard';import DoctorDashboard from'./components/DoctorDashboard';import AdminDashboard from'./components/AdminDashboard';import NurseDashboard from'./components/NurseDashboard';import LoadingSpinner from'./components/LoadingSpinner';// Import the existing API functions\nimport{appointmentsAPI,servicesAPI,patientsAPI,staffAPI,adminAPI}from'./services/api';// Protected Route component\nimport{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const ProtectedRoute=_ref=>{let{children,allowedRoles=[]}=_ref;const{isAuthenticated,isLoading,hasAnyRole}=useAuth();if(isLoading){return/*#__PURE__*/_jsx(\"div\",{className:\"min-h-screen flex items-center justify-center\",children:/*#__PURE__*/_jsx(LoadingSpinner,{})});}if(!isAuthenticated){return/*#__PURE__*/_jsx(Navigate,{to:\"/auth\",replace:true});}if(allowedRoles.length>0&&!hasAnyRole(allowedRoles)){return/*#__PURE__*/_jsx(Navigate,{to:\"/unauthorized\",replace:true});}return/*#__PURE__*/_jsx(_Fragment,{children:children});};// Dashboard wrapper component that handles data loading\nconst DashboardWrapper=_ref2=>{let{children,user}=_ref2;const[appointments,setAppointments]=React.useState([]);const[services,setServices]=React.useState([]);const[doctors,setDoctors]=React.useState([]);const[availableSlots,setAvailableSlots]=React.useState([]);const[patientId,setPatientId]=React.useState(null);const[isLoading,setIsLoading]=React.useState(true);const[isBooking,setIsBooking]=React.useState(false);const[bookingError,setBookingError]=React.useState('');const[error,setError]=React.useState('');const loadDashboardData=async()=>{try{setIsLoading(true);// Get the Patient ID from the ApplicationUser ID\nlet currentPatientId=null;try{const patient=await patientsAPI.getByUserId(user.id);currentPatientId=patient.id;setPatientId(patient.id);}catch(error){console.error('❌ Failed to get patient data:',error);throw new Error('Patient data not available');}// Try to load data, but don't fail if APIs are not available\ntry{const[appointmentsData,servicesData,doctorsData]=await Promise.all([appointmentsAPI.getByPatient(currentPatientId),servicesAPI.getAll(),staffAPI.getByRole('doctor')]);setAppointments(appointmentsData);setServices(servicesData);setDoctors(doctorsData);}catch(error){console.error('❌ Failed to load dashboard data:',error);throw error;}}catch(error){console.error('Error loading dashboard data:',error);// Show error to user instead of empty data\nsetError('Failed to load dashboard data. Please try again.');}finally{setIsLoading(false);}};const loadAvailableSlots=async date=>{try{console.log('Loading available slots for date:',date);const slots=await appointmentsAPI.getAvailable(date);console.log('Available slots received:',slots);// Calculate the day of the week for the requested date\nconst requestedDate=new Date(date);const dayOfWeek=requestedDate.getDay();// 0 = Sunday, 1 = Monday, etc.\n// Filter slots to only include the correct day of the week\nconst filteredSlots=slots.filter(slot=>slot.dayOfWeek===dayOfWeek);console.log('Filtered slots for day',dayOfWeek,':',filteredSlots);setAvailableSlots(filteredSlots);}catch(error){console.error('Error loading available slots:',error);setAvailableSlots([]);}};const handleBookAppointment=async bookingData=>{try{setIsBooking(true);setBookingError('');// Calculate end time based on service duration\nconst selectedService=services.find(s=>s.id===bookingData.serviceId);// Ensure startTime is in HH:mm:ss format\nconst startTimeFormatted=bookingData.startTime.includes(':')&&bookingData.startTime.split(':').length===2?bookingData.startTime+':00':bookingData.startTime;const startTime=new Date(\"2000-01-01T\".concat(startTimeFormatted));const endTime=new Date(startTime.getTime()+((selectedService===null||selectedService===void 0?void 0:selectedService.durationMinutes)||30)*60000);const endTimeString=endTime.toTimeString().slice(0,8);// Format as HH:mm:ss\nawait appointmentsAPI.create({patientId:patientId,serviceId:bookingData.serviceId,staffId:bookingData.staffId,appointmentDate:bookingData.appointmentDate,startTime:startTimeFormatted,endTime:endTimeString,notes:bookingData.notes||''});// Refresh appointments\nawait loadDashboardData();}catch(error){var _error$response,_error$response$data;console.error('Error booking appointment:',error);setBookingError(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.error)||error.message||'Failed to book appointment');}finally{setIsBooking(false);}};const handleUpdateAppointment=async(appointmentId,updateData)=>{try{setIsBooking(true);setBookingError('');// Calculate end time based on service duration\nconst selectedService=services.find(s=>s.id===updateData.serviceId);// Ensure startTime is in HH:mm:ss format\nconst startTimeFormatted=updateData.startTime.includes(':')&&updateData.startTime.split(':').length===2?updateData.startTime+':00':updateData.startTime;const startTime=new Date(\"2000-01-01T\".concat(startTimeFormatted));const endTime=new Date(startTime.getTime()+((selectedService===null||selectedService===void 0?void 0:selectedService.durationMinutes)||30)*60000);const endTimeString=endTime.toTimeString().slice(0,8);// Format as HH:mm:ss\nawait appointmentsAPI.update(appointmentId,{appointmentDate:updateData.appointmentDate,startTime:startTimeFormatted,endTime:endTimeString,notes:updateData.notes||''});// Refresh appointments\nawait loadDashboardData();}catch(error){var _error$response2,_error$response2$data;console.error('Error updating appointment:',error);setBookingError(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.error)||error.message||'Failed to update appointment');}finally{setIsBooking(false);}};const handleCancelAppointment=async appointmentId=>{try{setIsBooking(true);setBookingError('');await appointmentsAPI.delete(appointmentId);// Refresh appointments\nawait loadDashboardData();}catch(error){var _error$response3,_error$response3$data;console.error('Error canceling appointment:',error);setBookingError(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.error)||error.message||'Failed to cancel appointment');}finally{setIsBooking(false);}};React.useEffect(()=>{// Add a small delay to ensure user is fully logged in before making API calls\nconst timer=setTimeout(()=>{loadDashboardData();},100);return()=>clearTimeout(timer);},[user.id]);// Call children as a function with props\nreturn children({user,appointments,services,doctors,availableSlots,isLoading,isBooking,bookingError,error,onBookAppointment:handleBookAppointment,onUpdateAppointment:handleUpdateAppointment,onCancelAppointment:handleCancelAppointment,onLoadAvailableSlots:loadAvailableSlots});};// Doctor Dashboard wrapper component that handles doctor-specific data loading\nconst DoctorDashboardWrapper=_ref3=>{let{children,user}=_ref3;const[appointments,setAppointments]=React.useState([]);const[patients,setPatients]=React.useState([]);const[shiftSchedule,setShiftSchedule]=React.useState([]);const[isLoading,setIsLoading]=React.useState(true);const[isProcessing,setIsProcessing]=React.useState(false);const[error,setError]=React.useState('');const loadDashboardData=async()=>{try{setIsLoading(true);setError('');// For now, use existing endpoints that work\n// Get all appointments (we'll filter by doctor later when backend supports it)\ntry{const appointmentsData=await appointmentsAPI.getAll();// Filter appointments for this doctor (when staffId is available)\nsetAppointments(appointmentsData);}catch(appointmentsError){console.log('No appointments endpoint available yet');setAppointments([]);}// Get all patients (we'll filter by doctor later when backend supports it)\ntry{const patientsData=await patientsAPI.getAll();setPatients(patientsData);}catch(patientsError){console.log('No patients endpoint available yet');setPatients([]);}// Initialize empty shift schedule (backend not implemented yet)\nsetShiftSchedule([]);}catch(error){var _error$response4,_error$response4$data;console.error('Error loading doctor dashboard data:',error);setError(((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.error)||error.message||'Failed to load dashboard data');}finally{setIsLoading(false);}};const handleApproveAppointment=async appointmentId=>{try{setIsProcessing(true);setError('');// For now, just update the appointment status using existing endpoint\nawait appointmentsAPI.updateStatus(appointmentId,'confirmed');await loadDashboardData();// Refresh data\n}catch(error){var _error$response5,_error$response5$data;console.error('Error approving appointment:',error);setError(((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.error)||error.message||'Failed to approve appointment');}finally{setIsProcessing(false);}};const handleRejectAppointment=async(appointmentId,reason)=>{try{setIsProcessing(true);setError('');// For now, just update the appointment status using existing endpoint\nawait appointmentsAPI.updateStatus(appointmentId,'cancelled');await loadDashboardData();// Refresh data\n}catch(error){var _error$response6,_error$response6$data;console.error('Error rejecting appointment:',error);setError(((_error$response6=error.response)===null||_error$response6===void 0?void 0:(_error$response6$data=_error$response6.data)===null||_error$response6$data===void 0?void 0:_error$response6$data.error)||error.message||'Failed to reject appointment');}finally{setIsProcessing(false);}};const handleUpdateShiftSchedule=async shiftData=>{try{setIsProcessing(true);setError('');// For now, just store locally (backend not implemented yet)\nconsole.log('Shift schedule update requested:',shiftData);setShiftSchedule(shiftData);// Simulate success\nawait new Promise(resolve=>setTimeout(resolve,1000));}catch(error){var _error$response7,_error$response7$data;console.error('Error updating shift schedule:',error);setError(((_error$response7=error.response)===null||_error$response7===void 0?void 0:(_error$response7$data=_error$response7.data)===null||_error$response7$data===void 0?void 0:_error$response7$data.error)||error.message||'Failed to update shift schedule');}finally{setIsProcessing(false);}};const handleViewPatientDetails=async patientId=>{try{setError('');// For now, just log the request (backend not implemented yet)\nconsole.log('View patient details requested for:',patientId);}catch(error){var _error$response8,_error$response8$data;console.error('Error loading patient details:',error);setError(((_error$response8=error.response)===null||_error$response8===void 0?void 0:(_error$response8$data=_error$response8.data)===null||_error$response8$data===void 0?void 0:_error$response8$data.error)||error.message||'Failed to load patient details');}};React.useEffect(()=>{// Add a small delay to ensure user is fully logged in before making API calls\nconst timer=setTimeout(()=>{loadDashboardData();},100);return()=>clearTimeout(timer);},[user.id]);// Call children as a function with props\nreturn children({user,appointments,patients,shiftSchedule,isLoading,isProcessing,error,onApproveAppointment:handleApproveAppointment,onRejectAppointment:handleRejectAppointment,onUpdateShiftSchedule:handleUpdateShiftSchedule,onViewPatientDetails:handleViewPatientDetails});};// Nurse Dashboard wrapper component that handles nurse-specific data loading\nconst NurseDashboardWrapper=_ref4=>{let{children,user}=_ref4;const[appointments,setAppointments]=React.useState([]);const[services,setServices]=React.useState([]);const[doctors,setDoctors]=React.useState([]);const[isLoading,setIsLoading]=React.useState(true);const[isProcessing,setIsProcessing]=React.useState(false);const[error,setError]=React.useState('');const loadDashboardData=async()=>{try{setIsLoading(true);setError('');// Load appointments\ntry{const appointmentsData=await appointmentsAPI.getAll();setAppointments(appointmentsData);}catch(appointmentsError){console.log('No appointments endpoint available yet');setAppointments([]);}// Load services\ntry{const servicesData=await servicesAPI.getAll();setServices(servicesData);}catch(servicesError){console.log('No services endpoint available yet');setServices([]);}// Load doctors (staff with doctor role)\ntry{const staffData=await staffAPI.getAll();const doctorsData=staffData.filter(staff=>staff.role==='doctor');setDoctors(doctorsData);}catch(staffError){console.log('No staff endpoint available yet');setDoctors([]);}}catch(error){var _error$response9,_error$response9$data;console.error('Error loading nurse dashboard data:',error);setError(((_error$response9=error.response)===null||_error$response9===void 0?void 0:(_error$response9$data=_error$response9.data)===null||_error$response9$data===void 0?void 0:_error$response9$data.error)||error.message||'Failed to load dashboard data');}finally{setIsLoading(false);}};React.useEffect(()=>{loadDashboardData();},[]);const handleBookWalkInAppointment=async appointmentData=>{try{setIsProcessing(true);setError('');// Create a walk-in appointment with immediate scheduling\nconst walkInAppointment=_objectSpread(_objectSpread({},appointmentData),{},{appointmentDate:new Date().toISOString().split('T')[0],// Today\nstartTime:new Date().toTimeString().slice(0,5),// Current time\nstatus:'walkin',notes:\"Walk-in appointment: \".concat(appointmentData.notes||'No additional notes')});await appointmentsAPI.create(walkInAppointment);await loadDashboardData();// Refresh data\n}catch(error){var _error$response0,_error$response0$data;console.error('Error booking walk-in appointment:',error);setError(((_error$response0=error.response)===null||_error$response0===void 0?void 0:(_error$response0$data=_error$response0.data)===null||_error$response0$data===void 0?void 0:_error$response0$data.error)||error.message||'Failed to book walk-in appointment');}finally{setIsProcessing(false);}};const handleApproveAppointmentForDoctor=async(appointmentId,doctorId)=>{try{setIsProcessing(true);setError('');// Update appointment with doctor assignment and approval\nawait appointmentsAPI.update(appointmentId,{staffId:doctorId,status:'confirmed'});await loadDashboardData();// Refresh data\n}catch(error){var _error$response1,_error$response1$data;console.error('Error approving appointment for doctor:',error);setError(((_error$response1=error.response)===null||_error$response1===void 0?void 0:(_error$response1$data=_error$response1.data)===null||_error$response1$data===void 0?void 0:_error$response1$data.error)||error.message||'Failed to approve appointment');}finally{setIsProcessing(false);}};const handleRejectAppointment=async(appointmentId,reason)=>{try{setIsProcessing(true);setError('');await appointmentsAPI.update(appointmentId,{status:'cancelled',notes:\"Rejected by nurse: \".concat(reason)});await loadDashboardData();// Refresh data\n}catch(error){var _error$response10,_error$response10$dat;console.error('Error rejecting appointment:',error);setError(((_error$response10=error.response)===null||_error$response10===void 0?void 0:(_error$response10$dat=_error$response10.data)===null||_error$response10$dat===void 0?void 0:_error$response10$dat.error)||error.message||'Failed to reject appointment');}finally{setIsProcessing(false);}};return children({user,appointments,services,doctors,isLoading,isProcessing,error,onBookWalkInAppointment:handleBookWalkInAppointment,onApproveAppointmentForDoctor:handleApproveAppointmentForDoctor,onRejectAppointment:handleRejectAppointment,onLogout:()=>{localStorage.removeItem('token');window.location.href='/auth';}});};// Admin Dashboard wrapper component that handles admin-specific data loading\nconst AdminDashboardWrapper=_ref5=>{let{children,user}=_ref5;const[users,setUsers]=React.useState([]);const[appointments,setAppointments]=React.useState([]);const[services,setServices]=React.useState([]);const[isLoading,setIsLoading]=React.useState(true);const[isProcessing,setIsProcessing]=React.useState(false);const[error,setError]=React.useState('');const loadDashboardData=async()=>{try{setIsLoading(true);setError('');// Get all staff members\ntry{const staffData=await staffAPI.getAll();console.log('Staff data received:',staffData);setUsers(staffData);}catch(staffError){console.log('No staff endpoint available, falling back to users');const usersData=await adminAPI.getUsers();console.log('Users data received:',usersData);setUsers(usersData);}// Get all appointments (we'll need to implement this endpoint)\ntry{// For now, we'll use the existing appointments API\nconst appointmentsData=await appointmentsAPI.getAll();setAppointments(appointmentsData);}catch(appointmentsError){console.log('No appointments endpoint available yet');setAppointments([]);}// Load services\ntry{const servicesData=await servicesAPI.getAll();setServices(servicesData);}catch(servicesError){console.log('No services endpoint available yet');setServices([]);}}catch(error){var _error$response11,_error$response11$dat;console.error('Error loading admin dashboard data:',error);setError(((_error$response11=error.response)===null||_error$response11===void 0?void 0:(_error$response11$dat=_error$response11.data)===null||_error$response11$dat===void 0?void 0:_error$response11$dat.error)||error.message||'Failed to load dashboard data');}finally{setIsLoading(false);}};const handleToggleUserStatus=async(userId,isActive)=>{try{setIsProcessing(true);setError('');await adminAPI.updateUserStatus(userId,isActive);await loadDashboardData();// Refresh data\n}catch(error){var _error$response12,_error$response12$dat;console.error('Error updating user status:',error);setError(((_error$response12=error.response)===null||_error$response12===void 0?void 0:(_error$response12$dat=_error$response12.data)===null||_error$response12$dat===void 0?void 0:_error$response12$dat.error)||error.message||'Failed to update user status');}finally{setIsProcessing(false);}};const handleUpdateUserRole=async(userId,newRole)=>{try{setIsProcessing(true);setError('');await adminAPI.updateUserRole(userId,newRole);await loadDashboardData();// Refresh data\n}catch(error){var _error$response13,_error$response13$dat;console.error('Error updating user role:',error);setError(((_error$response13=error.response)===null||_error$response13===void 0?void 0:(_error$response13$dat=_error$response13.data)===null||_error$response13$dat===void 0?void 0:_error$response13$dat.error)||error.message||'Failed to update user role');}finally{setIsProcessing(false);}};const handleCreateStaff=async staffData=>{try{setIsProcessing(true);setError('');await adminAPI.createStaff(staffData);await loadDashboardData();// Refresh data\n}catch(error){var _error$response14,_error$response14$dat;console.error('Error creating staff:',error);setError(((_error$response14=error.response)===null||_error$response14===void 0?void 0:(_error$response14$dat=_error$response14.data)===null||_error$response14$dat===void 0?void 0:_error$response14$dat.error)||error.message||'Failed to create staff member');}finally{setIsProcessing(false);}};const handleCreateService=async serviceData=>{try{setIsProcessing(true);setError('');await servicesAPI.create(serviceData);await loadDashboardData();// Refresh data\n}catch(error){var _error$response15,_error$response15$dat;console.error('Error creating service:',error);setError(((_error$response15=error.response)===null||_error$response15===void 0?void 0:(_error$response15$dat=_error$response15.data)===null||_error$response15$dat===void 0?void 0:_error$response15$dat.error)||error.message||'Failed to create service');}finally{setIsProcessing(false);}};const handleUpdateService=async(serviceId,serviceData)=>{try{setIsProcessing(true);setError('');await servicesAPI.update(serviceId,serviceData);await loadDashboardData();// Refresh data\n}catch(error){var _error$response16,_error$response16$dat;console.error('Error updating service:',error);setError(((_error$response16=error.response)===null||_error$response16===void 0?void 0:(_error$response16$dat=_error$response16.data)===null||_error$response16$dat===void 0?void 0:_error$response16$dat.error)||error.message||'Failed to update service');}finally{setIsProcessing(false);}};const handleDeleteService=async serviceId=>{try{setIsProcessing(true);setError('');// Check if service is being used by any appointments\nconst appointmentsUsingService=appointments.filter(apt=>apt.service.id===serviceId);if(appointmentsUsingService.length>0){setError(\"Cannot delete service. It is currently being used by \".concat(appointmentsUsingService.length,\" appointment(s). Please cancel or reschedule these appointments first.\"));return;}console.log('Attempting to delete service:',serviceId);const deleteResult=await servicesAPI.delete(serviceId);console.log('Delete result:',deleteResult);await loadDashboardData();// Refresh data\n}catch(error){var _error$response17,_error$response17$dat,_error$response18,_error$response18$dat;console.error('Error deleting service:',error);// Provide more specific error messages\nlet errorMessage='Failed to delete service';if((_error$response17=error.response)!==null&&_error$response17!==void 0&&(_error$response17$dat=_error$response17.data)!==null&&_error$response17$dat!==void 0&&_error$response17$dat.error){errorMessage=error.response.data.error;}else if((_error$response18=error.response)!==null&&_error$response18!==void 0&&(_error$response18$dat=_error$response18.data)!==null&&_error$response18$dat!==void 0&&_error$response18$dat.message){errorMessage=error.response.data.message;}else if(error.message){errorMessage=error.message;}// Check for common database constraint errors\nif(errorMessage.includes('foreign key')||errorMessage.includes('constraint')||errorMessage.includes('reference')){errorMessage='Cannot delete service. It is currently being used by existing appointments. Please cancel or reschedule these appointments first.';}setError(errorMessage);}finally{setIsProcessing(false);}};React.useEffect(()=>{loadDashboardData();},[user.id]);// Call children as a function with props\nreturn children({user,users,appointments,services,isLoading,isProcessing,error,onToggleUserStatus:handleToggleUserStatus,onUpdateUserRole:handleUpdateUserRole,onCreateStaff:handleCreateStaff,onCreateService:handleCreateService,onUpdateService:handleUpdateService,onDeleteService:handleDeleteService,onLogout:()=>{localStorage.removeItem('token');window.location.href='/auth';}});};// Main App Routes component\nconst AppRoutes=()=>{var _user$roles,_user$roles2,_user$roles3;const{isAuthenticated,user,login,register,logout,isLoading,error,clearError}=useAuth();const handleLogin=async(email,password)=>{try{await login({email,password});}catch(err){// Error is handled by AuthContext\n}};const handleRegister=async userData=>{try{await register(userData);}catch(err){// Error is handled by AuthContext\n}};const handleLogout=()=>{logout();};if(isLoading){return/*#__PURE__*/_jsx(\"div\",{className:\"min-h-screen flex items-center justify-center\",children:/*#__PURE__*/_jsx(LoadingSpinner,{})});}return/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(LandingPage,{})}),/*#__PURE__*/_jsx(Route,{path:\"/auth\",element:isAuthenticated?/*#__PURE__*/_jsx(Navigate,{to:user!==null&&user!==void 0&&(_user$roles=user.roles)!==null&&_user$roles!==void 0&&_user$roles.includes('admin')?'/admin-dashboard':user!==null&&user!==void 0&&(_user$roles2=user.roles)!==null&&_user$roles2!==void 0&&_user$roles2.includes('doctor')?'/doctor-dashboard':user!==null&&user!==void 0&&(_user$roles3=user.roles)!==null&&_user$roles3!==void 0&&_user$roles3.includes('nurse')?'/nurse-dashboard':'/patient-dashboard',replace:true}):/*#__PURE__*/_jsx(AuthPage,{onLogin:handleLogin,onRegister:handleRegister,isLoading:isLoading,error:error,clearError:clearError})}),/*#__PURE__*/_jsx(Route,{path:\"/patient-dashboard\",element:/*#__PURE__*/_jsx(ProtectedRoute,{allowedRoles:['patient'],children:/*#__PURE__*/_jsx(DashboardWrapper,{user:user,children:props=>/*#__PURE__*/_jsx(PatientDashboard,_objectSpread(_objectSpread({},props),{},{onLogout:handleLogout}))})})}),/*#__PURE__*/_jsx(Route,{path:\"/doctor-dashboard\",element:/*#__PURE__*/_jsx(ProtectedRoute,{allowedRoles:['doctor'],children:/*#__PURE__*/_jsx(DoctorDashboardWrapper,{user:user,children:props=>/*#__PURE__*/_jsx(DoctorDashboard,_objectSpread(_objectSpread({},props),{},{onLogout:handleLogout}))})})}),/*#__PURE__*/_jsx(Route,{path:\"/admin-dashboard\",element:/*#__PURE__*/_jsx(ProtectedRoute,{allowedRoles:['admin'],children:/*#__PURE__*/_jsx(AdminDashboardWrapper,{user:user,children:props=>/*#__PURE__*/_jsx(AdminDashboard,_objectSpread(_objectSpread({},props),{},{onLogout:handleLogout}))})})}),/*#__PURE__*/_jsx(Route,{path:\"/nurse-dashboard\",element:/*#__PURE__*/_jsx(ProtectedRoute,{allowedRoles:['nurse'],children:/*#__PURE__*/_jsx(NurseDashboardWrapper,{user:user,children:props=>/*#__PURE__*/_jsx(NurseDashboard,_objectSpread(_objectSpread({},props),{},{onLogout:handleLogout}))})})}),/*#__PURE__*/_jsx(Route,{path:\"/unauthorized\",element:/*#__PURE__*/_jsx(\"div\",{className:\"min-h-screen flex items-center justify-center\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-2xl font-bold text-foreground mb-4\",children:\"Unauthorized\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-muted-foreground mb-4\",children:\"You don't have permission to access this page.\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleLogout,className:\"px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90\",children:\"Sign Out\"})]})})}),/*#__PURE__*/_jsx(Route,{path:\"*\",element:/*#__PURE__*/_jsx(Navigate,{to:\"/\",replace:true})})]});};// Main App component\nconst App=()=>{return/*#__PURE__*/_jsx(AuthProvider,{children:/*#__PURE__*/_jsx(Router,{future:{v7_startTransition:true,v7_relativeSplatPath:true},children:/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsx(AppRoutes,{})})})});};export default App;","map":{"version":3,"names":["React","BrowserRouter","Router","Routes","Route","Navigate","AuthProvider","useAuth","LandingPage","AuthPage","PatientDashboard","DoctorDashboard","AdminDashboard","NurseDashboard","LoadingSpinner","appointmentsAPI","servicesAPI","patientsAPI","staffAPI","adminAPI","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","ProtectedRoute","_ref","children","allowedRoles","isAuthenticated","isLoading","hasAnyRole","className","to","replace","length","DashboardWrapper","_ref2","user","appointments","setAppointments","useState","services","setServices","doctors","setDoctors","availableSlots","setAvailableSlots","patientId","setPatientId","setIsLoading","isBooking","setIsBooking","bookingError","setBookingError","error","setError","loadDashboardData","currentPatientId","patient","getByUserId","id","console","Error","appointmentsData","servicesData","doctorsData","Promise","all","getByPatient","getAll","getByRole","loadAvailableSlots","date","log","slots","getAvailable","requestedDate","Date","dayOfWeek","getDay","filteredSlots","filter","slot","handleBookAppointment","bookingData","selectedService","find","s","serviceId","startTimeFormatted","startTime","includes","split","concat","endTime","getTime","durationMinutes","endTimeString","toTimeString","slice","create","staffId","appointmentDate","notes","_error$response","_error$response$data","response","data","message","handleUpdateAppointment","appointmentId","updateData","update","_error$response2","_error$response2$data","handleCancelAppointment","delete","_error$response3","_error$response3$data","useEffect","timer","setTimeout","clearTimeout","onBookAppointment","onUpdateAppointment","onCancelAppointment","onLoadAvailableSlots","DoctorDashboardWrapper","_ref3","patients","setPatients","shiftSchedule","setShiftSchedule","isProcessing","setIsProcessing","appointmentsError","patientsData","patientsError","_error$response4","_error$response4$data","handleApproveAppointment","updateStatus","_error$response5","_error$response5$data","handleRejectAppointment","reason","_error$response6","_error$response6$data","handleUpdateShiftSchedule","shiftData","resolve","_error$response7","_error$response7$data","handleViewPatientDetails","_error$response8","_error$response8$data","onApproveAppointment","onRejectAppointment","onUpdateShiftSchedule","onViewPatientDetails","NurseDashboardWrapper","_ref4","servicesError","staffData","staff","role","staffError","_error$response9","_error$response9$data","handleBookWalkInAppointment","appointmentData","walkInAppointment","_objectSpread","toISOString","status","_error$response0","_error$response0$data","handleApproveAppointmentForDoctor","doctorId","_error$response1","_error$response1$data","_error$response10","_error$response10$dat","onBookWalkInAppointment","onApproveAppointmentForDoctor","onLogout","localStorage","removeItem","window","location","href","AdminDashboardWrapper","_ref5","users","setUsers","usersData","getUsers","_error$response11","_error$response11$dat","handleToggleUserStatus","userId","isActive","updateUserStatus","_error$response12","_error$response12$dat","handleUpdateUserRole","newRole","updateUserRole","_error$response13","_error$response13$dat","handleCreateStaff","createStaff","_error$response14","_error$response14$dat","handleCreateService","serviceData","_error$response15","_error$response15$dat","handleUpdateService","_error$response16","_error$response16$dat","handleDeleteService","appointmentsUsingService","apt","service","deleteResult","_error$response17","_error$response17$dat","_error$response18","_error$response18$dat","errorMessage","onToggleUserStatus","onUpdateUserRole","onCreateStaff","onCreateService","onUpdateService","onDeleteService","AppRoutes","_user$roles","_user$roles2","_user$roles3","login","register","logout","clearError","handleLogin","email","password","err","handleRegister","userData","handleLogout","path","element","roles","onLogin","onRegister","props","onClick","App","future","v7_startTransition","v7_relativeSplatPath"],"sources":["C:/Project/HopewellClinic/src/App.tsx"],"sourcesContent":["import React from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport { AuthProvider, useAuth } from './contexts/AuthContext';\nimport LandingPage from './components/LandingPage';\nimport AuthPage from './components/AuthPage';\nimport PatientDashboard from './components/PatientDashboard';\nimport DoctorDashboard from './components/DoctorDashboard';\nimport AdminDashboard from './components/AdminDashboard';\nimport NurseDashboard from './components/NurseDashboard';\nimport LoadingSpinner from './components/LoadingSpinner';\n\n// Import the existing API functions\nimport { appointmentsAPI, servicesAPI, patientsAPI, staffAPI, doctorAPI, adminAPI } from './services/api';\n\n// Protected Route component\nconst ProtectedRoute: React.FC<{ \n  children: React.ReactNode; \n  allowedRoles?: string[] \n}> = ({ children, allowedRoles = [] }) => {\n  const { isAuthenticated, isLoading, hasAnyRole } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <Navigate to=\"/auth\" replace />;\n  }\n\n  if (allowedRoles.length > 0 && !hasAnyRole(allowedRoles)) {\n    return <Navigate to=\"/unauthorized\" replace />;\n  }\n\n  return <>{children}</>;\n};\n\n// Dashboard wrapper component that handles data loading\nconst DashboardWrapper: React.FC<{ \n  children: (props: any) => React.ReactNode;\n  user: any;\n}> = ({ children, user }) => {\n  const [appointments, setAppointments] = React.useState<any[]>([]);\n  const [services, setServices] = React.useState<any[]>([]);\n  const [doctors, setDoctors] = React.useState<any[]>([]);\n  const [availableSlots, setAvailableSlots] = React.useState<any[]>([]);\n  const [patientId, setPatientId] = React.useState<string | null>(null);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isBooking, setIsBooking] = React.useState(false);\n  const [bookingError, setBookingError] = React.useState('');\n  const [error, setError] = React.useState('');\n\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      \n      // Get the Patient ID from the ApplicationUser ID\n      let currentPatientId = null;\n      try {\n        const patient = await patientsAPI.getByUserId(user.id);\n        currentPatientId = patient.id;\n        setPatientId(patient.id);\n      } catch (error) {\n        console.error('❌ Failed to get patient data:', error);\n        throw new Error('Patient data not available');\n      }\n      \n      // Try to load data, but don't fail if APIs are not available\n      try {\n        const [appointmentsData, servicesData, doctorsData] = await Promise.all([\n          appointmentsAPI.getByPatient(currentPatientId),\n          servicesAPI.getAll(),\n          staffAPI.getByRole('doctor')\n        ]);\n        setAppointments(appointmentsData);\n        setServices(servicesData);\n        setDoctors(doctorsData);\n      } catch (error) {\n        console.error('❌ Failed to load dashboard data:', error);\n        throw error;\n      }\n    } catch (error) {\n      console.error('Error loading dashboard data:', error);\n      // Show error to user instead of empty data\n      setError('Failed to load dashboard data. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadAvailableSlots = async (date: string) => {\n    try {\n      console.log('Loading available slots for date:', date);\n      const slots = await appointmentsAPI.getAvailable(date);\n      console.log('Available slots received:', slots);\n      \n      // Calculate the day of the week for the requested date\n      const requestedDate = new Date(date);\n      const dayOfWeek = requestedDate.getDay(); // 0 = Sunday, 1 = Monday, etc.\n      \n      // Filter slots to only include the correct day of the week\n      const filteredSlots = slots.filter((slot: any) => slot.dayOfWeek === dayOfWeek);\n      console.log('Filtered slots for day', dayOfWeek, ':', filteredSlots);\n      \n      setAvailableSlots(filteredSlots);\n    } catch (error) {\n      console.error('Error loading available slots:', error);\n      setAvailableSlots([]);\n    }\n  };\n\n  const handleBookAppointment = async (bookingData: any) => {\n    try {\n      setIsBooking(true);\n      setBookingError('');\n      \n      // Calculate end time based on service duration\n      const selectedService = services.find((s: any) => s.id === bookingData.serviceId) as any;\n      \n      // Ensure startTime is in HH:mm:ss format\n      const startTimeFormatted = bookingData.startTime.includes(':') && bookingData.startTime.split(':').length === 2 \n        ? bookingData.startTime + ':00' \n        : bookingData.startTime;\n      \n      const startTime = new Date(`2000-01-01T${startTimeFormatted}`);\n      const endTime = new Date(startTime.getTime() + (selectedService?.durationMinutes || 30) * 60000);\n      \n      const endTimeString = endTime.toTimeString().slice(0, 8); // Format as HH:mm:ss\n      \n      await appointmentsAPI.create({\n        patientId: patientId,\n        serviceId: bookingData.serviceId,\n        staffId: bookingData.staffId,\n        appointmentDate: bookingData.appointmentDate,\n        startTime: startTimeFormatted,\n        endTime: endTimeString,\n        notes: bookingData.notes || ''\n      });\n\n      // Refresh appointments\n      await loadDashboardData();\n    } catch (error: any) {\n      console.error('Error booking appointment:', error);\n      setBookingError(error.response?.data?.error || error.message || 'Failed to book appointment');\n    } finally {\n      setIsBooking(false);\n    }\n  };\n\n  const handleUpdateAppointment = async (appointmentId: string, updateData: any) => {\n    try {\n      setIsBooking(true);\n      setBookingError('');\n      \n      // Calculate end time based on service duration\n      const selectedService = services.find((s: any) => s.id === updateData.serviceId) as any;\n      \n      // Ensure startTime is in HH:mm:ss format\n      const startTimeFormatted = updateData.startTime.includes(':') && updateData.startTime.split(':').length === 2 \n        ? updateData.startTime + ':00' \n        : updateData.startTime;\n      \n      const startTime = new Date(`2000-01-01T${startTimeFormatted}`);\n      const endTime = new Date(startTime.getTime() + (selectedService?.durationMinutes || 30) * 60000);\n      \n      const endTimeString = endTime.toTimeString().slice(0, 8); // Format as HH:mm:ss\n      \n      await appointmentsAPI.update(appointmentId, {\n        appointmentDate: updateData.appointmentDate,\n        startTime: startTimeFormatted,\n        endTime: endTimeString,\n        notes: updateData.notes || ''\n      });\n\n      // Refresh appointments\n      await loadDashboardData();\n    } catch (error: any) {\n      console.error('Error updating appointment:', error);\n      setBookingError(error.response?.data?.error || error.message || 'Failed to update appointment');\n    } finally {\n      setIsBooking(false);\n    }\n  };\n\n  const handleCancelAppointment = async (appointmentId: string) => {\n    try {\n      setIsBooking(true);\n      setBookingError('');\n      \n      await appointmentsAPI.delete(appointmentId);\n\n      // Refresh appointments\n      await loadDashboardData();\n    } catch (error: any) {\n      console.error('Error canceling appointment:', error);\n      setBookingError(error.response?.data?.error || error.message || 'Failed to cancel appointment');\n    } finally {\n      setIsBooking(false);\n    }\n  };\n\n  React.useEffect(() => {\n    // Add a small delay to ensure user is fully logged in before making API calls\n    const timer = setTimeout(() => {\n      loadDashboardData();\n    }, 100);\n    \n    return () => clearTimeout(timer);\n  }, [user.id]);\n\n  // Call children as a function with props\n  return children({\n    user,\n    appointments,\n    services,\n    doctors,\n    availableSlots,\n    isLoading,\n    isBooking,\n    bookingError,\n    error,\n    onBookAppointment: handleBookAppointment,\n    onUpdateAppointment: handleUpdateAppointment,\n    onCancelAppointment: handleCancelAppointment,\n    onLoadAvailableSlots: loadAvailableSlots\n  });\n};\n\n// Doctor Dashboard wrapper component that handles doctor-specific data loading\nconst DoctorDashboardWrapper: React.FC<{ \n  children: (props: any) => React.ReactNode;\n  user: any;\n}> = ({ children, user }) => {\n  const [appointments, setAppointments] = React.useState<any[]>([]);\n  const [patients, setPatients] = React.useState<any[]>([]);\n  const [shiftSchedule, setShiftSchedule] = React.useState<any[]>([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isProcessing, setIsProcessing] = React.useState(false);\n  const [error, setError] = React.useState('');\n\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      // For now, use existing endpoints that work\n      // Get all appointments (we'll filter by doctor later when backend supports it)\n      try {\n        const appointmentsData = await appointmentsAPI.getAll();\n        // Filter appointments for this doctor (when staffId is available)\n        setAppointments(appointmentsData);\n      } catch (appointmentsError) {\n        console.log('No appointments endpoint available yet');\n        setAppointments([]);\n      }\n\n      // Get all patients (we'll filter by doctor later when backend supports it)\n      try {\n        const patientsData = await patientsAPI.getAll();\n        setPatients(patientsData);\n      } catch (patientsError) {\n        console.log('No patients endpoint available yet');\n        setPatients([]);\n      }\n\n      // Initialize empty shift schedule (backend not implemented yet)\n      setShiftSchedule([]);\n    } catch (error: any) {\n      console.error('Error loading doctor dashboard data:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to load dashboard data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleApproveAppointment = async (appointmentId: string) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      // For now, just update the appointment status using existing endpoint\n      await appointmentsAPI.updateStatus(appointmentId, 'confirmed');\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error approving appointment:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to approve appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleRejectAppointment = async (appointmentId: string, reason: string) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      // For now, just update the appointment status using existing endpoint\n      await appointmentsAPI.updateStatus(appointmentId, 'cancelled');\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error rejecting appointment:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to reject appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleUpdateShiftSchedule = async (shiftData: any[]) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      // For now, just store locally (backend not implemented yet)\n      console.log('Shift schedule update requested:', shiftData);\n      setShiftSchedule(shiftData);\n      // Simulate success\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    } catch (error: any) {\n      console.error('Error updating shift schedule:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to update shift schedule');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleViewPatientDetails = async (patientId: string) => {\n    try {\n      setError('');\n      // For now, just log the request (backend not implemented yet)\n      console.log('View patient details requested for:', patientId);\n    } catch (error: any) {\n      console.error('Error loading patient details:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to load patient details');\n    }\n  };\n\n  React.useEffect(() => {\n    // Add a small delay to ensure user is fully logged in before making API calls\n    const timer = setTimeout(() => {\n      loadDashboardData();\n    }, 100);\n    \n    return () => clearTimeout(timer);\n  }, [user.id]);\n\n  // Call children as a function with props\n  return children({\n    user,\n    appointments,\n    patients,\n    shiftSchedule,\n    isLoading,\n    isProcessing,\n    error,\n    onApproveAppointment: handleApproveAppointment,\n    onRejectAppointment: handleRejectAppointment,\n    onUpdateShiftSchedule: handleUpdateShiftSchedule,\n    onViewPatientDetails: handleViewPatientDetails\n  });\n};\n\n// Nurse Dashboard wrapper component that handles nurse-specific data loading\nconst NurseDashboardWrapper: React.FC<{ \n  children: (props: any) => React.ReactNode;\n  user: any;\n}> = ({ children, user }) => {\n  const [appointments, setAppointments] = React.useState<any[]>([]);\n  const [services, setServices] = React.useState<any[]>([]);\n  const [doctors, setDoctors] = React.useState<any[]>([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isProcessing, setIsProcessing] = React.useState(false);\n  const [error, setError] = React.useState('');\n\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      // Load appointments\n      try {\n        const appointmentsData = await appointmentsAPI.getAll();\n        setAppointments(appointmentsData);\n      } catch (appointmentsError) {\n        console.log('No appointments endpoint available yet');\n        setAppointments([]);\n      }\n\n      // Load services\n      try {\n        const servicesData = await servicesAPI.getAll();\n        setServices(servicesData);\n      } catch (servicesError) {\n        console.log('No services endpoint available yet');\n        setServices([]);\n      }\n\n      // Load doctors (staff with doctor role)\n      try {\n        const staffData = await staffAPI.getAll();\n        const doctorsData = staffData.filter((staff: any) => staff.role === 'doctor');\n        setDoctors(doctorsData);\n      } catch (staffError) {\n        console.log('No staff endpoint available yet');\n        setDoctors([]);\n      }\n    } catch (error: any) {\n      console.error('Error loading nurse dashboard data:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to load dashboard data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  React.useEffect(() => {\n    loadDashboardData();\n  }, []);\n\n  const handleBookWalkInAppointment = async (appointmentData: any) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      \n      // Create a walk-in appointment with immediate scheduling\n      const walkInAppointment = {\n        ...appointmentData,\n        appointmentDate: new Date().toISOString().split('T')[0], // Today\n        startTime: new Date().toTimeString().slice(0, 5), // Current time\n        status: 'walkin',\n        notes: `Walk-in appointment: ${appointmentData.notes || 'No additional notes'}`\n      };\n\n      await appointmentsAPI.create(walkInAppointment);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error booking walk-in appointment:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to book walk-in appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleApproveAppointmentForDoctor = async (appointmentId: string, doctorId: string) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      \n      // Update appointment with doctor assignment and approval\n      await appointmentsAPI.update(appointmentId, {\n        staffId: doctorId,\n        status: 'confirmed'\n      });\n      \n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error approving appointment for doctor:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to approve appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleRejectAppointment = async (appointmentId: string, reason: string) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      \n      await appointmentsAPI.update(appointmentId, {\n        status: 'cancelled',\n        notes: `Rejected by nurse: ${reason}`\n      });\n      \n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error rejecting appointment:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to reject appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return children({\n    user,\n    appointments,\n    services,\n    doctors,\n    isLoading,\n    isProcessing,\n    error,\n    onBookWalkInAppointment: handleBookWalkInAppointment,\n    onApproveAppointmentForDoctor: handleApproveAppointmentForDoctor,\n    onRejectAppointment: handleRejectAppointment,\n    onLogout: () => {\n      localStorage.removeItem('token');\n      window.location.href = '/auth';\n    }\n  });\n};\n\n// Admin Dashboard wrapper component that handles admin-specific data loading\nconst AdminDashboardWrapper: React.FC<{ \n  children: (props: any) => React.ReactNode;\n  user: any;\n}> = ({ children, user }) => {\n  const [users, setUsers] = React.useState<any[]>([]);\n  const [appointments, setAppointments] = React.useState<any[]>([]);\n  const [services, setServices] = React.useState<any[]>([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isProcessing, setIsProcessing] = React.useState(false);\n  const [error, setError] = React.useState('');\n\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      // Get all staff members\n      try {\n        const staffData = await staffAPI.getAll();\n        console.log('Staff data received:', staffData);\n        setUsers(staffData);\n      } catch (staffError) {\n        console.log('No staff endpoint available, falling back to users');\n        const usersData = await adminAPI.getUsers();\n        console.log('Users data received:', usersData);\n        setUsers(usersData);\n      }\n\n      // Get all appointments (we'll need to implement this endpoint)\n      try {\n        // For now, we'll use the existing appointments API\n        const appointmentsData = await appointmentsAPI.getAll();\n        setAppointments(appointmentsData);\n      } catch (appointmentsError) {\n        console.log('No appointments endpoint available yet');\n        setAppointments([]);\n      }\n\n      // Load services\n      try {\n        const servicesData = await servicesAPI.getAll();\n        setServices(servicesData);\n      } catch (servicesError) {\n        console.log('No services endpoint available yet');\n        setServices([]);\n      }\n    } catch (error: any) {\n      console.error('Error loading admin dashboard data:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to load dashboard data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleToggleUserStatus = async (userId: string, isActive: boolean) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await adminAPI.updateUserStatus(userId, isActive);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error updating user status:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to update user status');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleUpdateUserRole = async (userId: string, newRole: string) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await adminAPI.updateUserRole(userId, newRole);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error updating user role:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to update user role');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleCreateStaff = async (staffData: any) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await adminAPI.createStaff(staffData);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error creating staff:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to create staff member');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleCreateService = async (serviceData: any) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await servicesAPI.create(serviceData);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error creating service:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to create service');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleUpdateService = async (serviceId: string, serviceData: any) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await servicesAPI.update(serviceId, serviceData);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error updating service:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to update service');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleDeleteService = async (serviceId: string) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      \n      // Check if service is being used by any appointments\n      const appointmentsUsingService = appointments.filter(apt => apt.service.id === serviceId);\n      if (appointmentsUsingService.length > 0) {\n        setError(`Cannot delete service. It is currently being used by ${appointmentsUsingService.length} appointment(s). Please cancel or reschedule these appointments first.`);\n        return;\n      }\n      \n      console.log('Attempting to delete service:', serviceId);\n      const deleteResult = await servicesAPI.delete(serviceId);\n      console.log('Delete result:', deleteResult);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error deleting service:', error);\n      \n      // Provide more specific error messages\n      let errorMessage = 'Failed to delete service';\n      if (error.response?.data?.error) {\n        errorMessage = error.response.data.error;\n      } else if (error.response?.data?.message) {\n        errorMessage = error.response.data.message;\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      \n      // Check for common database constraint errors\n      if (errorMessage.includes('foreign key') || errorMessage.includes('constraint') || errorMessage.includes('reference')) {\n        errorMessage = 'Cannot delete service. It is currently being used by existing appointments. Please cancel or reschedule these appointments first.';\n      }\n      \n      setError(errorMessage);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  React.useEffect(() => {\n    loadDashboardData();\n  }, [user.id]);\n\n  // Call children as a function with props\n  return children({\n    user,\n    users,\n    appointments,\n    services,\n    isLoading,\n    isProcessing,\n    error,\n    onToggleUserStatus: handleToggleUserStatus,\n    onUpdateUserRole: handleUpdateUserRole,\n    onCreateStaff: handleCreateStaff,\n    onCreateService: handleCreateService,\n    onUpdateService: handleUpdateService,\n    onDeleteService: handleDeleteService,\n    onLogout: () => {\n      localStorage.removeItem('token');\n      window.location.href = '/auth';\n    }\n  });\n};\n\n// Main App Routes component\nconst AppRoutes: React.FC = () => {\n  const { isAuthenticated, user, login, register, logout, isLoading, error, clearError } = useAuth();\n\n  const handleLogin = async (email: string, password: string) => {\n    try {\n      await login({ email, password });\n    } catch (err) {\n      // Error is handled by AuthContext\n    }\n  };\n\n  const handleRegister = async (userData: any) => {\n    try {\n      await register(userData);\n    } catch (err) {\n      // Error is handled by AuthContext\n    }\n  };\n\n  const handleLogout = () => {\n    logout();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  return (\n    <Routes>\n      {/* Public Routes */}\n      <Route path=\"/\" element={<LandingPage />} />\n      <Route \n        path=\"/auth\" \n        element={\n          isAuthenticated ? (\n            <Navigate to={\n              user?.roles?.includes('admin') ? '/admin-dashboard' :\n              user?.roles?.includes('doctor') ? '/doctor-dashboard' :\n              user?.roles?.includes('nurse') ? '/nurse-dashboard' :\n              '/patient-dashboard'\n            } replace />\n          ) : (\n            <AuthPage\n              onLogin={handleLogin}\n              onRegister={handleRegister}\n              isLoading={isLoading}\n              error={error}\n              clearError={clearError}\n            />\n          )\n        } \n      />\n\n      {/* Protected Routes */}\n      <Route\n        path=\"/patient-dashboard\"\n        element={\n          <ProtectedRoute allowedRoles={['patient']}>\n            <DashboardWrapper user={user}>\n              {(props) => <PatientDashboard {...props} onLogout={handleLogout} />}\n            </DashboardWrapper>\n          </ProtectedRoute>\n        }\n      />\n\n      <Route\n        path=\"/doctor-dashboard\"\n        element={\n          <ProtectedRoute allowedRoles={['doctor']}>\n            <DoctorDashboardWrapper user={user}>\n              {(props) => <DoctorDashboard {...props} onLogout={handleLogout} />}\n            </DoctorDashboardWrapper>\n          </ProtectedRoute>\n        }\n      />\n\n      <Route\n        path=\"/admin-dashboard\"\n        element={\n          <ProtectedRoute allowedRoles={['admin']}>\n            <AdminDashboardWrapper user={user}>\n              {(props) => <AdminDashboard {...props} onLogout={handleLogout} />}\n            </AdminDashboardWrapper>\n          </ProtectedRoute>\n        }\n      />\n\n      <Route\n        path=\"/nurse-dashboard\"\n        element={\n          <ProtectedRoute allowedRoles={['nurse']}>\n            <NurseDashboardWrapper user={user}>\n              {(props) => <NurseDashboard {...props} onLogout={handleLogout} />}\n            </NurseDashboardWrapper>\n          </ProtectedRoute>\n        }\n      />\n\n      {/* Fallback Routes */}\n      <Route path=\"/unauthorized\" element={\n        <div className=\"min-h-screen flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-foreground mb-4\">Unauthorized</h1>\n            <p className=\"text-muted-foreground mb-4\">You don't have permission to access this page.</p>\n            <button \n              onClick={handleLogout}\n              className=\"px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90\"\n            >\n              Sign Out\n            </button>\n          </div>\n        </div>\n      } />\n      \n      <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\n    </Routes>\n  );\n};\n\n// Main App component\nconst App: React.FC = () => {\n  return (\n    <AuthProvider>\n      <Router future={{ v7_startTransition: true, v7_relativeSplatPath: true }}>\n        <div className=\"App\">\n          <AppRoutes />\n        </div>\n      </Router>\n    </AuthProvider>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}