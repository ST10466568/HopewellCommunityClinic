{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'https://hopewellapi-azcvcferesfpgjgm.southafricanorth-01.azurewebsites.net/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle common errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    var _error$config, _error$config$url, _error$config2, _error$config2$url, _error$config3, _error$config3$url;\n    // Only logout if this is an authentication-related endpoint or if we're in mock mode\n    const isAuthEndpoint = (_error$config = error.config) === null || _error$config === void 0 ? void 0 : (_error$config$url = _error$config.url) === null || _error$config$url === void 0 ? void 0 : _error$config$url.includes('/Auth/');\n    const isLoginEndpoint = (_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : (_error$config2$url = _error$config2.url) === null || _error$config2$url === void 0 ? void 0 : _error$config2$url.includes('/login');\n    const isRegisterEndpoint = (_error$config3 = error.config) === null || _error$config3 === void 0 ? void 0 : (_error$config3$url = _error$config3.url) === null || _error$config3$url === void 0 ? void 0 : _error$config3$url.includes('/register');\n\n    // In mock mode, don't auto-logout on 401 errors unless it's an auth endpoint\n    if (MOCK_MODE) {\n      var _error$config4;\n      if (isAuthEndpoint && (isLoginEndpoint || isRegisterEndpoint)) {\n        // Only logout on actual login/register failures\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        if (window.location.pathname !== '/auth') {\n          window.location.href = '/auth';\n        }\n      }\n      // For all other 401s in mock mode, just log and continue\n      console.log('⚠️ Mock Mode: Ignoring 401 error for:', (_error$config4 = error.config) === null || _error$config4 === void 0 ? void 0 : _error$config4.url);\n    } else {\n      // Real API mode - be more careful about when to logout\n      if (isAuthEndpoint) {\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        if (window.location.pathname !== '/auth') {\n          window.location.href = '/auth';\n        }\n      }\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Real API only - no mock mode\n\n// Auth API\nexport const authAPI = {\n  register: async userData => {\n    try {\n      console.log('Attempting registration to:', API_BASE_URL + '/Auth/register');\n      console.log('Registration data:', userData);\n      const response = await api.post('/Auth/register', userData);\n      console.log('Registration response:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response3, _error$response4;\n      console.error('Registration error:', error);\n      console.error('Error response:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n      console.error('Error status:', (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status);\n      throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message;\n    }\n  },\n  login: async credentials => {\n    try {\n      console.log('Attempting login to:', API_BASE_URL + '/Auth/login');\n      console.log('Credentials:', credentials);\n      const response = await api.post('/Auth/login', credentials);\n      console.log('Login response:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response6, _error$response7;\n      console.error('Login error:', error);\n      console.error('Error response:', (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data);\n      console.error('Error status:', (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.status);\n      throw ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || error.message;\n    }\n  },\n  logout: async () => {\n    try {\n      const response = await api.post('/Auth/logout');\n      return response.data;\n    } catch (error) {\n      var _error$response8;\n      throw ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data) || error.message;\n    }\n  }\n};\n\n// Services API\nexport const servicesAPI = {\n  getAll: async () => {\n    try {\n      console.log('Fetching services from:', API_BASE_URL + '/Services');\n      const response = await api.get('/Services');\n      console.log('Services response:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response9, _error$response0;\n      console.error('Error fetching services:', error);\n      console.error('Error response:', (_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.data);\n      throw ((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : _error$response0.data) || error.message;\n    }\n  },\n  create: async serviceData => {\n    try {\n      const response = await api.post('/Services', serviceData);\n      return response.data;\n    } catch (error) {\n      var _error$response1;\n      throw ((_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : _error$response1.data) || error.message;\n    }\n  },\n  update: async (id, serviceData) => {\n    try {\n      const response = await api.put(`/Services/${id}`, serviceData);\n      return response.data;\n    } catch (error) {\n      var _error$response10;\n      throw ((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : _error$response10.data) || error.message;\n    }\n  },\n  delete: async id => {\n    try {\n      console.log('Deleting service with ID:', id);\n      const response = await api.delete(`/Services/${id}`);\n      console.log('Delete service response:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response11, _error$response12, _error$response13;\n      console.error('Delete service error:', error);\n      console.error('Error response:', (_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : _error$response11.data);\n      console.error('Error status:', (_error$response12 = error.response) === null || _error$response12 === void 0 ? void 0 : _error$response12.status);\n      throw ((_error$response13 = error.response) === null || _error$response13 === void 0 ? void 0 : _error$response13.data) || error.message;\n    }\n  }\n};\n\n// Time Slots API\nexport const timeSlotsAPI = {\n  getByDay: async day => {\n    try {\n      const response = await api.get(`/time-slots/by-day/${day}`);\n      return response.data;\n    } catch (error) {\n      var _error$response14;\n      throw ((_error$response14 = error.response) === null || _error$response14 === void 0 ? void 0 : _error$response14.data) || error.message;\n    }\n  },\n  getAvailable: async date => {\n    try {\n      const params = date ? {\n        date\n      } : {};\n      const response = await api.get('/time-slots/available', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response15;\n      throw ((_error$response15 = error.response) === null || _error$response15 === void 0 ? void 0 : _error$response15.data) || error.message;\n    }\n  }\n};\n\n// Staff API\nexport const staffAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Staff');\n      return response.data;\n    } catch (error) {\n      var _error$response16;\n      throw ((_error$response16 = error.response) === null || _error$response16 === void 0 ? void 0 : _error$response16.data) || error.message;\n    }\n  },\n  getById: async id => {\n    try {\n      const response = await api.get(`/Staff/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response17;\n      throw ((_error$response17 = error.response) === null || _error$response17 === void 0 ? void 0 : _error$response17.data) || error.message;\n    }\n  },\n  getByRole: async role => {\n    try {\n      const response = await api.get(`/Staff/by-role/${role}`);\n      return response.data;\n    } catch (error) {\n      var _error$response18;\n      throw ((_error$response18 = error.response) === null || _error$response18 === void 0 ? void 0 : _error$response18.data) || error.message;\n    }\n  },\n  getSchedule: async (id, startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get(`/Staff/${id}/schedule`, {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response19;\n      throw ((_error$response19 = error.response) === null || _error$response19 === void 0 ? void 0 : _error$response19.data) || error.message;\n    }\n  },\n  getAvailability: async (id, date) => {\n    try {\n      const response = await api.get(`/Staff/${id}/availability`, {\n        params: {\n          date\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response20;\n      throw ((_error$response20 = error.response) === null || _error$response20 === void 0 ? void 0 : _error$response20.data) || error.message;\n    }\n  },\n  update: async (id, staffData) => {\n    try {\n      const response = await api.put(`/Staff/${id}`, staffData);\n      return response.data;\n    } catch (error) {\n      var _error$response21;\n      throw ((_error$response21 = error.response) === null || _error$response21 === void 0 ? void 0 : _error$response21.data) || error.message;\n    }\n  },\n  updateAvailability: async (id, availabilityData) => {\n    try {\n      const response = await api.post(`/Staff/${id}/availability`, availabilityData);\n      return response.data;\n    } catch (error) {\n      var _error$response22;\n      throw ((_error$response22 = error.response) === null || _error$response22 === void 0 ? void 0 : _error$response22.data) || error.message;\n    }\n  }\n};\n\n// Appointments API\nexport const appointmentsAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Appointments');\n      return response.data;\n    } catch (error) {\n      var _error$response23;\n      throw ((_error$response23 = error.response) === null || _error$response23 === void 0 ? void 0 : _error$response23.data) || error.message;\n    }\n  },\n  getDoctorsOnDuty: async (date, serviceId = null) => {\n    if (MOCK_MODE) {\n      // Mock doctors on duty - by default all doctors are on duty\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            doctors: [{\n              id: \"doctor-1\",\n              firstName: \"John\",\n              lastName: \"Smith\",\n              specialty: \"Cardiology\",\n              rating: 4.8,\n              shiftStart: \"09:00\",\n              shiftEnd: \"17:00\",\n              isAvailable: true,\n              services: [\"consultation\", \"follow-up\"]\n            }, {\n              id: \"doctor-2\",\n              firstName: \"Sarah\",\n              lastName: \"Johnson\",\n              specialty: \"Pediatrics\",\n              rating: 4.9,\n              shiftStart: \"08:00\",\n              shiftEnd: \"16:00\",\n              isAvailable: true,\n              services: [\"consultation\", \"vaccination\"]\n            }, {\n              id: \"doctor-3\",\n              firstName: \"Michael\",\n              lastName: \"Brown\",\n              specialty: \"General Medicine\",\n              rating: 4.7,\n              shiftStart: \"10:00\",\n              shiftEnd: \"18:00\",\n              isAvailable: true,\n              services: [\"consultation\", \"checkup\"]\n            }]\n          });\n        }, 500);\n      });\n    }\n    try {\n      const params = {\n        date\n      };\n      if (serviceId) params.serviceId = serviceId;\n      const response = await api.get('/Appointments/doctors-on-duty', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching doctors on duty:', error);\n      // Fallback to existing staff API if new endpoint doesn't exist\n      try {\n        const staffResponse = await api.get('/Staff/by-role/doctor');\n        return {\n          doctors: staffResponse.data\n        };\n      } catch (fallbackError) {\n        var _error$response24;\n        throw ((_error$response24 = error.response) === null || _error$response24 === void 0 ? void 0 : _error$response24.data) || error.message;\n      }\n    }\n  },\n  getAvailableSlotsByDoctor: async (doctorId, date, serviceId = null) => {\n    try {\n      const params = {\n        doctorId,\n        date\n      };\n      if (serviceId) params.serviceId = serviceId;\n      const response = await api.get('/Appointments/available-slots-by-doctor', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching doctor-specific slots:', error);\n      // Fallback to existing available slots API\n      try {\n        const slotsResponse = await api.get('/Appointments/available-slots', {\n          params: {\n            date\n          }\n        });\n        return {\n          availableSlots: slotsResponse.data\n        };\n      } catch (fallbackError) {\n        var _error$response25;\n        throw ((_error$response25 = error.response) === null || _error$response25 === void 0 ? void 0 : _error$response25.data) || error.message;\n      }\n    }\n  },\n  getById: async id => {\n    try {\n      const response = await api.get(`/Appointments/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response26;\n      throw ((_error$response26 = error.response) === null || _error$response26 === void 0 ? void 0 : _error$response26.data) || error.message;\n    }\n  },\n  getByPatient: async patientId => {\n    if (MOCK_MODE) {\n      console.log('🔧 Mock Mode: Returning mock appointments for patient:', patientId);\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve([{\n            id: '1',\n            appointmentDate: '2024-01-15',\n            startTime: '09:00:00',\n            endTime: '09:30:00',\n            status: 'confirmed',\n            notes: 'Regular checkup',\n            service: {\n              id: '1',\n              name: 'General Consultation',\n              description: 'Basic health checkup',\n              durationMinutes: 30\n            },\n            staff: {\n              firstName: 'Dr. John',\n              lastName: 'Smith',\n              email: 'doctor@hopewell.com'\n            }\n          }, {\n            id: '2',\n            appointmentDate: '2024-01-20',\n            startTime: '14:00:00',\n            endTime: '14:15:00',\n            status: 'pending',\n            notes: 'Follow-up visit',\n            service: {\n              id: '2',\n              name: 'Follow-up Visit',\n              description: 'Follow-up appointment',\n              durationMinutes: 15\n            },\n            staff: {\n              firstName: 'Dr. Jane',\n              lastName: 'Doe',\n              email: 'jane@hopewell.com'\n            }\n          }]);\n        }, 500);\n      });\n    }\n    try {\n      const response = await api.get(`/Appointments/patient/${patientId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response27;\n      throw ((_error$response27 = error.response) === null || _error$response27 === void 0 ? void 0 : _error$response27.data) || error.message;\n    }\n  },\n  getToday: async () => {\n    try {\n      const response = await api.get('/Appointments/today');\n      return response.data;\n    } catch (error) {\n      var _error$response28;\n      throw ((_error$response28 = error.response) === null || _error$response28 === void 0 ? void 0 : _error$response28.data) || error.message;\n    }\n  },\n  getAvailable: async date => {\n    try {\n      const response = await api.get('/Appointments/available-slots', {\n        params: {\n          date\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response29;\n      throw ((_error$response29 = error.response) === null || _error$response29 === void 0 ? void 0 : _error$response29.data) || error.message;\n    }\n  },\n  create: async appointmentData => {\n    try {\n      console.log('Creating appointment with data:', appointmentData);\n      const response = await api.post('/Appointments', appointmentData);\n      console.log('Appointment created successfully:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response30, _error$response31, _error$response32;\n      console.error('Appointment creation error:', error);\n      console.error('Error response:', (_error$response30 = error.response) === null || _error$response30 === void 0 ? void 0 : _error$response30.data);\n      console.error('Error status:', (_error$response31 = error.response) === null || _error$response31 === void 0 ? void 0 : _error$response31.status);\n      throw ((_error$response32 = error.response) === null || _error$response32 === void 0 ? void 0 : _error$response32.data) || error.message;\n    }\n  },\n  update: async (id, appointmentData) => {\n    try {\n      const response = await api.put(`/Appointments/${id}`, appointmentData);\n      return response.data;\n    } catch (error) {\n      var _error$response33;\n      throw ((_error$response33 = error.response) === null || _error$response33 === void 0 ? void 0 : _error$response33.data) || error.message;\n    }\n  },\n  updateStatus: async (id, status) => {\n    try {\n      const response = await api.put(`/Appointments/${id}/status`, {\n        status\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response34;\n      throw ((_error$response34 = error.response) === null || _error$response34 === void 0 ? void 0 : _error$response34.data) || error.message;\n    }\n  },\n  delete: async id => {\n    try {\n      const response = await api.delete(`/Appointments/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response35;\n      throw ((_error$response35 = error.response) === null || _error$response35 === void 0 ? void 0 : _error$response35.data) || error.message;\n    }\n  },\n  assignStaff: async (id, staffId) => {\n    try {\n      const response = await api.post(`/Appointments/${id}/assign-staff`, {\n        staffId\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response36;\n      throw ((_error$response36 = error.response) === null || _error$response36 === void 0 ? void 0 : _error$response36.data) || error.message;\n    }\n  },\n  bookForPatient: async appointmentData => {\n    try {\n      const response = await api.post('/Appointments/book-for-patient', appointmentData);\n      return response.data;\n    } catch (error) {\n      var _error$response37;\n      throw ((_error$response37 = error.response) === null || _error$response37 === void 0 ? void 0 : _error$response37.data) || error.message;\n    }\n  }\n};\n\n// Patients API\nexport const patientsAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Patients');\n      return response.data;\n    } catch (error) {\n      var _error$response38;\n      throw ((_error$response38 = error.response) === null || _error$response38 === void 0 ? void 0 : _error$response38.data) || error.message;\n    }\n  },\n  getById: async id => {\n    try {\n      const response = await api.get(`/Patients/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response39;\n      throw ((_error$response39 = error.response) === null || _error$response39 === void 0 ? void 0 : _error$response39.data) || error.message;\n    }\n  },\n  getByUserId: async userId => {\n    if (MOCK_MODE) {\n      console.log('🔧 Mock Mode: Returning mock patient data for user:', userId);\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            id: 'mock-patient-id',\n            userId: userId,\n            firstName: 'John',\n            lastName: 'Patient',\n            email: 'patient@hopewell.com',\n            phone: '+1234567890',\n            dateOfBirth: '1990-01-01',\n            address: '123 Main St, City, State 12345'\n          });\n        }, 500);\n      });\n    }\n    try {\n      // Get all patients and find the one with matching userId\n      const response = await api.get('/Patients');\n      const patients = response.data;\n      const patient = patients.find(p => p.userId === userId);\n      if (!patient) {\n        throw new Error('Patient not found for this user');\n      }\n      return patient;\n    } catch (error) {\n      var _error$response40;\n      throw ((_error$response40 = error.response) === null || _error$response40 === void 0 ? void 0 : _error$response40.data) || error.message;\n    }\n  },\n  search: async query => {\n    try {\n      const response = await api.get('/Patients/search', {\n        params: {\n          query\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response41;\n      throw ((_error$response41 = error.response) === null || _error$response41 === void 0 ? void 0 : _error$response41.data) || error.message;\n    }\n  },\n  update: async (id, patientData) => {\n    try {\n      const response = await api.put(`/Patients/${id}`, patientData);\n      return response.data;\n    } catch (error) {\n      var _error$response42;\n      throw ((_error$response42 = error.response) === null || _error$response42 === void 0 ? void 0 : _error$response42.data) || error.message;\n    }\n  }\n};\n\n// Doctor API\nexport const doctorAPI = {\n  getPatients: async doctorId => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/patients`);\n      return response.data;\n    } catch (error) {\n      var _error$response43;\n      throw ((_error$response43 = error.response) === null || _error$response43 === void 0 ? void 0 : _error$response43.data) || error.message;\n    }\n  },\n  getUpcomingAppointments: async doctorId => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/appointments/upcoming`);\n      return response.data;\n    } catch (error) {\n      var _error$response44;\n      throw ((_error$response44 = error.response) === null || _error$response44 === void 0 ? void 0 : _error$response44.data) || error.message;\n    }\n  },\n  getAllAppointments: async doctorId => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/appointments`);\n      return response.data;\n    } catch (error) {\n      var _error$response45;\n      throw ((_error$response45 = error.response) === null || _error$response45 === void 0 ? void 0 : _error$response45.data) || error.message;\n    }\n  },\n  getSchedule: async (doctorId, startDate, endDate) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/schedule`, {\n        params: {\n          startDate,\n          endDate\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response46;\n      throw ((_error$response46 = error.response) === null || _error$response46 === void 0 ? void 0 : _error$response46.data) || error.message;\n    }\n  },\n  updateShiftSchedule: async (doctorId, shiftData) => {\n    try {\n      const response = await api.put(`/Doctor/${doctorId}/shifts`, shiftData);\n      return response.data;\n    } catch (error) {\n      var _error$response47;\n      throw ((_error$response47 = error.response) === null || _error$response47 === void 0 ? void 0 : _error$response47.data) || error.message;\n    }\n  },\n  getShiftSchedule: async doctorId => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/shifts`);\n      return response.data;\n    } catch (error) {\n      var _error$response48;\n      throw ((_error$response48 = error.response) === null || _error$response48 === void 0 ? void 0 : _error$response48.data) || error.message;\n    }\n  },\n  approveAppointment: async appointmentId => {\n    try {\n      const response = await api.put(`/Doctor/appointments/${appointmentId}/approve`);\n      return response.data;\n    } catch (error) {\n      var _error$response49;\n      throw ((_error$response49 = error.response) === null || _error$response49 === void 0 ? void 0 : _error$response49.data) || error.message;\n    }\n  },\n  rejectAppointment: async (appointmentId, reason) => {\n    try {\n      const response = await api.put(`/Doctor/appointments/${appointmentId}/reject`, {\n        reason\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response50;\n      throw ((_error$response50 = error.response) === null || _error$response50 === void 0 ? void 0 : _error$response50.data) || error.message;\n    }\n  },\n  getPatientDetails: async patientId => {\n    try {\n      const response = await api.get(`/Doctor/patients/${patientId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response51;\n      throw ((_error$response51 = error.response) === null || _error$response51 === void 0 ? void 0 : _error$response51.data) || error.message;\n    }\n  },\n  createWalkinAppointment: async appointmentData => {\n    try {\n      const response = await api.post('/Doctor/appointments/walkin', appointmentData);\n      return response.data;\n    } catch (error) {\n      var _error$response52;\n      throw ((_error$response52 = error.response) === null || _error$response52 === void 0 ? void 0 : _error$response52.data) || error.message;\n    }\n  }\n};\n\n// Admin API\nexport const adminAPI = {\n  getUsers: async () => {\n    try {\n      const response = await api.get('/Admin/users');\n      return response.data;\n    } catch (error) {\n      var _error$response53;\n      throw ((_error$response53 = error.response) === null || _error$response53 === void 0 ? void 0 : _error$response53.data) || error.message;\n    }\n  },\n  getRoles: async () => {\n    try {\n      const response = await api.get('/Admin/roles');\n      return response.data;\n    } catch (error) {\n      var _error$response54;\n      throw ((_error$response54 = error.response) === null || _error$response54 === void 0 ? void 0 : _error$response54.data) || error.message;\n    }\n  },\n  createStaff: async staffData => {\n    try {\n      const response = await api.post('/Admin/create-staff', staffData);\n      return response.data;\n    } catch (error) {\n      var _error$response55;\n      throw ((_error$response55 = error.response) === null || _error$response55 === void 0 ? void 0 : _error$response55.data) || error.message;\n    }\n  },\n  updateUserStatus: async (userId, isActive) => {\n    try {\n      const response = await api.put(`/Admin/users/${userId}`, {\n        isActive\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response56;\n      throw ((_error$response56 = error.response) === null || _error$response56 === void 0 ? void 0 : _error$response56.data) || error.message;\n    }\n  },\n  updateUserRole: async (userId, newRole) => {\n    try {\n      const response = await api.put(`/Admin/users/${userId}/role`, {\n        newRole\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response57;\n      throw ((_error$response57 = error.response) === null || _error$response57 === void 0 ? void 0 : _error$response57.data) || error.message;\n    }\n  },\n  getAppointmentStats: async (startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get('/Admin/reports/appointment-stats', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response58;\n      throw ((_error$response58 = error.response) === null || _error$response58 === void 0 ? void 0 : _error$response58.data) || error.message;\n    }\n  },\n  getRevenueReport: async (startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get('/Admin/reports/revenue', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response59;\n      throw ((_error$response59 = error.response) === null || _error$response59 === void 0 ? void 0 : _error$response59.data) || error.message;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","_error$config","_error$config$url","_error$config2","_error$config2$url","_error$config3","_error$config3$url","isAuthEndpoint","url","includes","isLoginEndpoint","isRegisterEndpoint","MOCK_MODE","_error$config4","removeItem","window","location","pathname","href","console","log","authAPI","register","userData","post","data","_error$response2","_error$response3","_error$response4","message","login","credentials","_error$response5","_error$response6","_error$response7","logout","_error$response8","servicesAPI","getAll","get","_error$response9","_error$response0","serviceData","_error$response1","update","id","put","_error$response10","delete","_error$response11","_error$response12","_error$response13","timeSlotsAPI","getByDay","day","_error$response14","getAvailable","date","params","_error$response15","staffAPI","_error$response16","getById","_error$response17","getByRole","role","_error$response18","getSchedule","startDate","endDate","_error$response19","getAvailability","_error$response20","staffData","_error$response21","updateAvailability","availabilityData","_error$response22","appointmentsAPI","_error$response23","getDoctorsOnDuty","serviceId","resolve","setTimeout","doctors","firstName","lastName","specialty","rating","shiftStart","shiftEnd","isAvailable","services","staffResponse","fallbackError","_error$response24","getAvailableSlotsByDoctor","doctorId","slotsResponse","availableSlots","_error$response25","_error$response26","getByPatient","patientId","appointmentDate","startTime","endTime","notes","service","name","description","durationMinutes","staff","email","_error$response27","getToday","_error$response28","_error$response29","appointmentData","_error$response30","_error$response31","_error$response32","_error$response33","updateStatus","_error$response34","_error$response35","assignStaff","staffId","_error$response36","bookForPatient","_error$response37","patientsAPI","_error$response38","_error$response39","getByUserId","userId","phone","dateOfBirth","address","patients","patient","find","p","Error","_error$response40","search","query","_error$response41","patientData","_error$response42","doctorAPI","getPatients","_error$response43","getUpcomingAppointments","_error$response44","getAllAppointments","_error$response45","_error$response46","updateShiftSchedule","shiftData","_error$response47","getShiftSchedule","_error$response48","approveAppointment","appointmentId","_error$response49","rejectAppointment","reason","_error$response50","getPatientDetails","_error$response51","createWalkinAppointment","_error$response52","adminAPI","getUsers","_error$response53","getRoles","_error$response54","createStaff","_error$response55","updateUserStatus","isActive","_error$response56","updateUserRole","newRole","_error$response57","getAppointmentStats","_error$response58","getRevenueReport","_error$response59"],"sources":["C:/Project/HopewellClinic/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'https://hopewellapi-azcvcferesfpgjgm.southafricanorth-01.azurewebsites.net/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle common errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Only logout if this is an authentication-related endpoint or if we're in mock mode\n      const isAuthEndpoint = error.config?.url?.includes('/Auth/');\n      const isLoginEndpoint = error.config?.url?.includes('/login');\n      const isRegisterEndpoint = error.config?.url?.includes('/register');\n      \n      // In mock mode, don't auto-logout on 401 errors unless it's an auth endpoint\n      if (MOCK_MODE) {\n        if (isAuthEndpoint && (isLoginEndpoint || isRegisterEndpoint)) {\n          // Only logout on actual login/register failures\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          if (window.location.pathname !== '/auth') {\n            window.location.href = '/auth';\n          }\n        }\n        // For all other 401s in mock mode, just log and continue\n        console.log('⚠️ Mock Mode: Ignoring 401 error for:', error.config?.url);\n      } else {\n        // Real API mode - be more careful about when to logout\n        if (isAuthEndpoint) {\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          if (window.location.pathname !== '/auth') {\n            window.location.href = '/auth';\n          }\n        }\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Real API only - no mock mode\n\n// Auth API\nexport const authAPI = {\n  register: async (userData) => {\n    \n    try {\n      console.log('Attempting registration to:', API_BASE_URL + '/Auth/register');\n      console.log('Registration data:', userData);\n      const response = await api.post('/Auth/register', userData);\n      console.log('Registration response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Registration error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  login: async (credentials) => {\n    \n    try {\n      console.log('Attempting login to:', API_BASE_URL + '/Auth/login');\n      console.log('Credentials:', credentials);\n      const response = await api.post('/Auth/login', credentials);\n      console.log('Login response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Login error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  logout: async () => {\n    \n    try {\n      const response = await api.post('/Auth/logout');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Services API\nexport const servicesAPI = {\n  getAll: async () => {\n    \n    try {\n      console.log('Fetching services from:', API_BASE_URL + '/Services');\n      const response = await api.get('/Services');\n      console.log('Services response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching services:', error);\n      console.error('Error response:', error.response?.data);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  create: async (serviceData) => {\n    try {\n      const response = await api.post('/Services', serviceData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, serviceData) => {\n    try {\n      const response = await api.put(`/Services/${id}`, serviceData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  delete: async (id) => {\n    try {\n      console.log('Deleting service with ID:', id);\n      const response = await api.delete(`/Services/${id}`);\n      console.log('Delete service response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Delete service error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Time Slots API\nexport const timeSlotsAPI = {\n  getByDay: async (day) => {\n    try {\n      const response = await api.get(`/time-slots/by-day/${day}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAvailable: async (date) => {\n    try {\n      const params = date ? { date } : {};\n      const response = await api.get('/time-slots/available', { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Staff API\nexport const staffAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Staff');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/Staff/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getByRole: async (role) => {\n    \n    try {\n      const response = await api.get(`/Staff/by-role/${role}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getSchedule: async (id, startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get(`/Staff/${id}/schedule`, { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAvailability: async (id, date) => {\n    try {\n      const response = await api.get(`/Staff/${id}/availability`, {\n        params: { date }\n      });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, staffData) => {\n    try {\n      const response = await api.put(`/Staff/${id}`, staffData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateAvailability: async (id, availabilityData) => {\n    try {\n      const response = await api.post(`/Staff/${id}/availability`, availabilityData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Appointments API\nexport const appointmentsAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Appointments');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getDoctorsOnDuty: async (date, serviceId = null) => {\n    if (MOCK_MODE) {\n      // Mock doctors on duty - by default all doctors are on duty\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve({\n            doctors: [\n              {\n                id: \"doctor-1\",\n                firstName: \"John\",\n                lastName: \"Smith\",\n                specialty: \"Cardiology\",\n                rating: 4.8,\n                shiftStart: \"09:00\",\n                shiftEnd: \"17:00\",\n                isAvailable: true,\n                services: [\"consultation\", \"follow-up\"]\n              },\n              {\n                id: \"doctor-2\",\n                firstName: \"Sarah\",\n                lastName: \"Johnson\",\n                specialty: \"Pediatrics\",\n                rating: 4.9,\n                shiftStart: \"08:00\",\n                shiftEnd: \"16:00\",\n                isAvailable: true,\n                services: [\"consultation\", \"vaccination\"]\n              },\n              {\n                id: \"doctor-3\",\n                firstName: \"Michael\",\n                lastName: \"Brown\",\n                specialty: \"General Medicine\",\n                rating: 4.7,\n                shiftStart: \"10:00\",\n                shiftEnd: \"18:00\",\n                isAvailable: true,\n                services: [\"consultation\", \"checkup\"]\n              }\n            ]\n          });\n        }, 500);\n      });\n    }\n    \n    try {\n      const params = { date };\n      if (serviceId) params.serviceId = serviceId;\n      \n      const response = await api.get('/Appointments/doctors-on-duty', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching doctors on duty:', error);\n      // Fallback to existing staff API if new endpoint doesn't exist\n      try {\n        const staffResponse = await api.get('/Staff/by-role/doctor');\n        return { doctors: staffResponse.data };\n      } catch (fallbackError) {\n        throw error.response?.data || error.message;\n      }\n    }\n  },\n\n  getAvailableSlotsByDoctor: async (doctorId, date, serviceId = null) => {\n    try {\n      const params = { doctorId, date };\n      if (serviceId) params.serviceId = serviceId;\n      \n      const response = await api.get('/Appointments/available-slots-by-doctor', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching doctor-specific slots:', error);\n      // Fallback to existing available slots API\n      try {\n        const slotsResponse = await api.get('/Appointments/available-slots', { params: { date } });\n        return { availableSlots: slotsResponse.data };\n      } catch (fallbackError) {\n        throw error.response?.data || error.message;\n      }\n    }\n  },\n\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/Appointments/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getByPatient: async (patientId) => {\n    if (MOCK_MODE) {\n      console.log('🔧 Mock Mode: Returning mock appointments for patient:', patientId);\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve([\n            {\n              id: '1',\n              appointmentDate: '2024-01-15',\n              startTime: '09:00:00',\n              endTime: '09:30:00',\n              status: 'confirmed',\n              notes: 'Regular checkup',\n              service: { id: '1', name: 'General Consultation', description: 'Basic health checkup', durationMinutes: 30 },\n              staff: { firstName: 'Dr. John', lastName: 'Smith', email: 'doctor@hopewell.com' }\n            },\n            {\n              id: '2',\n              appointmentDate: '2024-01-20',\n              startTime: '14:00:00',\n              endTime: '14:15:00',\n              status: 'pending',\n              notes: 'Follow-up visit',\n              service: { id: '2', name: 'Follow-up Visit', description: 'Follow-up appointment', durationMinutes: 15 },\n              staff: { firstName: 'Dr. Jane', lastName: 'Doe', email: 'jane@hopewell.com' }\n            }\n          ]);\n        }, 500);\n      });\n    }\n    \n    try {\n      const response = await api.get(`/Appointments/patient/${patientId}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getToday: async () => {\n    try {\n      const response = await api.get('/Appointments/today');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAvailable: async (date) => {\n    try {\n      const response = await api.get('/Appointments/available-slots', {\n        params: { date }\n      });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  create: async (appointmentData) => {\n    try {\n      console.log('Creating appointment with data:', appointmentData);\n      const response = await api.post('/Appointments', appointmentData);\n      console.log('Appointment created successfully:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Appointment creation error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, appointmentData) => {\n    try {\n      const response = await api.put(`/Appointments/${id}`, appointmentData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateStatus: async (id, status) => {\n    try {\n      const response = await api.put(`/Appointments/${id}/status`, { status });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  delete: async (id) => {\n    try {\n      const response = await api.delete(`/Appointments/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  assignStaff: async (id, staffId) => {\n    try {\n      const response = await api.post(`/Appointments/${id}/assign-staff`, { staffId });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  bookForPatient: async (appointmentData) => {\n    try {\n      const response = await api.post('/Appointments/book-for-patient', appointmentData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Patients API\nexport const patientsAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Patients');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/Patients/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getByUserId: async (userId) => {\n    if (MOCK_MODE) {\n      console.log('🔧 Mock Mode: Returning mock patient data for user:', userId);\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve({\n            id: 'mock-patient-id',\n            userId: userId,\n            firstName: 'John',\n            lastName: 'Patient',\n            email: 'patient@hopewell.com',\n            phone: '+1234567890',\n            dateOfBirth: '1990-01-01',\n            address: '123 Main St, City, State 12345'\n          });\n        }, 500);\n      });\n    }\n    \n    try {\n      // Get all patients and find the one with matching userId\n      const response = await api.get('/Patients');\n      const patients = response.data;\n      const patient = patients.find(p => p.userId === userId);\n      if (!patient) {\n        throw new Error('Patient not found for this user');\n      }\n      return patient;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  search: async (query) => {\n    try {\n      const response = await api.get('/Patients/search', { params: { query } });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, patientData) => {\n    try {\n      const response = await api.put(`/Patients/${id}`, patientData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Doctor API\nexport const doctorAPI = {\n  getPatients: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/patients`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getUpcomingAppointments: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/appointments/upcoming`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAllAppointments: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/appointments`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getSchedule: async (doctorId, startDate, endDate) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/schedule`, {\n        params: { startDate, endDate }\n      });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateShiftSchedule: async (doctorId, shiftData) => {\n    try {\n      const response = await api.put(`/Doctor/${doctorId}/shifts`, shiftData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getShiftSchedule: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/shifts`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  approveAppointment: async (appointmentId) => {\n    try {\n      const response = await api.put(`/Doctor/appointments/${appointmentId}/approve`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  rejectAppointment: async (appointmentId, reason) => {\n    try {\n      const response = await api.put(`/Doctor/appointments/${appointmentId}/reject`, { reason });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getPatientDetails: async (patientId) => {\n    try {\n      const response = await api.get(`/Doctor/patients/${patientId}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  createWalkinAppointment: async (appointmentData) => {\n    try {\n      const response = await api.post('/Doctor/appointments/walkin', appointmentData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Admin API\nexport const adminAPI = {\n  getUsers: async () => {\n    try {\n      const response = await api.get('/Admin/users');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getRoles: async () => {\n    try {\n      const response = await api.get('/Admin/roles');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  createStaff: async (staffData) => {\n    try {\n      const response = await api.post('/Admin/create-staff', staffData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateUserStatus: async (userId, isActive) => {\n    try {\n      const response = await api.put(`/Admin/users/${userId}`, { isActive });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateUserRole: async (userId, newRole) => {\n    try {\n      const response = await api.put(`/Admin/users/${userId}/role`, { newRole });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAppointmentStats: async (startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get('/Admin/reports/appointment-stats', { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getRevenueReport: async (startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get('/Admin/reports/revenue', { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}