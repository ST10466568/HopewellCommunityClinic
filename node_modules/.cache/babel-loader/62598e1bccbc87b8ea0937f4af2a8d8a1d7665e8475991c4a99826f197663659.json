{"ast":null,"code":"import _objectSpread from\"C:/Project/HopewellClinic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import axios from'axios';const API_BASE_URL='https://hopewellapi-azcvcferesfpgjgm.southafricanorth-01.azurewebsites.net/api';// Create axios instance with default config\nconst api=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});// Request interceptor to add auth token\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>{return Promise.reject(error);});// Response interceptor to handle common errors\napi.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){// Token expired or invalid - only redirect if not already on auth page\nlocalStorage.removeItem('token');localStorage.removeItem('user');if(window.location.pathname!=='/auth'){window.location.href='/auth';}}return Promise.reject(error);});// Mock API for testing when backend is not available\nconst MOCK_MODE=false;// Set to false when backend is running\n// Auth API\nexport const authAPI={register:async userData=>{if(MOCK_MODE){// Mock successful registration\nreturn new Promise(resolve=>{setTimeout(()=>{resolve({message:\"User registered successfully.\"});},1000);});}try{console.log('Attempting registration to:',API_BASE_URL+'/Auth/register');console.log('Registration data:',userData);const response=await api.post('/Auth/register',userData);console.log('Registration response:',response.data);return response.data;}catch(error){var _error$response2,_error$response3,_error$response4;console.error('Registration error:',error);console.error('Error response:',(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data);console.error('Error status:',(_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status);throw((_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.data)||error.message;}},login:async credentials=>{if(MOCK_MODE){// Mock successful login\nreturn new Promise(resolve=>{setTimeout(()=>{resolve({token:\"mock-jwt-token-\"+Date.now(),user:{id:\"mock-user-id\",email:credentials.email,firstName:\"Mock\",lastName:\"User\",roles:[\"patient\"]}});},1000);});}try{console.log('Attempting login to:',API_BASE_URL+'/Auth/login');console.log('Credentials:',credentials);const response=await api.post('/Auth/login',credentials);console.log('Login response:',response.data);return response.data;}catch(error){var _error$response5,_error$response6,_error$response7;console.error('Login error:',error);console.error('Error response:',(_error$response5=error.response)===null||_error$response5===void 0?void 0:_error$response5.data);console.error('Error status:',(_error$response6=error.response)===null||_error$response6===void 0?void 0:_error$response6.status);throw((_error$response7=error.response)===null||_error$response7===void 0?void 0:_error$response7.data)||error.message;}},logout:async()=>{if(MOCK_MODE){// Mock successful logout\nreturn new Promise(resolve=>{setTimeout(()=>{resolve({message:\"Logged out successfully\"});},500);});}try{const response=await api.post('/Auth/logout');return response.data;}catch(error){var _error$response8;throw((_error$response8=error.response)===null||_error$response8===void 0?void 0:_error$response8.data)||error.message;}}};// Services API\nexport const servicesAPI={getAll:async()=>{try{console.log('Fetching services from:',API_BASE_URL+'/Services');const response=await api.get('/Services');console.log('Services response:',response.data);return response.data;}catch(error){var _error$response9,_error$response0;console.error('Error fetching services:',error);console.error('Error response:',(_error$response9=error.response)===null||_error$response9===void 0?void 0:_error$response9.data);throw((_error$response0=error.response)===null||_error$response0===void 0?void 0:_error$response0.data)||error.message;}},create:async serviceData=>{try{const response=await api.post('/Services',serviceData);return response.data;}catch(error){var _error$response1;throw((_error$response1=error.response)===null||_error$response1===void 0?void 0:_error$response1.data)||error.message;}},update:async(id,serviceData)=>{try{const response=await api.put(\"/Services/\".concat(id),serviceData);return response.data;}catch(error){var _error$response10;throw((_error$response10=error.response)===null||_error$response10===void 0?void 0:_error$response10.data)||error.message;}},delete:async id=>{try{console.log('Deleting service with ID:',id);const response=await api.delete(\"/Services/\".concat(id));console.log('Delete service response:',response.data);return response.data;}catch(error){var _error$response11,_error$response12,_error$response13;console.error('Delete service error:',error);console.error('Error response:',(_error$response11=error.response)===null||_error$response11===void 0?void 0:_error$response11.data);console.error('Error status:',(_error$response12=error.response)===null||_error$response12===void 0?void 0:_error$response12.status);throw((_error$response13=error.response)===null||_error$response13===void 0?void 0:_error$response13.data)||error.message;}}};// Time Slots API\nexport const timeSlotsAPI={getByDay:async day=>{try{const response=await api.get(\"/time-slots/by-day/\".concat(day));return response.data;}catch(error){var _error$response14;throw((_error$response14=error.response)===null||_error$response14===void 0?void 0:_error$response14.data)||error.message;}},getAvailable:async date=>{try{const params=date?{date}:{};const response=await api.get('/time-slots/available',{params});return response.data;}catch(error){var _error$response15;throw((_error$response15=error.response)===null||_error$response15===void 0?void 0:_error$response15.data)||error.message;}}};// Staff API\nexport const staffAPI={getAll:async()=>{try{const response=await api.get('/Staff');return response.data;}catch(error){var _error$response16;throw((_error$response16=error.response)===null||_error$response16===void 0?void 0:_error$response16.data)||error.message;}},getById:async id=>{try{const response=await api.get(\"/Staff/\".concat(id));return response.data;}catch(error){var _error$response17;throw((_error$response17=error.response)===null||_error$response17===void 0?void 0:_error$response17.data)||error.message;}},getByRole:async role=>{try{const response=await api.get(\"/Staff/by-role/\".concat(role));return response.data;}catch(error){var _error$response18;throw((_error$response18=error.response)===null||_error$response18===void 0?void 0:_error$response18.data)||error.message;}},getSchedule:async(id,startDate,endDate)=>{try{const params={};if(startDate)params.startDate=startDate;if(endDate)params.endDate=endDate;const response=await api.get(\"/Staff/\".concat(id,\"/schedule\"),{params});return response.data;}catch(error){var _error$response19;throw((_error$response19=error.response)===null||_error$response19===void 0?void 0:_error$response19.data)||error.message;}},getAvailability:async(id,date)=>{try{const response=await api.get(\"/Staff/\".concat(id,\"/availability\"),{params:{date}});return response.data;}catch(error){var _error$response20;throw((_error$response20=error.response)===null||_error$response20===void 0?void 0:_error$response20.data)||error.message;}},update:async(id,staffData)=>{try{const response=await api.put(\"/Staff/\".concat(id),staffData);return response.data;}catch(error){var _error$response21;throw((_error$response21=error.response)===null||_error$response21===void 0?void 0:_error$response21.data)||error.message;}},updateAvailability:async(id,availabilityData)=>{try{const response=await api.post(\"/Staff/\".concat(id,\"/availability\"),availabilityData);return response.data;}catch(error){var _error$response22;throw((_error$response22=error.response)===null||_error$response22===void 0?void 0:_error$response22.data)||error.message;}}};// Appointments API\nexport const appointmentsAPI={getAll:async()=>{try{const response=await api.get('/Appointments');return response.data;}catch(error){var _error$response23;throw((_error$response23=error.response)===null||_error$response23===void 0?void 0:_error$response23.data)||error.message;}},getById:async id=>{try{const response=await api.get(\"/Appointments/\".concat(id));return response.data;}catch(error){var _error$response24;throw((_error$response24=error.response)===null||_error$response24===void 0?void 0:_error$response24.data)||error.message;}},getByPatient:async patientId=>{try{const response=await api.get(\"/Appointments/patient/\".concat(patientId));return response.data;}catch(error){var _error$response25;throw((_error$response25=error.response)===null||_error$response25===void 0?void 0:_error$response25.data)||error.message;}},getToday:async()=>{try{const response=await api.get('/Appointments/today');return response.data;}catch(error){var _error$response26;throw((_error$response26=error.response)===null||_error$response26===void 0?void 0:_error$response26.data)||error.message;}},getAvailable:async date=>{try{const response=await api.get('/Appointments/available-slots',{params:{date}});return response.data;}catch(error){var _error$response27;throw((_error$response27=error.response)===null||_error$response27===void 0?void 0:_error$response27.data)||error.message;}},create:async appointmentData=>{try{console.log('Creating appointment with data:',appointmentData);const response=await api.post('/Appointments',appointmentData);console.log('Appointment created successfully:',response.data);return response.data;}catch(error){var _error$response28,_error$response29,_error$response30;console.error('Appointment creation error:',error);console.error('Error response:',(_error$response28=error.response)===null||_error$response28===void 0?void 0:_error$response28.data);console.error('Error status:',(_error$response29=error.response)===null||_error$response29===void 0?void 0:_error$response29.status);throw((_error$response30=error.response)===null||_error$response30===void 0?void 0:_error$response30.data)||error.message;}},update:async(id,appointmentData)=>{try{const response=await api.put(\"/Appointments/\".concat(id),appointmentData);return response.data;}catch(error){var _error$response31;throw((_error$response31=error.response)===null||_error$response31===void 0?void 0:_error$response31.data)||error.message;}},updateStatus:async(id,status)=>{try{const response=await api.put(\"/Appointments/\".concat(id,\"/status\"),{status});return response.data;}catch(error){var _error$response32;throw((_error$response32=error.response)===null||_error$response32===void 0?void 0:_error$response32.data)||error.message;}},delete:async id=>{try{const response=await api.delete(\"/Appointments/\".concat(id));return response.data;}catch(error){var _error$response33;throw((_error$response33=error.response)===null||_error$response33===void 0?void 0:_error$response33.data)||error.message;}},assignStaff:async(id,staffId)=>{try{const response=await api.post(\"/Appointments/\".concat(id,\"/assign-staff\"),{staffId});return response.data;}catch(error){var _error$response34;throw((_error$response34=error.response)===null||_error$response34===void 0?void 0:_error$response34.data)||error.message;}},bookForPatient:async appointmentData=>{try{const response=await api.post('/Appointments/book-for-patient',appointmentData);return response.data;}catch(error){var _error$response35;throw((_error$response35=error.response)===null||_error$response35===void 0?void 0:_error$response35.data)||error.message;}},getDoctorsOnDuty:async function(date){let serviceId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;try{const params={date};if(serviceId)params.serviceId=serviceId;console.log('🔍 API: Getting doctors on duty for date:',date);const response=await api.get('/Booking/doctors-on-duty',{params});console.log('✅ API: Doctors on duty response:',response.data);return response.data;}catch(error){var _error$response36,_error$response37,_error$response38,_error$response39;console.error('❌ API: Error fetching doctors on duty:',error);console.error('❌ API: Error status:',(_error$response36=error.response)===null||_error$response36===void 0?void 0:_error$response36.status);// Fallback to existing staff API if new endpoint returns 500 or doesn't exist\nif(((_error$response37=error.response)===null||_error$response37===void 0?void 0:_error$response37.status)===500||((_error$response38=error.response)===null||_error$response38===void 0?void 0:_error$response38.status)===404){try{console.log('🔄 API: Falling back to staff API...');const staffResponse=await api.get('/Staff/by-role/doctor');const doctors=staffResponse.data;// Filter doctors based on their shift schedule for the requested date\nconst availableDoctors=await appointmentsAPI.filterDoctorsByAvailability(doctors,date);console.log('✅ API: Filtered available doctors:',availableDoctors.length);return{doctors:availableDoctors};}catch(fallbackError){console.error('❌ API: Fallback also failed:',fallbackError);// Return empty array instead of throwing to prevent UI crashes\nconsole.log('⚠️ API: Returning empty doctors array due to API failures');return{doctors:[]};}}throw((_error$response39=error.response)===null||_error$response39===void 0?void 0:_error$response39.data)||error.message;}},// Helper function to filter doctors by their availability on a specific date\nfilterDoctorsByAvailability:async(doctors,date)=>{try{const selectedDate=new Date(date);const dayOfWeek=selectedDate.toLocaleDateString('en-US',{weekday:'long'});console.log('🔍 API: Filtering doctors for:',{date,dayOfWeek});const availableDoctors=[];for(const doctor of doctors){try{// Get doctor's shift schedule\nconst shiftResponse=await api.get(\"/Doctor/\".concat(doctor.id,\"/shifts\"));const shiftSchedule=shiftResponse.data;// Check if doctor is available on this day\nconst dayShift=shiftSchedule.find(shift=>shift.dayOfWeek===dayOfWeek&&shift.isActive);if(dayShift){console.log(\"\\u2705 API: Doctor \".concat(doctor.firstName,\" \").concat(doctor.lastName,\" is available on \").concat(dayOfWeek,\" (\").concat(dayShift.startTime,\" - \").concat(dayShift.endTime,\")\"));availableDoctors.push(_objectSpread(_objectSpread({},doctor),{},{shiftStart:dayShift.startTime,shiftEnd:dayShift.endTime,isAvailable:true}));}else{console.log(\"\\u274C API: Doctor \".concat(doctor.firstName,\" \").concat(doctor.lastName,\" is not available on \").concat(dayOfWeek));}}catch(shiftError){console.log(\"\\u26A0\\uFE0F API: Could not check shift schedule for doctor \".concat(doctor.firstName,\" \").concat(doctor.lastName,\", including anyway\"));// If we can't check shift schedule, include the doctor anyway\navailableDoctors.push(_objectSpread(_objectSpread({},doctor),{},{isAvailable:true}));}}return availableDoctors;}catch(error){console.error('❌ API: Error filtering doctors by availability:',error);// Return all doctors if filtering fails\nreturn doctors.map(doctor=>_objectSpread(_objectSpread({},doctor),{},{isAvailable:true}));}},getAvailableSlotsByDoctor:async function(doctorId,date){let serviceId=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;try{// Try the new doctor-specific endpoint first\nconst params={doctorId,date};if(serviceId)params.serviceId=serviceId;const response=await api.get('/Booking/available-slots-by-doctor',{params});return response.data;}catch(error){var _error$response40,_error$response41,_error$response42,_error$response43;console.error('Doctor-specific slots endpoint error:',error);console.error('Error status:',(_error$response40=error.response)===null||_error$response40===void 0?void 0:_error$response40.status);// Fallback to existing available slots API with doctor filter\nif(((_error$response41=error.response)===null||_error$response41===void 0?void 0:_error$response41.status)===500||((_error$response42=error.response)===null||_error$response42===void 0?void 0:_error$response42.status)===404){try{console.log('Falling back to generic slots API...');const params={date,doctorId};if(serviceId)params.serviceId=serviceId;const slotsResponse=await api.get('/Booking/available-slots',{params});return{availableSlots:slotsResponse.data};}catch(fallbackError){console.error('Both slot endpoints failed:',fallbackError);// Return empty array instead of throwing to prevent UI crashes\nconsole.log('Returning empty slots array due to API failures');return{availableSlots:[]};}}throw((_error$response43=error.response)===null||_error$response43===void 0?void 0:_error$response43.data)||error.message;}},getByDoctorAndDate:async(doctorId,date)=>{try{var _response$data,_response$data$appoin,_response$data2;console.log('🔍 API: getByDoctorAndDate called with:',{doctorId,date});console.log('🔍 API: Full URL will be:',\"\".concat(API_BASE_URL,\"/Appointments/doctor/\").concat(doctorId,\"/date/\").concat(date));// Validate doctor ID format\nif(!doctorId||doctorId.length!==36){console.error('❌ API: Invalid doctor ID format:',doctorId);throw new Error('Invalid doctor ID format');}// Validate date format\nif(!date||!date.match(/^\\d{4}-\\d{2}-\\d{2}$/)){console.error('❌ API: Invalid date format:',date);throw new Error('Invalid date format. Expected YYYY-MM-DD');}const response=await api.get(\"/Appointments/doctor/\".concat(doctorId,\"/date/\").concat(date));console.log('✅ API: Direct endpoint response:',response.data);console.log('✅ API: Response length:',((_response$data=response.data)===null||_response$data===void 0?void 0:(_response$data$appoin=_response$data.appointments)===null||_response$data$appoin===void 0?void 0:_response$data$appoin.length)||((_response$data2=response.data)===null||_response$data2===void 0?void 0:_response$data2.length)||0);// Handle the expected response format: { appointments: [...], totalAppointmentsFound: N }\nlet appointments=[];if(response.data&&response.data.appointments){appointments=response.data.appointments;console.log('✅ API: Extracted appointments from response.appointments:',appointments.length);}else if(Array.isArray(response.data)){appointments=response.data;console.log('✅ API: Response is direct array:',appointments.length);}// If the direct endpoint returns empty array, try the fallback anyway\nif(!appointments||appointments.length===0){console.log('⚠️ API: Direct endpoint returned empty array, trying fallback...');throw new Error('Direct endpoint returned empty array');}console.log('✅ API: Successfully retrieved appointments from direct endpoint:',appointments.length);return appointments;}catch(error){var _error$response44,_error$response45,_error$response46,_error$response47,_error$response48;console.error('❌ API: Doctor-specific date endpoint error:',error);console.error('❌ API: Error status:',(_error$response44=error.response)===null||_error$response44===void 0?void 0:_error$response44.status);console.error('❌ API: Error response:',(_error$response45=error.response)===null||_error$response45===void 0?void 0:_error$response45.data);// Fallback: Get all appointments and filter on the frontend\nif(((_error$response46=error.response)===null||_error$response46===void 0?void 0:_error$response46.status)===404||((_error$response47=error.response)===null||_error$response47===void 0?void 0:_error$response47.status)===500||error.message==='Direct endpoint returned empty array'){try{console.log('🔄 API: Falling back to filtering all appointments...');console.log('🎯 API: Looking for doctor ID:',doctorId);console.log('📅 API: Looking for date:',date);// Use the new public endpoint instead of the authenticated one\nconst allAppointments=await api.get('/Appointments/all-appointments');const appointments=allAppointments.data;console.log('📋 API: Total appointments fetched:',appointments.length);console.log('📋 API: Sample appointment structure:',appointments[0]);console.log('📋 API: Full appointment structure keys:',Object.keys(appointments[0]));// Let's examine all appointments on the target date to see their structure\nconst appointmentsOnDate=appointments.filter(apt=>{const appointmentDate=new Date(apt.appointmentDate).toISOString().split('T')[0];return appointmentDate===date;});console.log('📅 API: Appointments on target date:',appointmentsOnDate.length);console.log('📅 API: Sample appointment on date:',appointmentsOnDate[0]);// Filter by doctor ID (check both staffId and doctorId fields)\nconst doctorAppointments=appointmentsOnDate.filter(apt=>{const matchesStaffId=apt.staffId===doctorId;const matchesDoctorId=apt.doctorId===doctorId;console.log(\"\\uD83D\\uDD0D API: Checking appointment \".concat(apt.id,\": staffId=\").concat(apt.staffId,\", doctorId=\").concat(apt.doctorId,\", matchesStaffId=\").concat(matchesStaffId,\", matchesDoctorId=\").concat(matchesDoctorId));return matchesStaffId||matchesDoctorId;});console.log('👨‍⚕️ API: Doctor-specific appointments found:',doctorAppointments.length);console.log('👨‍⚕️ API: Doctor appointments:',doctorAppointments);return doctorAppointments;}catch(fallbackError){console.error('❌ API: Fallback also failed:',fallbackError);throw fallbackError;}}throw((_error$response48=error.response)===null||_error$response48===void 0?void 0:_error$response48.data)||error.message;}}};// Patients API\nexport const patientsAPI={getAll:async()=>{try{const response=await api.get('/Patients');return response.data;}catch(error){var _error$response49;throw((_error$response49=error.response)===null||_error$response49===void 0?void 0:_error$response49.data)||error.message;}},getById:async id=>{try{const response=await api.get(\"/Patients/\".concat(id));return response.data;}catch(error){var _error$response50;throw((_error$response50=error.response)===null||_error$response50===void 0?void 0:_error$response50.data)||error.message;}},getByUserId:async userId=>{try{// Get all patients and find the one with matching userId\nconst response=await api.get('/Patients');const patients=response.data;const patient=patients.find(p=>p.userId===userId);if(!patient){throw new Error('Patient not found for this user');}return patient;}catch(error){var _error$response51;throw((_error$response51=error.response)===null||_error$response51===void 0?void 0:_error$response51.data)||error.message;}},search:async query=>{try{const response=await api.get('/Patients/search',{params:{query}});return response.data;}catch(error){var _error$response52;throw((_error$response52=error.response)===null||_error$response52===void 0?void 0:_error$response52.data)||error.message;}},update:async(id,patientData)=>{try{const response=await api.put(\"/Patients/\".concat(id),patientData);return response.data;}catch(error){var _error$response53;throw((_error$response53=error.response)===null||_error$response53===void 0?void 0:_error$response53.data)||error.message;}}};// Doctor API\nexport const doctorAPI={getPatients:async doctorId=>{try{const response=await api.get(\"/Doctor/\".concat(doctorId,\"/patients\"));return response.data;}catch(error){var _error$response54;throw((_error$response54=error.response)===null||_error$response54===void 0?void 0:_error$response54.data)||error.message;}},getUpcomingAppointments:async doctorId=>{try{const response=await api.get(\"/Doctor/\".concat(doctorId,\"/appointments/upcoming\"));return response.data;}catch(error){var _error$response55;throw((_error$response55=error.response)===null||_error$response55===void 0?void 0:_error$response55.data)||error.message;}},getAllAppointments:async doctorId=>{try{const response=await api.get(\"/Doctor/\".concat(doctorId,\"/appointments\"));return response.data;}catch(error){var _error$response56;throw((_error$response56=error.response)===null||_error$response56===void 0?void 0:_error$response56.data)||error.message;}},getSchedule:async(doctorId,startDate,endDate)=>{try{const response=await api.get(\"/Doctor/\".concat(doctorId,\"/schedule\"),{params:{startDate,endDate}});return response.data;}catch(error){var _error$response57;throw((_error$response57=error.response)===null||_error$response57===void 0?void 0:_error$response57.data)||error.message;}},approveAppointment:async appointmentId=>{try{const response=await api.put(\"/Doctor/appointments/\".concat(appointmentId,\"/approve\"));return response.data;}catch(error){var _error$response58;throw((_error$response58=error.response)===null||_error$response58===void 0?void 0:_error$response58.data)||error.message;}},rejectAppointment:async(appointmentId,reason)=>{try{const response=await api.put(\"/Doctor/appointments/\".concat(appointmentId,\"/reject\"),{reason});return response.data;}catch(error){var _error$response59;throw((_error$response59=error.response)===null||_error$response59===void 0?void 0:_error$response59.data)||error.message;}},getPatientDetails:async patientId=>{try{const response=await api.get(\"/Doctor/patients/\".concat(patientId));return response.data;}catch(error){var _error$response60;throw((_error$response60=error.response)===null||_error$response60===void 0?void 0:_error$response60.data)||error.message;}},createWalkinAppointment:async appointmentData=>{try{const response=await api.post('/Doctor/appointments/walkin',appointmentData);return response.data;}catch(error){var _error$response61;throw((_error$response61=error.response)===null||_error$response61===void 0?void 0:_error$response61.data)||error.message;}},getShiftSchedule:async doctorId=>{try{const response=await api.get(\"/Doctor/\".concat(doctorId,\"/shifts\"));return response.data;}catch(error){var _error$response62;throw((_error$response62=error.response)===null||_error$response62===void 0?void 0:_error$response62.data)||error.message;}},updateShiftSchedule:async(doctorId,shiftData)=>{try{const response=await api.put(\"/Doctor/\".concat(doctorId,\"/shifts\"),shiftData);return response.data;}catch(error){var _error$response63;throw((_error$response63=error.response)===null||_error$response63===void 0?void 0:_error$response63.data)||error.message;}}};// Admin API\nexport const adminAPI={getUsers:async()=>{try{const response=await api.get('/Admin/users');return response.data;}catch(error){var _error$response64;throw((_error$response64=error.response)===null||_error$response64===void 0?void 0:_error$response64.data)||error.message;}},getRoles:async()=>{try{const response=await api.get('/Admin/roles');return response.data;}catch(error){var _error$response65;throw((_error$response65=error.response)===null||_error$response65===void 0?void 0:_error$response65.data)||error.message;}},createStaff:async staffData=>{try{const response=await api.post('/Admin/create-staff',staffData);return response.data;}catch(error){var _error$response66;throw((_error$response66=error.response)===null||_error$response66===void 0?void 0:_error$response66.data)||error.message;}},updateUserStatus:async(userId,isActive)=>{try{const response=await api.put(\"/Admin/users/\".concat(userId),{isActive});return response.data;}catch(error){var _error$response67;throw((_error$response67=error.response)===null||_error$response67===void 0?void 0:_error$response67.data)||error.message;}},updateUserRole:async(userId,newRole)=>{try{const response=await api.put(\"/Admin/users/\".concat(userId,\"/role\"),{newRole});return response.data;}catch(error){var _error$response68;throw((_error$response68=error.response)===null||_error$response68===void 0?void 0:_error$response68.data)||error.message;}},getAppointmentStats:async(startDate,endDate)=>{try{const params={};if(startDate)params.startDate=startDate;if(endDate)params.endDate=endDate;const response=await api.get('/Admin/reports/appointment-stats',{params});return response.data;}catch(error){var _error$response69;throw((_error$response69=error.response)===null||_error$response69===void 0?void 0:_error$response69.data)||error.message;}},getRevenueReport:async(startDate,endDate)=>{try{const params={};if(startDate)params.startDate=startDate;if(endDate)params.endDate=endDate;const response=await api.get('/Admin/reports/revenue',{params});return response.data;}catch(error){var _error$response70;throw((_error$response70=error.response)===null||_error$response70===void 0?void 0:_error$response70.data)||error.message;}}};export default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","error","Promise","reject","response","_error$response","status","removeItem","window","location","pathname","href","MOCK_MODE","authAPI","register","userData","resolve","setTimeout","message","console","log","post","data","_error$response2","_error$response3","_error$response4","login","credentials","Date","now","user","id","email","firstName","lastName","roles","_error$response5","_error$response6","_error$response7","logout","_error$response8","servicesAPI","getAll","get","_error$response9","_error$response0","serviceData","_error$response1","update","put","_error$response10","delete","_error$response11","_error$response12","_error$response13","timeSlotsAPI","getByDay","day","_error$response14","getAvailable","date","params","_error$response15","staffAPI","_error$response16","getById","_error$response17","getByRole","role","_error$response18","getSchedule","startDate","endDate","_error$response19","getAvailability","_error$response20","staffData","_error$response21","updateAvailability","availabilityData","_error$response22","appointmentsAPI","_error$response23","_error$response24","getByPatient","patientId","_error$response25","getToday","_error$response26","_error$response27","appointmentData","_error$response28","_error$response29","_error$response30","_error$response31","updateStatus","_error$response32","_error$response33","assignStaff","staffId","_error$response34","bookForPatient","_error$response35","getDoctorsOnDuty","serviceId","arguments","length","undefined","_error$response36","_error$response37","_error$response38","_error$response39","staffResponse","doctors","availableDoctors","filterDoctorsByAvailability","fallbackError","selectedDate","dayOfWeek","toLocaleDateString","weekday","doctor","shiftResponse","shiftSchedule","dayShift","find","shift","isActive","startTime","endTime","push","_objectSpread","shiftStart","shiftEnd","isAvailable","shiftError","map","getAvailableSlotsByDoctor","doctorId","_error$response40","_error$response41","_error$response42","_error$response43","slotsResponse","availableSlots","getByDoctorAndDate","_response$data","_response$data$appoin","_response$data2","Error","match","appointments","Array","isArray","_error$response44","_error$response45","_error$response46","_error$response47","_error$response48","allAppointments","Object","keys","appointmentsOnDate","filter","apt","appointmentDate","toISOString","split","doctorAppointments","matchesStaffId","matchesDoctorId","patientsAPI","_error$response49","_error$response50","getByUserId","userId","patients","patient","p","_error$response51","search","query","_error$response52","patientData","_error$response53","doctorAPI","getPatients","_error$response54","getUpcomingAppointments","_error$response55","getAllAppointments","_error$response56","_error$response57","approveAppointment","appointmentId","_error$response58","rejectAppointment","reason","_error$response59","getPatientDetails","_error$response60","createWalkinAppointment","_error$response61","getShiftSchedule","_error$response62","updateShiftSchedule","shiftData","_error$response63","adminAPI","getUsers","_error$response64","getRoles","_error$response65","createStaff","_error$response66","updateUserStatus","_error$response67","updateUserRole","newRole","_error$response68","getAppointmentStats","_error$response69","getRevenueReport","_error$response70"],"sources":["C:/Project/HopewellClinic/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'https://hopewellapi-azcvcferesfpgjgm.southafricanorth-01.azurewebsites.net/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle common errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Token expired or invalid - only redirect if not already on auth page\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      if (window.location.pathname !== '/auth') {\n        window.location.href = '/auth';\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Mock API for testing when backend is not available\nconst MOCK_MODE = false; // Set to false when backend is running\n\n// Auth API\nexport const authAPI = {\n  register: async (userData) => {\n    if (MOCK_MODE) {\n      // Mock successful registration\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve({ message: \"User registered successfully.\" });\n        }, 1000);\n      });\n    }\n    \n    try {\n      console.log('Attempting registration to:', API_BASE_URL + '/Auth/register');\n      console.log('Registration data:', userData);\n      const response = await api.post('/Auth/register', userData);\n      console.log('Registration response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Registration error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  login: async (credentials) => {\n    if (MOCK_MODE) {\n      // Mock successful login\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve({\n            token: \"mock-jwt-token-\" + Date.now(),\n            user: {\n              id: \"mock-user-id\",\n              email: credentials.email,\n              firstName: \"Mock\",\n              lastName: \"User\",\n              roles: [\"patient\"]\n            }\n          });\n        }, 1000);\n      });\n    }\n    \n    try {\n      console.log('Attempting login to:', API_BASE_URL + '/Auth/login');\n      console.log('Credentials:', credentials);\n      const response = await api.post('/Auth/login', credentials);\n      console.log('Login response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Login error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  logout: async () => {\n    if (MOCK_MODE) {\n      // Mock successful logout\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve({ message: \"Logged out successfully\" });\n        }, 500);\n      });\n    }\n    \n    try {\n      const response = await api.post('/Auth/logout');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Services API\nexport const servicesAPI = {\n  getAll: async () => {\n    try {\n      console.log('Fetching services from:', API_BASE_URL + '/Services');\n      const response = await api.get('/Services');\n      console.log('Services response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching services:', error);\n      console.error('Error response:', error.response?.data);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  create: async (serviceData) => {\n    try {\n      const response = await api.post('/Services', serviceData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, serviceData) => {\n    try {\n      const response = await api.put(`/Services/${id}`, serviceData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  delete: async (id) => {\n    try {\n      console.log('Deleting service with ID:', id);\n      const response = await api.delete(`/Services/${id}`);\n      console.log('Delete service response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Delete service error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Time Slots API\nexport const timeSlotsAPI = {\n  getByDay: async (day) => {\n    try {\n      const response = await api.get(`/time-slots/by-day/${day}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAvailable: async (date) => {\n    try {\n      const params = date ? { date } : {};\n      const response = await api.get('/time-slots/available', { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Staff API\nexport const staffAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Staff');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/Staff/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getByRole: async (role) => {\n    try {\n      const response = await api.get(`/Staff/by-role/${role}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getSchedule: async (id, startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get(`/Staff/${id}/schedule`, { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAvailability: async (id, date) => {\n    try {\n      const response = await api.get(`/Staff/${id}/availability`, {\n        params: { date }\n      });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, staffData) => {\n    try {\n      const response = await api.put(`/Staff/${id}`, staffData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateAvailability: async (id, availabilityData) => {\n    try {\n      const response = await api.post(`/Staff/${id}/availability`, availabilityData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Appointments API\nexport const appointmentsAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Appointments');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/Appointments/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getByPatient: async (patientId) => {\n    try {\n      const response = await api.get(`/Appointments/patient/${patientId}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getToday: async () => {\n    try {\n      const response = await api.get('/Appointments/today');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAvailable: async (date) => {\n    try {\n      const response = await api.get('/Appointments/available-slots', {\n        params: { date }\n      });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  create: async (appointmentData) => {\n    try {\n      console.log('Creating appointment with data:', appointmentData);\n      const response = await api.post('/Appointments', appointmentData);\n      console.log('Appointment created successfully:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Appointment creation error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, appointmentData) => {\n    try {\n      const response = await api.put(`/Appointments/${id}`, appointmentData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateStatus: async (id, status) => {\n    try {\n      const response = await api.put(`/Appointments/${id}/status`, { status });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  delete: async (id) => {\n    try {\n      const response = await api.delete(`/Appointments/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  assignStaff: async (id, staffId) => {\n    try {\n      const response = await api.post(`/Appointments/${id}/assign-staff`, { staffId });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  bookForPatient: async (appointmentData) => {\n    try {\n      const response = await api.post('/Appointments/book-for-patient', appointmentData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getDoctorsOnDuty: async (date, serviceId = null) => {\n    try {\n      const params = { date };\n      if (serviceId) params.serviceId = serviceId;\n      \n      console.log('🔍 API: Getting doctors on duty for date:', date);\n      const response = await api.get('/Booking/doctors-on-duty', { params });\n      console.log('✅ API: Doctors on duty response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('❌ API: Error fetching doctors on duty:', error);\n      console.error('❌ API: Error status:', error.response?.status);\n      \n      // Fallback to existing staff API if new endpoint returns 500 or doesn't exist\n      if (error.response?.status === 500 || error.response?.status === 404) {\n        try {\n          console.log('🔄 API: Falling back to staff API...');\n          const staffResponse = await api.get('/Staff/by-role/doctor');\n          const doctors = staffResponse.data;\n          \n          // Filter doctors based on their shift schedule for the requested date\n          const availableDoctors = await appointmentsAPI.filterDoctorsByAvailability(doctors, date);\n          console.log('✅ API: Filtered available doctors:', availableDoctors.length);\n          \n          return { doctors: availableDoctors };\n        } catch (fallbackError) {\n          console.error('❌ API: Fallback also failed:', fallbackError);\n          // Return empty array instead of throwing to prevent UI crashes\n          console.log('⚠️ API: Returning empty doctors array due to API failures');\n          return { doctors: [] };\n        }\n      }\n      \n      throw error.response?.data || error.message;\n    }\n  },\n\n  // Helper function to filter doctors by their availability on a specific date\n  filterDoctorsByAvailability: async (doctors, date) => {\n    try {\n      const selectedDate = new Date(date);\n      const dayOfWeek = selectedDate.toLocaleDateString('en-US', { weekday: 'long' });\n      \n      console.log('🔍 API: Filtering doctors for:', { date, dayOfWeek });\n      \n      const availableDoctors = [];\n      \n      for (const doctor of doctors) {\n        try {\n          // Get doctor's shift schedule\n          const shiftResponse = await api.get(`/Doctor/${doctor.id}/shifts`);\n          const shiftSchedule = shiftResponse.data;\n          \n          // Check if doctor is available on this day\n          const dayShift = shiftSchedule.find(shift => \n            shift.dayOfWeek === dayOfWeek && shift.isActive\n          );\n          \n          if (dayShift) {\n            console.log(`✅ API: Doctor ${doctor.firstName} ${doctor.lastName} is available on ${dayOfWeek} (${dayShift.startTime} - ${dayShift.endTime})`);\n            availableDoctors.push({\n              ...doctor,\n              shiftStart: dayShift.startTime,\n              shiftEnd: dayShift.endTime,\n              isAvailable: true\n            });\n          } else {\n            console.log(`❌ API: Doctor ${doctor.firstName} ${doctor.lastName} is not available on ${dayOfWeek}`);\n          }\n        } catch (shiftError) {\n          console.log(`⚠️ API: Could not check shift schedule for doctor ${doctor.firstName} ${doctor.lastName}, including anyway`);\n          // If we can't check shift schedule, include the doctor anyway\n          availableDoctors.push({\n            ...doctor,\n            isAvailable: true\n          });\n        }\n      }\n      \n      return availableDoctors;\n    } catch (error) {\n      console.error('❌ API: Error filtering doctors by availability:', error);\n      // Return all doctors if filtering fails\n      return doctors.map(doctor => ({ ...doctor, isAvailable: true }));\n    }\n  },\n\n  getAvailableSlotsByDoctor: async (doctorId, date, serviceId = null) => {\n    try {\n      // Try the new doctor-specific endpoint first\n      const params = { doctorId, date };\n      if (serviceId) params.serviceId = serviceId;\n      \n      const response = await api.get('/Booking/available-slots-by-doctor', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Doctor-specific slots endpoint error:', error);\n      console.error('Error status:', error.response?.status);\n      \n      // Fallback to existing available slots API with doctor filter\n      if (error.response?.status === 500 || error.response?.status === 404) {\n        try {\n          console.log('Falling back to generic slots API...');\n          const params = { date, doctorId };\n          if (serviceId) params.serviceId = serviceId;\n          \n          const slotsResponse = await api.get('/Booking/available-slots', { params });\n          return { availableSlots: slotsResponse.data };\n        } catch (fallbackError) {\n          console.error('Both slot endpoints failed:', fallbackError);\n          // Return empty array instead of throwing to prevent UI crashes\n          console.log('Returning empty slots array due to API failures');\n          return { availableSlots: [] };\n        }\n      }\n      \n      throw error.response?.data || error.message;\n    }\n  },\n\n  getByDoctorAndDate: async (doctorId, date) => {\n    try {\n      console.log('🔍 API: getByDoctorAndDate called with:', { doctorId, date });\n      console.log('🔍 API: Full URL will be:', `${API_BASE_URL}/Appointments/doctor/${doctorId}/date/${date}`);\n      \n      // Validate doctor ID format\n      if (!doctorId || doctorId.length !== 36) {\n        console.error('❌ API: Invalid doctor ID format:', doctorId);\n        throw new Error('Invalid doctor ID format');\n      }\n      \n      // Validate date format\n      if (!date || !date.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\n        console.error('❌ API: Invalid date format:', date);\n        throw new Error('Invalid date format. Expected YYYY-MM-DD');\n      }\n      \n      const response = await api.get(`/Appointments/doctor/${doctorId}/date/${date}`);\n      console.log('✅ API: Direct endpoint response:', response.data);\n      console.log('✅ API: Response length:', response.data?.appointments?.length || response.data?.length || 0);\n      \n      // Handle the expected response format: { appointments: [...], totalAppointmentsFound: N }\n      let appointments = [];\n      if (response.data && response.data.appointments) {\n        appointments = response.data.appointments;\n        console.log('✅ API: Extracted appointments from response.appointments:', appointments.length);\n      } else if (Array.isArray(response.data)) {\n        appointments = response.data;\n        console.log('✅ API: Response is direct array:', appointments.length);\n      }\n      \n      // If the direct endpoint returns empty array, try the fallback anyway\n      if (!appointments || appointments.length === 0) {\n        console.log('⚠️ API: Direct endpoint returned empty array, trying fallback...');\n        throw new Error('Direct endpoint returned empty array');\n      }\n      \n      console.log('✅ API: Successfully retrieved appointments from direct endpoint:', appointments.length);\n      return appointments;\n    } catch (error) {\n      console.error('❌ API: Doctor-specific date endpoint error:', error);\n      console.error('❌ API: Error status:', error.response?.status);\n      console.error('❌ API: Error response:', error.response?.data);\n      \n      // Fallback: Get all appointments and filter on the frontend\n      if (error.response?.status === 404 || error.response?.status === 500 || error.message === 'Direct endpoint returned empty array') {\n        try {\n          console.log('🔄 API: Falling back to filtering all appointments...');\n          console.log('🎯 API: Looking for doctor ID:', doctorId);\n          console.log('📅 API: Looking for date:', date);\n          \n          // Use the new public endpoint instead of the authenticated one\n          const allAppointments = await api.get('/Appointments/all-appointments');\n          const appointments = allAppointments.data;\n          \n          console.log('📋 API: Total appointments fetched:', appointments.length);\n          console.log('📋 API: Sample appointment structure:', appointments[0]);\n          console.log('📋 API: Full appointment structure keys:', Object.keys(appointments[0]));\n          \n          // Let's examine all appointments on the target date to see their structure\n          const appointmentsOnDate = appointments.filter(apt => {\n            const appointmentDate = new Date(apt.appointmentDate).toISOString().split('T')[0];\n            return appointmentDate === date;\n          });\n          \n          console.log('📅 API: Appointments on target date:', appointmentsOnDate.length);\n          console.log('📅 API: Sample appointment on date:', appointmentsOnDate[0]);\n          \n          // Filter by doctor ID (check both staffId and doctorId fields)\n          const doctorAppointments = appointmentsOnDate.filter(apt => {\n            const matchesStaffId = apt.staffId === doctorId;\n            const matchesDoctorId = apt.doctorId === doctorId;\n            console.log(`🔍 API: Checking appointment ${apt.id}: staffId=${apt.staffId}, doctorId=${apt.doctorId}, matchesStaffId=${matchesStaffId}, matchesDoctorId=${matchesDoctorId}`);\n            return matchesStaffId || matchesDoctorId;\n          });\n          \n          console.log('👨‍⚕️ API: Doctor-specific appointments found:', doctorAppointments.length);\n          console.log('👨‍⚕️ API: Doctor appointments:', doctorAppointments);\n          \n          return doctorAppointments;\n        } catch (fallbackError) {\n          console.error('❌ API: Fallback also failed:', fallbackError);\n          throw fallbackError;\n        }\n      }\n      \n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Patients API\nexport const patientsAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Patients');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/Patients/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getByUserId: async (userId) => {\n    try {\n      // Get all patients and find the one with matching userId\n      const response = await api.get('/Patients');\n      const patients = response.data;\n      const patient = patients.find(p => p.userId === userId);\n      if (!patient) {\n        throw new Error('Patient not found for this user');\n      }\n      return patient;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  search: async (query) => {\n    try {\n      const response = await api.get('/Patients/search', { params: { query } });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, patientData) => {\n    try {\n      const response = await api.put(`/Patients/${id}`, patientData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Doctor API\nexport const doctorAPI = {\n  getPatients: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/patients`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getUpcomingAppointments: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/appointments/upcoming`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAllAppointments: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/appointments`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getSchedule: async (doctorId, startDate, endDate) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/schedule`, {\n        params: { startDate, endDate }\n      });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  approveAppointment: async (appointmentId) => {\n    try {\n      const response = await api.put(`/Doctor/appointments/${appointmentId}/approve`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  rejectAppointment: async (appointmentId, reason) => {\n    try {\n      const response = await api.put(`/Doctor/appointments/${appointmentId}/reject`, { reason });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getPatientDetails: async (patientId) => {\n    try {\n      const response = await api.get(`/Doctor/patients/${patientId}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  createWalkinAppointment: async (appointmentData) => {\n    try {\n      const response = await api.post('/Doctor/appointments/walkin', appointmentData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getShiftSchedule: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/shifts`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateShiftSchedule: async (doctorId, shiftData) => {\n    try {\n      const response = await api.put(`/Doctor/${doctorId}/shifts`, shiftData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Admin API\nexport const adminAPI = {\n  getUsers: async () => {\n    try {\n      const response = await api.get('/Admin/users');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getRoles: async () => {\n    try {\n      const response = await api.get('/Admin/roles');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  createStaff: async (staffData) => {\n    try {\n      const response = await api.post('/Admin/create-staff', staffData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateUserStatus: async (userId, isActive) => {\n    try {\n      const response = await api.put(`/Admin/users/${userId}`, { isActive });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateUserRole: async (userId, newRole) => {\n    try {\n      const response = await api.put(`/Admin/users/${userId}/role`, { newRole });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAppointmentStats: async (startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get('/Admin/reports/appointment-stats', { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getRevenueReport: async (startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get('/Admin/reports/revenue', { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}