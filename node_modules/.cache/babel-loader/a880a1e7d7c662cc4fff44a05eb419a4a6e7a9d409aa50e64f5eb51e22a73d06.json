{"ast":null,"code":"import axios from'axios';const API_BASE_URL='https://hopewellapi-azcvcferesfpgjgm.southafricanorth-01.azurewebsites.net/api';// Create axios instance with default config\nconst api=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});// Request interceptor to add auth token\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>{return Promise.reject(error);});// Response interceptor to handle common errors\napi.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){var _error$config,_error$config$url,_error$config2,_error$config2$url,_error$config3,_error$config3$url;// Only logout if this is an authentication-related endpoint or if we're in mock mode\nconst isAuthEndpoint=(_error$config=error.config)===null||_error$config===void 0?void 0:(_error$config$url=_error$config.url)===null||_error$config$url===void 0?void 0:_error$config$url.includes('/Auth/');const isLoginEndpoint=(_error$config2=error.config)===null||_error$config2===void 0?void 0:(_error$config2$url=_error$config2.url)===null||_error$config2$url===void 0?void 0:_error$config2$url.includes('/login');const isRegisterEndpoint=(_error$config3=error.config)===null||_error$config3===void 0?void 0:(_error$config3$url=_error$config3.url)===null||_error$config3$url===void 0?void 0:_error$config3$url.includes('/register');// In mock mode, don't auto-logout on 401 errors unless it's an auth endpoint\nif(MOCK_MODE){var _error$config4;if(isAuthEndpoint&&(isLoginEndpoint||isRegisterEndpoint)){// Only logout on actual login/register failures\nlocalStorage.removeItem('token');localStorage.removeItem('user');if(window.location.pathname!=='/auth'){window.location.href='/auth';}}// For all other 401s in mock mode, just log and continue\nconsole.log('⚠️ Mock Mode: Ignoring 401 error for:',(_error$config4=error.config)===null||_error$config4===void 0?void 0:_error$config4.url);}else{// Real API mode - be more careful about when to logout\nif(isAuthEndpoint){localStorage.removeItem('token');localStorage.removeItem('user');if(window.location.pathname!=='/auth'){window.location.href='/auth';}}}}return Promise.reject(error);});// Mock API for testing when backend is not available\nconst MOCK_MODE=true;// Set to false when backend is running\n// Auth API\nexport const authAPI={register:async userData=>{if(MOCK_MODE){// Mock successful registration\nreturn new Promise(resolve=>{setTimeout(()=>{resolve({message:\"User registered successfully.\"});},1000);});}try{console.log('Attempting registration to:',API_BASE_URL+'/Auth/register');console.log('Registration data:',userData);const response=await api.post('/Auth/register',userData);console.log('Registration response:',response.data);return response.data;}catch(error){var _error$response2,_error$response3,_error$response4;console.error('Registration error:',error);console.error('Error response:',(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data);console.error('Error status:',(_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status);throw((_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.data)||error.message;}},login:async credentials=>{if(MOCK_MODE){console.log('🔐 Mock Login Attempt:',credentials);// Mock successful login with role detection\nreturn new Promise(resolve=>{setTimeout(()=>{let userRole=\"patient\";let firstName=\"Mock\";let lastName=\"User\";// Detect role based on email\nif(credentials.email.includes('doctor')){userRole=\"doctor\";firstName=\"Dr. John\";lastName=\"Smith\";}else if(credentials.email.includes('nurse')){userRole=\"nurse\";firstName=\"Jane\";lastName=\"Nurse\";}else if(credentials.email.includes('admin')){userRole=\"admin\";firstName=\"Admin\";lastName=\"User\";}else if(credentials.email.includes('patient')){userRole=\"patient\";firstName=\"John\";lastName=\"Patient\";}const mockResponse={token:\"mock-jwt-token-\"+Date.now(),user:{id:\"mock-user-id-\"+userRole,email:credentials.email,firstName:firstName,lastName:lastName,roles:[userRole]}};console.log('✅ Mock Login Success:',mockResponse);resolve(mockResponse);},1000);});}try{console.log('Attempting login to:',API_BASE_URL+'/Auth/login');console.log('Credentials:',credentials);const response=await api.post('/Auth/login',credentials);console.log('Login response:',response.data);return response.data;}catch(error){var _error$response5,_error$response6,_error$response7;console.error('Login error:',error);console.error('Error response:',(_error$response5=error.response)===null||_error$response5===void 0?void 0:_error$response5.data);console.error('Error status:',(_error$response6=error.response)===null||_error$response6===void 0?void 0:_error$response6.status);throw((_error$response7=error.response)===null||_error$response7===void 0?void 0:_error$response7.data)||error.message;}},logout:async()=>{if(MOCK_MODE){// Mock successful logout\nreturn new Promise(resolve=>{setTimeout(()=>{resolve({message:\"Logged out successfully\"});},500);});}try{const response=await api.post('/Auth/logout');return response.data;}catch(error){var _error$response8;throw((_error$response8=error.response)===null||_error$response8===void 0?void 0:_error$response8.data)||error.message;}}};// Services API\nexport const servicesAPI={getAll:async()=>{if(MOCK_MODE){console.log('🔧 Mock Mode: Returning mock services data');return new Promise(resolve=>{setTimeout(()=>{resolve([{id:'1',name:'General Consultation',description:'Basic health checkup',durationMinutes:30},{id:'2',name:'Follow-up Visit',description:'Follow-up appointment',durationMinutes:15},{id:'3',name:'Specialist Consultation',description:'Specialist medical consultation',durationMinutes:45},{id:'4',name:'Emergency Visit',description:'Emergency medical consultation',durationMinutes:60}]);},500);});}try{console.log('Fetching services from:',API_BASE_URL+'/Services');const response=await api.get('/Services');console.log('Services response:',response.data);return response.data;}catch(error){var _error$response9,_error$response0;console.error('Error fetching services:',error);console.error('Error response:',(_error$response9=error.response)===null||_error$response9===void 0?void 0:_error$response9.data);throw((_error$response0=error.response)===null||_error$response0===void 0?void 0:_error$response0.data)||error.message;}},create:async serviceData=>{try{const response=await api.post('/Services',serviceData);return response.data;}catch(error){var _error$response1;throw((_error$response1=error.response)===null||_error$response1===void 0?void 0:_error$response1.data)||error.message;}},update:async(id,serviceData)=>{try{const response=await api.put(\"/Services/\".concat(id),serviceData);return response.data;}catch(error){var _error$response10;throw((_error$response10=error.response)===null||_error$response10===void 0?void 0:_error$response10.data)||error.message;}},delete:async id=>{try{console.log('Deleting service with ID:',id);const response=await api.delete(\"/Services/\".concat(id));console.log('Delete service response:',response.data);return response.data;}catch(error){var _error$response11,_error$response12,_error$response13;console.error('Delete service error:',error);console.error('Error response:',(_error$response11=error.response)===null||_error$response11===void 0?void 0:_error$response11.data);console.error('Error status:',(_error$response12=error.response)===null||_error$response12===void 0?void 0:_error$response12.status);throw((_error$response13=error.response)===null||_error$response13===void 0?void 0:_error$response13.data)||error.message;}}};// Time Slots API\nexport const timeSlotsAPI={getByDay:async day=>{try{const response=await api.get(\"/time-slots/by-day/\".concat(day));return response.data;}catch(error){var _error$response14;throw((_error$response14=error.response)===null||_error$response14===void 0?void 0:_error$response14.data)||error.message;}},getAvailable:async date=>{try{const params=date?{date}:{};const response=await api.get('/time-slots/available',{params});return response.data;}catch(error){var _error$response15;throw((_error$response15=error.response)===null||_error$response15===void 0?void 0:_error$response15.data)||error.message;}}};// Staff API\nexport const staffAPI={getAll:async()=>{try{const response=await api.get('/Staff');return response.data;}catch(error){var _error$response16;throw((_error$response16=error.response)===null||_error$response16===void 0?void 0:_error$response16.data)||error.message;}},getById:async id=>{try{const response=await api.get(\"/Staff/\".concat(id));return response.data;}catch(error){var _error$response17;throw((_error$response17=error.response)===null||_error$response17===void 0?void 0:_error$response17.data)||error.message;}},getByRole:async role=>{if(MOCK_MODE){console.log('🔧 Mock Mode: Returning mock staff data for role:',role);return new Promise(resolve=>{setTimeout(()=>{if(role==='doctor'){resolve([{id:'1',firstName:'Dr. John',lastName:'Smith',email:'doctor@hopewell.com',role:'doctor'},{id:'2',firstName:'Dr. Jane',lastName:'Doe',email:'jane@hopewell.com',role:'doctor'},{id:'3',firstName:'Dr. Michael',lastName:'Johnson',email:'michael@hopewell.com',role:'doctor'}]);}else if(role==='nurse'){resolve([{id:'4',firstName:'Jane',lastName:'Nurse',email:'nurse@hopewell.com',role:'nurse'},{id:'5',firstName:'Sarah',lastName:'Wilson',email:'sarah@hopewell.com',role:'nurse'}]);}else{resolve([]);}},500);});}try{const response=await api.get(\"/Staff/by-role/\".concat(role));return response.data;}catch(error){var _error$response18;throw((_error$response18=error.response)===null||_error$response18===void 0?void 0:_error$response18.data)||error.message;}},getSchedule:async(id,startDate,endDate)=>{try{const params={};if(startDate)params.startDate=startDate;if(endDate)params.endDate=endDate;const response=await api.get(\"/Staff/\".concat(id,\"/schedule\"),{params});return response.data;}catch(error){var _error$response19;throw((_error$response19=error.response)===null||_error$response19===void 0?void 0:_error$response19.data)||error.message;}},getAvailability:async(id,date)=>{try{const response=await api.get(\"/Staff/\".concat(id,\"/availability\"),{params:{date}});return response.data;}catch(error){var _error$response20;throw((_error$response20=error.response)===null||_error$response20===void 0?void 0:_error$response20.data)||error.message;}},update:async(id,staffData)=>{try{const response=await api.put(\"/Staff/\".concat(id),staffData);return response.data;}catch(error){var _error$response21;throw((_error$response21=error.response)===null||_error$response21===void 0?void 0:_error$response21.data)||error.message;}},updateAvailability:async(id,availabilityData)=>{try{const response=await api.post(\"/Staff/\".concat(id,\"/availability\"),availabilityData);return response.data;}catch(error){var _error$response22;throw((_error$response22=error.response)===null||_error$response22===void 0?void 0:_error$response22.data)||error.message;}}};// Appointments API\nexport const appointmentsAPI={getAll:async()=>{try{const response=await api.get('/Appointments');return response.data;}catch(error){var _error$response23;throw((_error$response23=error.response)===null||_error$response23===void 0?void 0:_error$response23.data)||error.message;}},getDoctorsOnDuty:async function(date){let serviceId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;if(MOCK_MODE){// Mock doctors on duty - by default all doctors are on duty\nreturn new Promise(resolve=>{setTimeout(()=>{resolve({doctors:[{id:\"doctor-1\",firstName:\"John\",lastName:\"Smith\",specialty:\"Cardiology\",rating:4.8,shiftStart:\"09:00\",shiftEnd:\"17:00\",isAvailable:true,services:[\"consultation\",\"follow-up\"]},{id:\"doctor-2\",firstName:\"Sarah\",lastName:\"Johnson\",specialty:\"Pediatrics\",rating:4.9,shiftStart:\"08:00\",shiftEnd:\"16:00\",isAvailable:true,services:[\"consultation\",\"vaccination\"]},{id:\"doctor-3\",firstName:\"Michael\",lastName:\"Brown\",specialty:\"General Medicine\",rating:4.7,shiftStart:\"10:00\",shiftEnd:\"18:00\",isAvailable:true,services:[\"consultation\",\"checkup\"]}]});},500);});}try{const params={date};if(serviceId)params.serviceId=serviceId;const response=await api.get('/Appointments/doctors-on-duty',{params});return response.data;}catch(error){console.error('Error fetching doctors on duty:',error);// Fallback to existing staff API if new endpoint doesn't exist\ntry{const staffResponse=await api.get('/Staff/by-role/doctor');return{doctors:staffResponse.data};}catch(fallbackError){var _error$response24;throw((_error$response24=error.response)===null||_error$response24===void 0?void 0:_error$response24.data)||error.message;}}},getAvailableSlotsByDoctor:async function(doctorId,date){let serviceId=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;try{const params={doctorId,date};if(serviceId)params.serviceId=serviceId;const response=await api.get('/Appointments/available-slots-by-doctor',{params});return response.data;}catch(error){console.error('Error fetching doctor-specific slots:',error);// Fallback to existing available slots API\ntry{const slotsResponse=await api.get('/Appointments/available-slots',{params:{date}});return{availableSlots:slotsResponse.data};}catch(fallbackError){var _error$response25;throw((_error$response25=error.response)===null||_error$response25===void 0?void 0:_error$response25.data)||error.message;}}},getById:async id=>{try{const response=await api.get(\"/Appointments/\".concat(id));return response.data;}catch(error){var _error$response26;throw((_error$response26=error.response)===null||_error$response26===void 0?void 0:_error$response26.data)||error.message;}},getByPatient:async patientId=>{if(MOCK_MODE){console.log('🔧 Mock Mode: Returning mock appointments for patient:',patientId);return new Promise(resolve=>{setTimeout(()=>{resolve([{id:'1',appointmentDate:'2024-01-15',startTime:'09:00:00',endTime:'09:30:00',status:'confirmed',notes:'Regular checkup',service:{id:'1',name:'General Consultation',description:'Basic health checkup',durationMinutes:30},staff:{firstName:'Dr. John',lastName:'Smith',email:'doctor@hopewell.com'}},{id:'2',appointmentDate:'2024-01-20',startTime:'14:00:00',endTime:'14:15:00',status:'pending',notes:'Follow-up visit',service:{id:'2',name:'Follow-up Visit',description:'Follow-up appointment',durationMinutes:15},staff:{firstName:'Dr. Jane',lastName:'Doe',email:'jane@hopewell.com'}}]);},500);});}try{const response=await api.get(\"/Appointments/patient/\".concat(patientId));return response.data;}catch(error){var _error$response27;throw((_error$response27=error.response)===null||_error$response27===void 0?void 0:_error$response27.data)||error.message;}},getToday:async()=>{try{const response=await api.get('/Appointments/today');return response.data;}catch(error){var _error$response28;throw((_error$response28=error.response)===null||_error$response28===void 0?void 0:_error$response28.data)||error.message;}},getAvailable:async date=>{try{const response=await api.get('/Appointments/available-slots',{params:{date}});return response.data;}catch(error){var _error$response29;throw((_error$response29=error.response)===null||_error$response29===void 0?void 0:_error$response29.data)||error.message;}},create:async appointmentData=>{try{console.log('Creating appointment with data:',appointmentData);const response=await api.post('/Appointments',appointmentData);console.log('Appointment created successfully:',response.data);return response.data;}catch(error){var _error$response30,_error$response31,_error$response32;console.error('Appointment creation error:',error);console.error('Error response:',(_error$response30=error.response)===null||_error$response30===void 0?void 0:_error$response30.data);console.error('Error status:',(_error$response31=error.response)===null||_error$response31===void 0?void 0:_error$response31.status);throw((_error$response32=error.response)===null||_error$response32===void 0?void 0:_error$response32.data)||error.message;}},update:async(id,appointmentData)=>{try{const response=await api.put(\"/Appointments/\".concat(id),appointmentData);return response.data;}catch(error){var _error$response33;throw((_error$response33=error.response)===null||_error$response33===void 0?void 0:_error$response33.data)||error.message;}},updateStatus:async(id,status)=>{try{const response=await api.put(\"/Appointments/\".concat(id,\"/status\"),{status});return response.data;}catch(error){var _error$response34;throw((_error$response34=error.response)===null||_error$response34===void 0?void 0:_error$response34.data)||error.message;}},delete:async id=>{try{const response=await api.delete(\"/Appointments/\".concat(id));return response.data;}catch(error){var _error$response35;throw((_error$response35=error.response)===null||_error$response35===void 0?void 0:_error$response35.data)||error.message;}},assignStaff:async(id,staffId)=>{try{const response=await api.post(\"/Appointments/\".concat(id,\"/assign-staff\"),{staffId});return response.data;}catch(error){var _error$response36;throw((_error$response36=error.response)===null||_error$response36===void 0?void 0:_error$response36.data)||error.message;}},bookForPatient:async appointmentData=>{try{const response=await api.post('/Appointments/book-for-patient',appointmentData);return response.data;}catch(error){var _error$response37;throw((_error$response37=error.response)===null||_error$response37===void 0?void 0:_error$response37.data)||error.message;}}};// Patients API\nexport const patientsAPI={getAll:async()=>{try{const response=await api.get('/Patients');return response.data;}catch(error){var _error$response38;throw((_error$response38=error.response)===null||_error$response38===void 0?void 0:_error$response38.data)||error.message;}},getById:async id=>{try{const response=await api.get(\"/Patients/\".concat(id));return response.data;}catch(error){var _error$response39;throw((_error$response39=error.response)===null||_error$response39===void 0?void 0:_error$response39.data)||error.message;}},getByUserId:async userId=>{if(MOCK_MODE){console.log('🔧 Mock Mode: Returning mock patient data for user:',userId);return new Promise(resolve=>{setTimeout(()=>{resolve({id:'mock-patient-id',userId:userId,firstName:'John',lastName:'Patient',email:'patient@hopewell.com',phone:'+1234567890',dateOfBirth:'1990-01-01',address:'123 Main St, City, State 12345'});},500);});}try{// Get all patients and find the one with matching userId\nconst response=await api.get('/Patients');const patients=response.data;const patient=patients.find(p=>p.userId===userId);if(!patient){throw new Error('Patient not found for this user');}return patient;}catch(error){var _error$response40;throw((_error$response40=error.response)===null||_error$response40===void 0?void 0:_error$response40.data)||error.message;}},search:async query=>{try{const response=await api.get('/Patients/search',{params:{query}});return response.data;}catch(error){var _error$response41;throw((_error$response41=error.response)===null||_error$response41===void 0?void 0:_error$response41.data)||error.message;}},update:async(id,patientData)=>{try{const response=await api.put(\"/Patients/\".concat(id),patientData);return response.data;}catch(error){var _error$response42;throw((_error$response42=error.response)===null||_error$response42===void 0?void 0:_error$response42.data)||error.message;}}};// Doctor API\nexport const doctorAPI={getPatients:async doctorId=>{try{const response=await api.get(\"/Doctor/\".concat(doctorId,\"/patients\"));return response.data;}catch(error){var _error$response43;throw((_error$response43=error.response)===null||_error$response43===void 0?void 0:_error$response43.data)||error.message;}},getUpcomingAppointments:async doctorId=>{try{const response=await api.get(\"/Doctor/\".concat(doctorId,\"/appointments/upcoming\"));return response.data;}catch(error){var _error$response44;throw((_error$response44=error.response)===null||_error$response44===void 0?void 0:_error$response44.data)||error.message;}},getAllAppointments:async doctorId=>{try{const response=await api.get(\"/Doctor/\".concat(doctorId,\"/appointments\"));return response.data;}catch(error){var _error$response45;throw((_error$response45=error.response)===null||_error$response45===void 0?void 0:_error$response45.data)||error.message;}},getSchedule:async(doctorId,startDate,endDate)=>{try{const response=await api.get(\"/Doctor/\".concat(doctorId,\"/schedule\"),{params:{startDate,endDate}});return response.data;}catch(error){var _error$response46;throw((_error$response46=error.response)===null||_error$response46===void 0?void 0:_error$response46.data)||error.message;}},updateShiftSchedule:async(doctorId,shiftData)=>{try{const response=await api.put(\"/Doctor/\".concat(doctorId,\"/shifts\"),shiftData);return response.data;}catch(error){var _error$response47;throw((_error$response47=error.response)===null||_error$response47===void 0?void 0:_error$response47.data)||error.message;}},getShiftSchedule:async doctorId=>{try{const response=await api.get(\"/Doctor/\".concat(doctorId,\"/shifts\"));return response.data;}catch(error){var _error$response48;throw((_error$response48=error.response)===null||_error$response48===void 0?void 0:_error$response48.data)||error.message;}},approveAppointment:async appointmentId=>{try{const response=await api.put(\"/Doctor/appointments/\".concat(appointmentId,\"/approve\"));return response.data;}catch(error){var _error$response49;throw((_error$response49=error.response)===null||_error$response49===void 0?void 0:_error$response49.data)||error.message;}},rejectAppointment:async(appointmentId,reason)=>{try{const response=await api.put(\"/Doctor/appointments/\".concat(appointmentId,\"/reject\"),{reason});return response.data;}catch(error){var _error$response50;throw((_error$response50=error.response)===null||_error$response50===void 0?void 0:_error$response50.data)||error.message;}},getPatientDetails:async patientId=>{try{const response=await api.get(\"/Doctor/patients/\".concat(patientId));return response.data;}catch(error){var _error$response51;throw((_error$response51=error.response)===null||_error$response51===void 0?void 0:_error$response51.data)||error.message;}},createWalkinAppointment:async appointmentData=>{try{const response=await api.post('/Doctor/appointments/walkin',appointmentData);return response.data;}catch(error){var _error$response52;throw((_error$response52=error.response)===null||_error$response52===void 0?void 0:_error$response52.data)||error.message;}}};// Admin API\nexport const adminAPI={getUsers:async()=>{try{const response=await api.get('/Admin/users');return response.data;}catch(error){var _error$response53;throw((_error$response53=error.response)===null||_error$response53===void 0?void 0:_error$response53.data)||error.message;}},getRoles:async()=>{try{const response=await api.get('/Admin/roles');return response.data;}catch(error){var _error$response54;throw((_error$response54=error.response)===null||_error$response54===void 0?void 0:_error$response54.data)||error.message;}},createStaff:async staffData=>{try{const response=await api.post('/Admin/create-staff',staffData);return response.data;}catch(error){var _error$response55;throw((_error$response55=error.response)===null||_error$response55===void 0?void 0:_error$response55.data)||error.message;}},updateUserStatus:async(userId,isActive)=>{try{const response=await api.put(\"/Admin/users/\".concat(userId),{isActive});return response.data;}catch(error){var _error$response56;throw((_error$response56=error.response)===null||_error$response56===void 0?void 0:_error$response56.data)||error.message;}},updateUserRole:async(userId,newRole)=>{try{const response=await api.put(\"/Admin/users/\".concat(userId,\"/role\"),{newRole});return response.data;}catch(error){var _error$response57;throw((_error$response57=error.response)===null||_error$response57===void 0?void 0:_error$response57.data)||error.message;}},getAppointmentStats:async(startDate,endDate)=>{try{const params={};if(startDate)params.startDate=startDate;if(endDate)params.endDate=endDate;const response=await api.get('/Admin/reports/appointment-stats',{params});return response.data;}catch(error){var _error$response58;throw((_error$response58=error.response)===null||_error$response58===void 0?void 0:_error$response58.data)||error.message;}},getRevenueReport:async(startDate,endDate)=>{try{const params={};if(startDate)params.startDate=startDate;if(endDate)params.endDate=endDate;const response=await api.get('/Admin/reports/revenue',{params});return response.data;}catch(error){var _error$response59;throw((_error$response59=error.response)===null||_error$response59===void 0?void 0:_error$response59.data)||error.message;}}};export default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","error","Promise","reject","response","_error$response","status","_error$config","_error$config$url","_error$config2","_error$config2$url","_error$config3","_error$config3$url","isAuthEndpoint","url","includes","isLoginEndpoint","isRegisterEndpoint","MOCK_MODE","_error$config4","removeItem","window","location","pathname","href","console","log","authAPI","register","userData","resolve","setTimeout","message","post","data","_error$response2","_error$response3","_error$response4","login","credentials","userRole","firstName","lastName","email","mockResponse","Date","now","user","id","roles","_error$response5","_error$response6","_error$response7","logout","_error$response8","servicesAPI","getAll","name","description","durationMinutes","get","_error$response9","_error$response0","serviceData","_error$response1","update","put","_error$response10","delete","_error$response11","_error$response12","_error$response13","timeSlotsAPI","getByDay","day","_error$response14","getAvailable","date","params","_error$response15","staffAPI","_error$response16","getById","_error$response17","getByRole","role","_error$response18","getSchedule","startDate","endDate","_error$response19","getAvailability","_error$response20","staffData","_error$response21","updateAvailability","availabilityData","_error$response22","appointmentsAPI","_error$response23","getDoctorsOnDuty","serviceId","arguments","length","undefined","doctors","specialty","rating","shiftStart","shiftEnd","isAvailable","services","staffResponse","fallbackError","_error$response24","getAvailableSlotsByDoctor","doctorId","slotsResponse","availableSlots","_error$response25","_error$response26","getByPatient","patientId","appointmentDate","startTime","endTime","notes","service","staff","_error$response27","getToday","_error$response28","_error$response29","appointmentData","_error$response30","_error$response31","_error$response32","_error$response33","updateStatus","_error$response34","_error$response35","assignStaff","staffId","_error$response36","bookForPatient","_error$response37","patientsAPI","_error$response38","_error$response39","getByUserId","userId","phone","dateOfBirth","address","patients","patient","find","p","Error","_error$response40","search","query","_error$response41","patientData","_error$response42","doctorAPI","getPatients","_error$response43","getUpcomingAppointments","_error$response44","getAllAppointments","_error$response45","_error$response46","updateShiftSchedule","shiftData","_error$response47","getShiftSchedule","_error$response48","approveAppointment","appointmentId","_error$response49","rejectAppointment","reason","_error$response50","getPatientDetails","_error$response51","createWalkinAppointment","_error$response52","adminAPI","getUsers","_error$response53","getRoles","_error$response54","createStaff","_error$response55","updateUserStatus","isActive","_error$response56","updateUserRole","newRole","_error$response57","getAppointmentStats","_error$response58","getRevenueReport","_error$response59"],"sources":["C:/Project/HopewellClinic/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'https://hopewellapi-azcvcferesfpgjgm.southafricanorth-01.azurewebsites.net/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle common errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Only logout if this is an authentication-related endpoint or if we're in mock mode\n      const isAuthEndpoint = error.config?.url?.includes('/Auth/');\n      const isLoginEndpoint = error.config?.url?.includes('/login');\n      const isRegisterEndpoint = error.config?.url?.includes('/register');\n      \n      // In mock mode, don't auto-logout on 401 errors unless it's an auth endpoint\n      if (MOCK_MODE) {\n        if (isAuthEndpoint && (isLoginEndpoint || isRegisterEndpoint)) {\n          // Only logout on actual login/register failures\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          if (window.location.pathname !== '/auth') {\n            window.location.href = '/auth';\n          }\n        }\n        // For all other 401s in mock mode, just log and continue\n        console.log('⚠️ Mock Mode: Ignoring 401 error for:', error.config?.url);\n      } else {\n        // Real API mode - be more careful about when to logout\n        if (isAuthEndpoint) {\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          if (window.location.pathname !== '/auth') {\n            window.location.href = '/auth';\n          }\n        }\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Mock API for testing when backend is not available\nconst MOCK_MODE = true; // Set to false when backend is running\n\n// Auth API\nexport const authAPI = {\n  register: async (userData) => {\n    if (MOCK_MODE) {\n      // Mock successful registration\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve({ message: \"User registered successfully.\" });\n        }, 1000);\n      });\n    }\n    \n    try {\n      console.log('Attempting registration to:', API_BASE_URL + '/Auth/register');\n      console.log('Registration data:', userData);\n      const response = await api.post('/Auth/register', userData);\n      console.log('Registration response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Registration error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  login: async (credentials) => {\n    if (MOCK_MODE) {\n      console.log('🔐 Mock Login Attempt:', credentials);\n      \n      // Mock successful login with role detection\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          let userRole = \"patient\";\n          let firstName = \"Mock\";\n          let lastName = \"User\";\n          \n          // Detect role based on email\n          if (credentials.email.includes('doctor')) {\n            userRole = \"doctor\";\n            firstName = \"Dr. John\";\n            lastName = \"Smith\";\n          } else if (credentials.email.includes('nurse')) {\n            userRole = \"nurse\";\n            firstName = \"Jane\";\n            lastName = \"Nurse\";\n          } else if (credentials.email.includes('admin')) {\n            userRole = \"admin\";\n            firstName = \"Admin\";\n            lastName = \"User\";\n          } else if (credentials.email.includes('patient')) {\n            userRole = \"patient\";\n            firstName = \"John\";\n            lastName = \"Patient\";\n          }\n          \n          const mockResponse = {\n            token: \"mock-jwt-token-\" + Date.now(),\n            user: {\n              id: \"mock-user-id-\" + userRole,\n              email: credentials.email,\n              firstName: firstName,\n              lastName: lastName,\n              roles: [userRole]\n            }\n          };\n          \n          console.log('✅ Mock Login Success:', mockResponse);\n          resolve(mockResponse);\n        }, 1000);\n      });\n    }\n    \n    try {\n      console.log('Attempting login to:', API_BASE_URL + '/Auth/login');\n      console.log('Credentials:', credentials);\n      const response = await api.post('/Auth/login', credentials);\n      console.log('Login response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Login error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  logout: async () => {\n    if (MOCK_MODE) {\n      // Mock successful logout\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve({ message: \"Logged out successfully\" });\n        }, 500);\n      });\n    }\n    \n    try {\n      const response = await api.post('/Auth/logout');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Services API\nexport const servicesAPI = {\n  getAll: async () => {\n    if (MOCK_MODE) {\n      console.log('🔧 Mock Mode: Returning mock services data');\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve([\n            { id: '1', name: 'General Consultation', description: 'Basic health checkup', durationMinutes: 30 },\n            { id: '2', name: 'Follow-up Visit', description: 'Follow-up appointment', durationMinutes: 15 },\n            { id: '3', name: 'Specialist Consultation', description: 'Specialist medical consultation', durationMinutes: 45 },\n            { id: '4', name: 'Emergency Visit', description: 'Emergency medical consultation', durationMinutes: 60 }\n          ]);\n        }, 500);\n      });\n    }\n    \n    try {\n      console.log('Fetching services from:', API_BASE_URL + '/Services');\n      const response = await api.get('/Services');\n      console.log('Services response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching services:', error);\n      console.error('Error response:', error.response?.data);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  create: async (serviceData) => {\n    try {\n      const response = await api.post('/Services', serviceData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, serviceData) => {\n    try {\n      const response = await api.put(`/Services/${id}`, serviceData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  delete: async (id) => {\n    try {\n      console.log('Deleting service with ID:', id);\n      const response = await api.delete(`/Services/${id}`);\n      console.log('Delete service response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Delete service error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Time Slots API\nexport const timeSlotsAPI = {\n  getByDay: async (day) => {\n    try {\n      const response = await api.get(`/time-slots/by-day/${day}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAvailable: async (date) => {\n    try {\n      const params = date ? { date } : {};\n      const response = await api.get('/time-slots/available', { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Staff API\nexport const staffAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Staff');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/Staff/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getByRole: async (role) => {\n    if (MOCK_MODE) {\n      console.log('🔧 Mock Mode: Returning mock staff data for role:', role);\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          if (role === 'doctor') {\n            resolve([\n              { id: '1', firstName: 'Dr. John', lastName: 'Smith', email: 'doctor@hopewell.com', role: 'doctor' },\n              { id: '2', firstName: 'Dr. Jane', lastName: 'Doe', email: 'jane@hopewell.com', role: 'doctor' },\n              { id: '3', firstName: 'Dr. Michael', lastName: 'Johnson', email: 'michael@hopewell.com', role: 'doctor' }\n            ]);\n          } else if (role === 'nurse') {\n            resolve([\n              { id: '4', firstName: 'Jane', lastName: 'Nurse', email: 'nurse@hopewell.com', role: 'nurse' },\n              { id: '5', firstName: 'Sarah', lastName: 'Wilson', email: 'sarah@hopewell.com', role: 'nurse' }\n            ]);\n          } else {\n            resolve([]);\n          }\n        }, 500);\n      });\n    }\n    \n    try {\n      const response = await api.get(`/Staff/by-role/${role}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getSchedule: async (id, startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get(`/Staff/${id}/schedule`, { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAvailability: async (id, date) => {\n    try {\n      const response = await api.get(`/Staff/${id}/availability`, {\n        params: { date }\n      });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, staffData) => {\n    try {\n      const response = await api.put(`/Staff/${id}`, staffData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateAvailability: async (id, availabilityData) => {\n    try {\n      const response = await api.post(`/Staff/${id}/availability`, availabilityData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Appointments API\nexport const appointmentsAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Appointments');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getDoctorsOnDuty: async (date, serviceId = null) => {\n    if (MOCK_MODE) {\n      // Mock doctors on duty - by default all doctors are on duty\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve({\n            doctors: [\n              {\n                id: \"doctor-1\",\n                firstName: \"John\",\n                lastName: \"Smith\",\n                specialty: \"Cardiology\",\n                rating: 4.8,\n                shiftStart: \"09:00\",\n                shiftEnd: \"17:00\",\n                isAvailable: true,\n                services: [\"consultation\", \"follow-up\"]\n              },\n              {\n                id: \"doctor-2\",\n                firstName: \"Sarah\",\n                lastName: \"Johnson\",\n                specialty: \"Pediatrics\",\n                rating: 4.9,\n                shiftStart: \"08:00\",\n                shiftEnd: \"16:00\",\n                isAvailable: true,\n                services: [\"consultation\", \"vaccination\"]\n              },\n              {\n                id: \"doctor-3\",\n                firstName: \"Michael\",\n                lastName: \"Brown\",\n                specialty: \"General Medicine\",\n                rating: 4.7,\n                shiftStart: \"10:00\",\n                shiftEnd: \"18:00\",\n                isAvailable: true,\n                services: [\"consultation\", \"checkup\"]\n              }\n            ]\n          });\n        }, 500);\n      });\n    }\n    \n    try {\n      const params = { date };\n      if (serviceId) params.serviceId = serviceId;\n      \n      const response = await api.get('/Appointments/doctors-on-duty', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching doctors on duty:', error);\n      // Fallback to existing staff API if new endpoint doesn't exist\n      try {\n        const staffResponse = await api.get('/Staff/by-role/doctor');\n        return { doctors: staffResponse.data };\n      } catch (fallbackError) {\n        throw error.response?.data || error.message;\n      }\n    }\n  },\n\n  getAvailableSlotsByDoctor: async (doctorId, date, serviceId = null) => {\n    try {\n      const params = { doctorId, date };\n      if (serviceId) params.serviceId = serviceId;\n      \n      const response = await api.get('/Appointments/available-slots-by-doctor', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching doctor-specific slots:', error);\n      // Fallback to existing available slots API\n      try {\n        const slotsResponse = await api.get('/Appointments/available-slots', { params: { date } });\n        return { availableSlots: slotsResponse.data };\n      } catch (fallbackError) {\n        throw error.response?.data || error.message;\n      }\n    }\n  },\n\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/Appointments/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getByPatient: async (patientId) => {\n    if (MOCK_MODE) {\n      console.log('🔧 Mock Mode: Returning mock appointments for patient:', patientId);\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve([\n            {\n              id: '1',\n              appointmentDate: '2024-01-15',\n              startTime: '09:00:00',\n              endTime: '09:30:00',\n              status: 'confirmed',\n              notes: 'Regular checkup',\n              service: { id: '1', name: 'General Consultation', description: 'Basic health checkup', durationMinutes: 30 },\n              staff: { firstName: 'Dr. John', lastName: 'Smith', email: 'doctor@hopewell.com' }\n            },\n            {\n              id: '2',\n              appointmentDate: '2024-01-20',\n              startTime: '14:00:00',\n              endTime: '14:15:00',\n              status: 'pending',\n              notes: 'Follow-up visit',\n              service: { id: '2', name: 'Follow-up Visit', description: 'Follow-up appointment', durationMinutes: 15 },\n              staff: { firstName: 'Dr. Jane', lastName: 'Doe', email: 'jane@hopewell.com' }\n            }\n          ]);\n        }, 500);\n      });\n    }\n    \n    try {\n      const response = await api.get(`/Appointments/patient/${patientId}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getToday: async () => {\n    try {\n      const response = await api.get('/Appointments/today');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAvailable: async (date) => {\n    try {\n      const response = await api.get('/Appointments/available-slots', {\n        params: { date }\n      });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  create: async (appointmentData) => {\n    try {\n      console.log('Creating appointment with data:', appointmentData);\n      const response = await api.post('/Appointments', appointmentData);\n      console.log('Appointment created successfully:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Appointment creation error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, appointmentData) => {\n    try {\n      const response = await api.put(`/Appointments/${id}`, appointmentData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateStatus: async (id, status) => {\n    try {\n      const response = await api.put(`/Appointments/${id}/status`, { status });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  delete: async (id) => {\n    try {\n      const response = await api.delete(`/Appointments/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  assignStaff: async (id, staffId) => {\n    try {\n      const response = await api.post(`/Appointments/${id}/assign-staff`, { staffId });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  bookForPatient: async (appointmentData) => {\n    try {\n      const response = await api.post('/Appointments/book-for-patient', appointmentData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Patients API\nexport const patientsAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Patients');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/Patients/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getByUserId: async (userId) => {\n    if (MOCK_MODE) {\n      console.log('🔧 Mock Mode: Returning mock patient data for user:', userId);\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve({\n            id: 'mock-patient-id',\n            userId: userId,\n            firstName: 'John',\n            lastName: 'Patient',\n            email: 'patient@hopewell.com',\n            phone: '+1234567890',\n            dateOfBirth: '1990-01-01',\n            address: '123 Main St, City, State 12345'\n          });\n        }, 500);\n      });\n    }\n    \n    try {\n      // Get all patients and find the one with matching userId\n      const response = await api.get('/Patients');\n      const patients = response.data;\n      const patient = patients.find(p => p.userId === userId);\n      if (!patient) {\n        throw new Error('Patient not found for this user');\n      }\n      return patient;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  search: async (query) => {\n    try {\n      const response = await api.get('/Patients/search', { params: { query } });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, patientData) => {\n    try {\n      const response = await api.put(`/Patients/${id}`, patientData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Doctor API\nexport const doctorAPI = {\n  getPatients: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/patients`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getUpcomingAppointments: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/appointments/upcoming`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAllAppointments: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/appointments`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getSchedule: async (doctorId, startDate, endDate) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/schedule`, {\n        params: { startDate, endDate }\n      });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateShiftSchedule: async (doctorId, shiftData) => {\n    try {\n      const response = await api.put(`/Doctor/${doctorId}/shifts`, shiftData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getShiftSchedule: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/shifts`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  approveAppointment: async (appointmentId) => {\n    try {\n      const response = await api.put(`/Doctor/appointments/${appointmentId}/approve`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  rejectAppointment: async (appointmentId, reason) => {\n    try {\n      const response = await api.put(`/Doctor/appointments/${appointmentId}/reject`, { reason });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getPatientDetails: async (patientId) => {\n    try {\n      const response = await api.get(`/Doctor/patients/${patientId}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  createWalkinAppointment: async (appointmentData) => {\n    try {\n      const response = await api.post('/Doctor/appointments/walkin', appointmentData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Admin API\nexport const adminAPI = {\n  getUsers: async () => {\n    try {\n      const response = await api.get('/Admin/users');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getRoles: async () => {\n    try {\n      const response = await api.get('/Admin/roles');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  createStaff: async (staffData) => {\n    try {\n      const response = await api.post('/Admin/create-staff', staffData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateUserStatus: async (userId, isActive) => {\n    try {\n      const response = await api.put(`/Admin/users/${userId}`, { isActive });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateUserRole: async (userId, newRole) => {\n    try {\n      const response = await api.put(`/Admin/users/${userId}/role`, { newRole });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAppointmentStats: async (startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get('/Admin/reports/appointment-stats', { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getRevenueReport: async (startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get('/Admin/reports/revenue', { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}