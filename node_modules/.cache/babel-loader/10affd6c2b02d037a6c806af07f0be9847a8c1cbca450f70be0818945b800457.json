{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'https://hopewellapi-azcvcferesfpgjgm.southafricanorth-01.azurewebsites.net/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle common errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    var _error$config, _error$config$url, _error$config2, _error$config2$url, _error$config3, _error$config3$url, _error$config4, _error$config4$url;\n    // Only logout if this is an authentication-related endpoint\n    const isAuthEndpoint = (_error$config = error.config) === null || _error$config === void 0 ? void 0 : (_error$config$url = _error$config.url) === null || _error$config$url === void 0 ? void 0 : _error$config$url.includes('/Auth/');\n    const isProtectedEndpoint = !((_error$config2 = error.config) !== null && _error$config2 !== void 0 && (_error$config2$url = _error$config2.url) !== null && _error$config2$url !== void 0 && _error$config2$url.includes('/Services')) && !((_error$config3 = error.config) !== null && _error$config3 !== void 0 && (_error$config3$url = _error$config3.url) !== null && _error$config3$url !== void 0 && _error$config3$url.includes('/Staff')) && !((_error$config4 = error.config) !== null && _error$config4 !== void 0 && (_error$config4$url = _error$config4.url) !== null && _error$config4$url !== void 0 && _error$config4$url.includes('/Appointments'));\n    if (isAuthEndpoint || isProtectedEndpoint) {\n      // Token expired or invalid - only redirect if not already on auth page\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      if (window.location.pathname !== '/auth') {\n        window.location.href = '/auth';\n      }\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Mock API for testing when backend is not available\nconst MOCK_MODE = true; // Set to false when backend is running\n\n// Auth API\nexport const authAPI = {\n  register: async userData => {\n    if (MOCK_MODE) {\n      // Mock successful registration\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            message: \"User registered successfully.\"\n          });\n        }, 1000);\n      });\n    }\n    try {\n      console.log('Attempting registration to:', API_BASE_URL + '/Auth/register');\n      console.log('Registration data:', userData);\n      const response = await api.post('/Auth/register', userData);\n      console.log('Registration response:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response3, _error$response4;\n      console.error('Registration error:', error);\n      console.error('Error response:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n      console.error('Error status:', (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status);\n      throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message;\n    }\n  },\n  login: async credentials => {\n    if (MOCK_MODE) {\n      console.log('🔐 Mock Login Attempt:', credentials);\n\n      // Mock successful login with role detection\n      return new Promise(resolve => {\n        setTimeout(() => {\n          let userRole = \"patient\";\n          let firstName = \"Mock\";\n          let lastName = \"User\";\n\n          // Detect role based on email\n          if (credentials.email.includes('doctor')) {\n            userRole = \"doctor\";\n            firstName = \"Dr. John\";\n            lastName = \"Smith\";\n          } else if (credentials.email.includes('nurse')) {\n            userRole = \"nurse\";\n            firstName = \"Jane\";\n            lastName = \"Nurse\";\n          } else if (credentials.email.includes('admin')) {\n            userRole = \"admin\";\n            firstName = \"Admin\";\n            lastName = \"User\";\n          } else if (credentials.email.includes('patient')) {\n            userRole = \"patient\";\n            firstName = \"John\";\n            lastName = \"Patient\";\n          }\n          const mockResponse = {\n            token: \"mock-jwt-token-\" + Date.now(),\n            user: {\n              id: \"mock-user-id-\" + userRole,\n              email: credentials.email,\n              firstName: firstName,\n              lastName: lastName,\n              roles: [userRole]\n            }\n          };\n          console.log('✅ Mock Login Success:', mockResponse);\n          resolve(mockResponse);\n        }, 1000);\n      });\n    }\n    try {\n      console.log('Attempting login to:', API_BASE_URL + '/Auth/login');\n      console.log('Credentials:', credentials);\n      const response = await api.post('/Auth/login', credentials);\n      console.log('Login response:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response6, _error$response7;\n      console.error('Login error:', error);\n      console.error('Error response:', (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data);\n      console.error('Error status:', (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.status);\n      throw ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || error.message;\n    }\n  },\n  logout: async () => {\n    if (MOCK_MODE) {\n      // Mock successful logout\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            message: \"Logged out successfully\"\n          });\n        }, 500);\n      });\n    }\n    try {\n      const response = await api.post('/Auth/logout');\n      return response.data;\n    } catch (error) {\n      var _error$response8;\n      throw ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data) || error.message;\n    }\n  }\n};\n\n// Services API\nexport const servicesAPI = {\n  getAll: async () => {\n    try {\n      console.log('Fetching services from:', API_BASE_URL + '/Services');\n      const response = await api.get('/Services');\n      console.log('Services response:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response9, _error$response0;\n      console.error('Error fetching services:', error);\n      console.error('Error response:', (_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.data);\n      throw ((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : _error$response0.data) || error.message;\n    }\n  },\n  create: async serviceData => {\n    try {\n      const response = await api.post('/Services', serviceData);\n      return response.data;\n    } catch (error) {\n      var _error$response1;\n      throw ((_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : _error$response1.data) || error.message;\n    }\n  },\n  update: async (id, serviceData) => {\n    try {\n      const response = await api.put(`/Services/${id}`, serviceData);\n      return response.data;\n    } catch (error) {\n      var _error$response10;\n      throw ((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : _error$response10.data) || error.message;\n    }\n  },\n  delete: async id => {\n    try {\n      console.log('Deleting service with ID:', id);\n      const response = await api.delete(`/Services/${id}`);\n      console.log('Delete service response:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response11, _error$response12, _error$response13;\n      console.error('Delete service error:', error);\n      console.error('Error response:', (_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : _error$response11.data);\n      console.error('Error status:', (_error$response12 = error.response) === null || _error$response12 === void 0 ? void 0 : _error$response12.status);\n      throw ((_error$response13 = error.response) === null || _error$response13 === void 0 ? void 0 : _error$response13.data) || error.message;\n    }\n  }\n};\n\n// Time Slots API\nexport const timeSlotsAPI = {\n  getByDay: async day => {\n    try {\n      const response = await api.get(`/time-slots/by-day/${day}`);\n      return response.data;\n    } catch (error) {\n      var _error$response14;\n      throw ((_error$response14 = error.response) === null || _error$response14 === void 0 ? void 0 : _error$response14.data) || error.message;\n    }\n  },\n  getAvailable: async date => {\n    try {\n      const params = date ? {\n        date\n      } : {};\n      const response = await api.get('/time-slots/available', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response15;\n      throw ((_error$response15 = error.response) === null || _error$response15 === void 0 ? void 0 : _error$response15.data) || error.message;\n    }\n  }\n};\n\n// Staff API\nexport const staffAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Staff');\n      return response.data;\n    } catch (error) {\n      var _error$response16;\n      throw ((_error$response16 = error.response) === null || _error$response16 === void 0 ? void 0 : _error$response16.data) || error.message;\n    }\n  },\n  getById: async id => {\n    try {\n      const response = await api.get(`/Staff/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response17;\n      throw ((_error$response17 = error.response) === null || _error$response17 === void 0 ? void 0 : _error$response17.data) || error.message;\n    }\n  },\n  getByRole: async role => {\n    try {\n      const response = await api.get(`/Staff/by-role/${role}`);\n      return response.data;\n    } catch (error) {\n      var _error$response18;\n      throw ((_error$response18 = error.response) === null || _error$response18 === void 0 ? void 0 : _error$response18.data) || error.message;\n    }\n  },\n  getSchedule: async (id, startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get(`/Staff/${id}/schedule`, {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response19;\n      throw ((_error$response19 = error.response) === null || _error$response19 === void 0 ? void 0 : _error$response19.data) || error.message;\n    }\n  },\n  getAvailability: async (id, date) => {\n    try {\n      const response = await api.get(`/Staff/${id}/availability`, {\n        params: {\n          date\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response20;\n      throw ((_error$response20 = error.response) === null || _error$response20 === void 0 ? void 0 : _error$response20.data) || error.message;\n    }\n  },\n  update: async (id, staffData) => {\n    try {\n      const response = await api.put(`/Staff/${id}`, staffData);\n      return response.data;\n    } catch (error) {\n      var _error$response21;\n      throw ((_error$response21 = error.response) === null || _error$response21 === void 0 ? void 0 : _error$response21.data) || error.message;\n    }\n  },\n  updateAvailability: async (id, availabilityData) => {\n    try {\n      const response = await api.post(`/Staff/${id}/availability`, availabilityData);\n      return response.data;\n    } catch (error) {\n      var _error$response22;\n      throw ((_error$response22 = error.response) === null || _error$response22 === void 0 ? void 0 : _error$response22.data) || error.message;\n    }\n  }\n};\n\n// Appointments API\nexport const appointmentsAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Appointments');\n      return response.data;\n    } catch (error) {\n      var _error$response23;\n      throw ((_error$response23 = error.response) === null || _error$response23 === void 0 ? void 0 : _error$response23.data) || error.message;\n    }\n  },\n  getDoctorsOnDuty: async (date, serviceId = null) => {\n    if (MOCK_MODE) {\n      // Mock doctors on duty - by default all doctors are on duty\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            doctors: [{\n              id: \"doctor-1\",\n              firstName: \"John\",\n              lastName: \"Smith\",\n              specialty: \"Cardiology\",\n              rating: 4.8,\n              shiftStart: \"09:00\",\n              shiftEnd: \"17:00\",\n              isAvailable: true,\n              services: [\"consultation\", \"follow-up\"]\n            }, {\n              id: \"doctor-2\",\n              firstName: \"Sarah\",\n              lastName: \"Johnson\",\n              specialty: \"Pediatrics\",\n              rating: 4.9,\n              shiftStart: \"08:00\",\n              shiftEnd: \"16:00\",\n              isAvailable: true,\n              services: [\"consultation\", \"vaccination\"]\n            }, {\n              id: \"doctor-3\",\n              firstName: \"Michael\",\n              lastName: \"Brown\",\n              specialty: \"General Medicine\",\n              rating: 4.7,\n              shiftStart: \"10:00\",\n              shiftEnd: \"18:00\",\n              isAvailable: true,\n              services: [\"consultation\", \"checkup\"]\n            }]\n          });\n        }, 500);\n      });\n    }\n    try {\n      const params = {\n        date\n      };\n      if (serviceId) params.serviceId = serviceId;\n      const response = await api.get('/Appointments/doctors-on-duty', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching doctors on duty:', error);\n      // Fallback to existing staff API if new endpoint doesn't exist\n      try {\n        const staffResponse = await api.get('/Staff/by-role/doctor');\n        return {\n          doctors: staffResponse.data\n        };\n      } catch (fallbackError) {\n        var _error$response24;\n        throw ((_error$response24 = error.response) === null || _error$response24 === void 0 ? void 0 : _error$response24.data) || error.message;\n      }\n    }\n  },\n  getAvailableSlotsByDoctor: async (doctorId, date, serviceId = null) => {\n    try {\n      const params = {\n        doctorId,\n        date\n      };\n      if (serviceId) params.serviceId = serviceId;\n      const response = await api.get('/Appointments/available-slots-by-doctor', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching doctor-specific slots:', error);\n      // Fallback to existing available slots API\n      try {\n        const slotsResponse = await api.get('/Appointments/available-slots', {\n          params: {\n            date\n          }\n        });\n        return {\n          availableSlots: slotsResponse.data\n        };\n      } catch (fallbackError) {\n        var _error$response25;\n        throw ((_error$response25 = error.response) === null || _error$response25 === void 0 ? void 0 : _error$response25.data) || error.message;\n      }\n    }\n  },\n  getById: async id => {\n    try {\n      const response = await api.get(`/Appointments/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response26;\n      throw ((_error$response26 = error.response) === null || _error$response26 === void 0 ? void 0 : _error$response26.data) || error.message;\n    }\n  },\n  getByPatient: async patientId => {\n    try {\n      const response = await api.get(`/Appointments/patient/${patientId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response27;\n      throw ((_error$response27 = error.response) === null || _error$response27 === void 0 ? void 0 : _error$response27.data) || error.message;\n    }\n  },\n  getToday: async () => {\n    try {\n      const response = await api.get('/Appointments/today');\n      return response.data;\n    } catch (error) {\n      var _error$response28;\n      throw ((_error$response28 = error.response) === null || _error$response28 === void 0 ? void 0 : _error$response28.data) || error.message;\n    }\n  },\n  getAvailable: async date => {\n    try {\n      const response = await api.get('/Appointments/available-slots', {\n        params: {\n          date\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response29;\n      throw ((_error$response29 = error.response) === null || _error$response29 === void 0 ? void 0 : _error$response29.data) || error.message;\n    }\n  },\n  create: async appointmentData => {\n    try {\n      console.log('Creating appointment with data:', appointmentData);\n      const response = await api.post('/Appointments', appointmentData);\n      console.log('Appointment created successfully:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response30, _error$response31, _error$response32;\n      console.error('Appointment creation error:', error);\n      console.error('Error response:', (_error$response30 = error.response) === null || _error$response30 === void 0 ? void 0 : _error$response30.data);\n      console.error('Error status:', (_error$response31 = error.response) === null || _error$response31 === void 0 ? void 0 : _error$response31.status);\n      throw ((_error$response32 = error.response) === null || _error$response32 === void 0 ? void 0 : _error$response32.data) || error.message;\n    }\n  },\n  update: async (id, appointmentData) => {\n    try {\n      const response = await api.put(`/Appointments/${id}`, appointmentData);\n      return response.data;\n    } catch (error) {\n      var _error$response33;\n      throw ((_error$response33 = error.response) === null || _error$response33 === void 0 ? void 0 : _error$response33.data) || error.message;\n    }\n  },\n  updateStatus: async (id, status) => {\n    try {\n      const response = await api.put(`/Appointments/${id}/status`, {\n        status\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response34;\n      throw ((_error$response34 = error.response) === null || _error$response34 === void 0 ? void 0 : _error$response34.data) || error.message;\n    }\n  },\n  delete: async id => {\n    try {\n      const response = await api.delete(`/Appointments/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response35;\n      throw ((_error$response35 = error.response) === null || _error$response35 === void 0 ? void 0 : _error$response35.data) || error.message;\n    }\n  },\n  assignStaff: async (id, staffId) => {\n    try {\n      const response = await api.post(`/Appointments/${id}/assign-staff`, {\n        staffId\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response36;\n      throw ((_error$response36 = error.response) === null || _error$response36 === void 0 ? void 0 : _error$response36.data) || error.message;\n    }\n  },\n  bookForPatient: async appointmentData => {\n    try {\n      const response = await api.post('/Appointments/book-for-patient', appointmentData);\n      return response.data;\n    } catch (error) {\n      var _error$response37;\n      throw ((_error$response37 = error.response) === null || _error$response37 === void 0 ? void 0 : _error$response37.data) || error.message;\n    }\n  }\n};\n\n// Patients API\nexport const patientsAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Patients');\n      return response.data;\n    } catch (error) {\n      var _error$response38;\n      throw ((_error$response38 = error.response) === null || _error$response38 === void 0 ? void 0 : _error$response38.data) || error.message;\n    }\n  },\n  getById: async id => {\n    try {\n      const response = await api.get(`/Patients/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response39;\n      throw ((_error$response39 = error.response) === null || _error$response39 === void 0 ? void 0 : _error$response39.data) || error.message;\n    }\n  },\n  getByUserId: async userId => {\n    try {\n      // Get all patients and find the one with matching userId\n      const response = await api.get('/Patients');\n      const patients = response.data;\n      const patient = patients.find(p => p.userId === userId);\n      if (!patient) {\n        throw new Error('Patient not found for this user');\n      }\n      return patient;\n    } catch (error) {\n      var _error$response40;\n      throw ((_error$response40 = error.response) === null || _error$response40 === void 0 ? void 0 : _error$response40.data) || error.message;\n    }\n  },\n  search: async query => {\n    try {\n      const response = await api.get('/Patients/search', {\n        params: {\n          query\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response41;\n      throw ((_error$response41 = error.response) === null || _error$response41 === void 0 ? void 0 : _error$response41.data) || error.message;\n    }\n  },\n  update: async (id, patientData) => {\n    try {\n      const response = await api.put(`/Patients/${id}`, patientData);\n      return response.data;\n    } catch (error) {\n      var _error$response42;\n      throw ((_error$response42 = error.response) === null || _error$response42 === void 0 ? void 0 : _error$response42.data) || error.message;\n    }\n  }\n};\n\n// Doctor API\nexport const doctorAPI = {\n  getPatients: async doctorId => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/patients`);\n      return response.data;\n    } catch (error) {\n      var _error$response43;\n      throw ((_error$response43 = error.response) === null || _error$response43 === void 0 ? void 0 : _error$response43.data) || error.message;\n    }\n  },\n  getUpcomingAppointments: async doctorId => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/appointments/upcoming`);\n      return response.data;\n    } catch (error) {\n      var _error$response44;\n      throw ((_error$response44 = error.response) === null || _error$response44 === void 0 ? void 0 : _error$response44.data) || error.message;\n    }\n  },\n  getAllAppointments: async doctorId => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/appointments`);\n      return response.data;\n    } catch (error) {\n      var _error$response45;\n      throw ((_error$response45 = error.response) === null || _error$response45 === void 0 ? void 0 : _error$response45.data) || error.message;\n    }\n  },\n  getSchedule: async (doctorId, startDate, endDate) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/schedule`, {\n        params: {\n          startDate,\n          endDate\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response46;\n      throw ((_error$response46 = error.response) === null || _error$response46 === void 0 ? void 0 : _error$response46.data) || error.message;\n    }\n  },\n  updateShiftSchedule: async (doctorId, shiftData) => {\n    try {\n      const response = await api.put(`/Doctor/${doctorId}/shifts`, shiftData);\n      return response.data;\n    } catch (error) {\n      var _error$response47;\n      throw ((_error$response47 = error.response) === null || _error$response47 === void 0 ? void 0 : _error$response47.data) || error.message;\n    }\n  },\n  getShiftSchedule: async doctorId => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/shifts`);\n      return response.data;\n    } catch (error) {\n      var _error$response48;\n      throw ((_error$response48 = error.response) === null || _error$response48 === void 0 ? void 0 : _error$response48.data) || error.message;\n    }\n  },\n  approveAppointment: async appointmentId => {\n    try {\n      const response = await api.put(`/Doctor/appointments/${appointmentId}/approve`);\n      return response.data;\n    } catch (error) {\n      var _error$response49;\n      throw ((_error$response49 = error.response) === null || _error$response49 === void 0 ? void 0 : _error$response49.data) || error.message;\n    }\n  },\n  rejectAppointment: async (appointmentId, reason) => {\n    try {\n      const response = await api.put(`/Doctor/appointments/${appointmentId}/reject`, {\n        reason\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response50;\n      throw ((_error$response50 = error.response) === null || _error$response50 === void 0 ? void 0 : _error$response50.data) || error.message;\n    }\n  },\n  getPatientDetails: async patientId => {\n    try {\n      const response = await api.get(`/Doctor/patients/${patientId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response51;\n      throw ((_error$response51 = error.response) === null || _error$response51 === void 0 ? void 0 : _error$response51.data) || error.message;\n    }\n  },\n  createWalkinAppointment: async appointmentData => {\n    try {\n      const response = await api.post('/Doctor/appointments/walkin', appointmentData);\n      return response.data;\n    } catch (error) {\n      var _error$response52;\n      throw ((_error$response52 = error.response) === null || _error$response52 === void 0 ? void 0 : _error$response52.data) || error.message;\n    }\n  }\n};\n\n// Admin API\nexport const adminAPI = {\n  getUsers: async () => {\n    try {\n      const response = await api.get('/Admin/users');\n      return response.data;\n    } catch (error) {\n      var _error$response53;\n      throw ((_error$response53 = error.response) === null || _error$response53 === void 0 ? void 0 : _error$response53.data) || error.message;\n    }\n  },\n  getRoles: async () => {\n    try {\n      const response = await api.get('/Admin/roles');\n      return response.data;\n    } catch (error) {\n      var _error$response54;\n      throw ((_error$response54 = error.response) === null || _error$response54 === void 0 ? void 0 : _error$response54.data) || error.message;\n    }\n  },\n  createStaff: async staffData => {\n    try {\n      const response = await api.post('/Admin/create-staff', staffData);\n      return response.data;\n    } catch (error) {\n      var _error$response55;\n      throw ((_error$response55 = error.response) === null || _error$response55 === void 0 ? void 0 : _error$response55.data) || error.message;\n    }\n  },\n  updateUserStatus: async (userId, isActive) => {\n    try {\n      const response = await api.put(`/Admin/users/${userId}`, {\n        isActive\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response56;\n      throw ((_error$response56 = error.response) === null || _error$response56 === void 0 ? void 0 : _error$response56.data) || error.message;\n    }\n  },\n  updateUserRole: async (userId, newRole) => {\n    try {\n      const response = await api.put(`/Admin/users/${userId}/role`, {\n        newRole\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response57;\n      throw ((_error$response57 = error.response) === null || _error$response57 === void 0 ? void 0 : _error$response57.data) || error.message;\n    }\n  },\n  getAppointmentStats: async (startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get('/Admin/reports/appointment-stats', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response58;\n      throw ((_error$response58 = error.response) === null || _error$response58 === void 0 ? void 0 : _error$response58.data) || error.message;\n    }\n  },\n  getRevenueReport: async (startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get('/Admin/reports/revenue', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response59;\n      throw ((_error$response59 = error.response) === null || _error$response59 === void 0 ? void 0 : _error$response59.data) || error.message;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","_error$config","_error$config$url","_error$config2","_error$config2$url","_error$config3","_error$config3$url","_error$config4","_error$config4$url","isAuthEndpoint","url","includes","isProtectedEndpoint","removeItem","window","location","pathname","href","MOCK_MODE","authAPI","register","userData","resolve","setTimeout","message","console","log","post","data","_error$response2","_error$response3","_error$response4","login","credentials","userRole","firstName","lastName","email","mockResponse","Date","now","user","id","roles","_error$response5","_error$response6","_error$response7","logout","_error$response8","servicesAPI","getAll","get","_error$response9","_error$response0","serviceData","_error$response1","update","put","_error$response10","delete","_error$response11","_error$response12","_error$response13","timeSlotsAPI","getByDay","day","_error$response14","getAvailable","date","params","_error$response15","staffAPI","_error$response16","getById","_error$response17","getByRole","role","_error$response18","getSchedule","startDate","endDate","_error$response19","getAvailability","_error$response20","staffData","_error$response21","updateAvailability","availabilityData","_error$response22","appointmentsAPI","_error$response23","getDoctorsOnDuty","serviceId","doctors","specialty","rating","shiftStart","shiftEnd","isAvailable","services","staffResponse","fallbackError","_error$response24","getAvailableSlotsByDoctor","doctorId","slotsResponse","availableSlots","_error$response25","_error$response26","getByPatient","patientId","_error$response27","getToday","_error$response28","_error$response29","appointmentData","_error$response30","_error$response31","_error$response32","_error$response33","updateStatus","_error$response34","_error$response35","assignStaff","staffId","_error$response36","bookForPatient","_error$response37","patientsAPI","_error$response38","_error$response39","getByUserId","userId","patients","patient","find","p","Error","_error$response40","search","query","_error$response41","patientData","_error$response42","doctorAPI","getPatients","_error$response43","getUpcomingAppointments","_error$response44","getAllAppointments","_error$response45","_error$response46","updateShiftSchedule","shiftData","_error$response47","getShiftSchedule","_error$response48","approveAppointment","appointmentId","_error$response49","rejectAppointment","reason","_error$response50","getPatientDetails","_error$response51","createWalkinAppointment","_error$response52","adminAPI","getUsers","_error$response53","getRoles","_error$response54","createStaff","_error$response55","updateUserStatus","isActive","_error$response56","updateUserRole","newRole","_error$response57","getAppointmentStats","_error$response58","getRevenueReport","_error$response59"],"sources":["C:/Project/HopewellClinic/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'https://hopewellapi-azcvcferesfpgjgm.southafricanorth-01.azurewebsites.net/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle common errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Only logout if this is an authentication-related endpoint\n      const isAuthEndpoint = error.config?.url?.includes('/Auth/');\n      const isProtectedEndpoint = !error.config?.url?.includes('/Services') && \n                                 !error.config?.url?.includes('/Staff') &&\n                                 !error.config?.url?.includes('/Appointments');\n      \n      if (isAuthEndpoint || isProtectedEndpoint) {\n        // Token expired or invalid - only redirect if not already on auth page\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        if (window.location.pathname !== '/auth') {\n          window.location.href = '/auth';\n        }\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Mock API for testing when backend is not available\nconst MOCK_MODE = true; // Set to false when backend is running\n\n// Auth API\nexport const authAPI = {\n  register: async (userData) => {\n    if (MOCK_MODE) {\n      // Mock successful registration\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve({ message: \"User registered successfully.\" });\n        }, 1000);\n      });\n    }\n    \n    try {\n      console.log('Attempting registration to:', API_BASE_URL + '/Auth/register');\n      console.log('Registration data:', userData);\n      const response = await api.post('/Auth/register', userData);\n      console.log('Registration response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Registration error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  login: async (credentials) => {\n    if (MOCK_MODE) {\n      console.log('🔐 Mock Login Attempt:', credentials);\n      \n      // Mock successful login with role detection\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          let userRole = \"patient\";\n          let firstName = \"Mock\";\n          let lastName = \"User\";\n          \n          // Detect role based on email\n          if (credentials.email.includes('doctor')) {\n            userRole = \"doctor\";\n            firstName = \"Dr. John\";\n            lastName = \"Smith\";\n          } else if (credentials.email.includes('nurse')) {\n            userRole = \"nurse\";\n            firstName = \"Jane\";\n            lastName = \"Nurse\";\n          } else if (credentials.email.includes('admin')) {\n            userRole = \"admin\";\n            firstName = \"Admin\";\n            lastName = \"User\";\n          } else if (credentials.email.includes('patient')) {\n            userRole = \"patient\";\n            firstName = \"John\";\n            lastName = \"Patient\";\n          }\n          \n          const mockResponse = {\n            token: \"mock-jwt-token-\" + Date.now(),\n            user: {\n              id: \"mock-user-id-\" + userRole,\n              email: credentials.email,\n              firstName: firstName,\n              lastName: lastName,\n              roles: [userRole]\n            }\n          };\n          \n          console.log('✅ Mock Login Success:', mockResponse);\n          resolve(mockResponse);\n        }, 1000);\n      });\n    }\n    \n    try {\n      console.log('Attempting login to:', API_BASE_URL + '/Auth/login');\n      console.log('Credentials:', credentials);\n      const response = await api.post('/Auth/login', credentials);\n      console.log('Login response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Login error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  logout: async () => {\n    if (MOCK_MODE) {\n      // Mock successful logout\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve({ message: \"Logged out successfully\" });\n        }, 500);\n      });\n    }\n    \n    try {\n      const response = await api.post('/Auth/logout');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Services API\nexport const servicesAPI = {\n  getAll: async () => {\n    try {\n      console.log('Fetching services from:', API_BASE_URL + '/Services');\n      const response = await api.get('/Services');\n      console.log('Services response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching services:', error);\n      console.error('Error response:', error.response?.data);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  create: async (serviceData) => {\n    try {\n      const response = await api.post('/Services', serviceData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, serviceData) => {\n    try {\n      const response = await api.put(`/Services/${id}`, serviceData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  delete: async (id) => {\n    try {\n      console.log('Deleting service with ID:', id);\n      const response = await api.delete(`/Services/${id}`);\n      console.log('Delete service response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Delete service error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Time Slots API\nexport const timeSlotsAPI = {\n  getByDay: async (day) => {\n    try {\n      const response = await api.get(`/time-slots/by-day/${day}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAvailable: async (date) => {\n    try {\n      const params = date ? { date } : {};\n      const response = await api.get('/time-slots/available', { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Staff API\nexport const staffAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Staff');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/Staff/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getByRole: async (role) => {\n    try {\n      const response = await api.get(`/Staff/by-role/${role}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getSchedule: async (id, startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get(`/Staff/${id}/schedule`, { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAvailability: async (id, date) => {\n    try {\n      const response = await api.get(`/Staff/${id}/availability`, {\n        params: { date }\n      });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, staffData) => {\n    try {\n      const response = await api.put(`/Staff/${id}`, staffData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateAvailability: async (id, availabilityData) => {\n    try {\n      const response = await api.post(`/Staff/${id}/availability`, availabilityData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Appointments API\nexport const appointmentsAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Appointments');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getDoctorsOnDuty: async (date, serviceId = null) => {\n    if (MOCK_MODE) {\n      // Mock doctors on duty - by default all doctors are on duty\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve({\n            doctors: [\n              {\n                id: \"doctor-1\",\n                firstName: \"John\",\n                lastName: \"Smith\",\n                specialty: \"Cardiology\",\n                rating: 4.8,\n                shiftStart: \"09:00\",\n                shiftEnd: \"17:00\",\n                isAvailable: true,\n                services: [\"consultation\", \"follow-up\"]\n              },\n              {\n                id: \"doctor-2\",\n                firstName: \"Sarah\",\n                lastName: \"Johnson\",\n                specialty: \"Pediatrics\",\n                rating: 4.9,\n                shiftStart: \"08:00\",\n                shiftEnd: \"16:00\",\n                isAvailable: true,\n                services: [\"consultation\", \"vaccination\"]\n              },\n              {\n                id: \"doctor-3\",\n                firstName: \"Michael\",\n                lastName: \"Brown\",\n                specialty: \"General Medicine\",\n                rating: 4.7,\n                shiftStart: \"10:00\",\n                shiftEnd: \"18:00\",\n                isAvailable: true,\n                services: [\"consultation\", \"checkup\"]\n              }\n            ]\n          });\n        }, 500);\n      });\n    }\n    \n    try {\n      const params = { date };\n      if (serviceId) params.serviceId = serviceId;\n      \n      const response = await api.get('/Appointments/doctors-on-duty', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching doctors on duty:', error);\n      // Fallback to existing staff API if new endpoint doesn't exist\n      try {\n        const staffResponse = await api.get('/Staff/by-role/doctor');\n        return { doctors: staffResponse.data };\n      } catch (fallbackError) {\n        throw error.response?.data || error.message;\n      }\n    }\n  },\n\n  getAvailableSlotsByDoctor: async (doctorId, date, serviceId = null) => {\n    try {\n      const params = { doctorId, date };\n      if (serviceId) params.serviceId = serviceId;\n      \n      const response = await api.get('/Appointments/available-slots-by-doctor', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching doctor-specific slots:', error);\n      // Fallback to existing available slots API\n      try {\n        const slotsResponse = await api.get('/Appointments/available-slots', { params: { date } });\n        return { availableSlots: slotsResponse.data };\n      } catch (fallbackError) {\n        throw error.response?.data || error.message;\n      }\n    }\n  },\n\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/Appointments/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getByPatient: async (patientId) => {\n    try {\n      const response = await api.get(`/Appointments/patient/${patientId}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getToday: async () => {\n    try {\n      const response = await api.get('/Appointments/today');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAvailable: async (date) => {\n    try {\n      const response = await api.get('/Appointments/available-slots', {\n        params: { date }\n      });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  create: async (appointmentData) => {\n    try {\n      console.log('Creating appointment with data:', appointmentData);\n      const response = await api.post('/Appointments', appointmentData);\n      console.log('Appointment created successfully:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Appointment creation error:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, appointmentData) => {\n    try {\n      const response = await api.put(`/Appointments/${id}`, appointmentData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateStatus: async (id, status) => {\n    try {\n      const response = await api.put(`/Appointments/${id}/status`, { status });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  delete: async (id) => {\n    try {\n      const response = await api.delete(`/Appointments/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  assignStaff: async (id, staffId) => {\n    try {\n      const response = await api.post(`/Appointments/${id}/assign-staff`, { staffId });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  bookForPatient: async (appointmentData) => {\n    try {\n      const response = await api.post('/Appointments/book-for-patient', appointmentData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Patients API\nexport const patientsAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/Patients');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/Patients/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getByUserId: async (userId) => {\n    try {\n      // Get all patients and find the one with matching userId\n      const response = await api.get('/Patients');\n      const patients = response.data;\n      const patient = patients.find(p => p.userId === userId);\n      if (!patient) {\n        throw new Error('Patient not found for this user');\n      }\n      return patient;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  search: async (query) => {\n    try {\n      const response = await api.get('/Patients/search', { params: { query } });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  update: async (id, patientData) => {\n    try {\n      const response = await api.put(`/Patients/${id}`, patientData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Doctor API\nexport const doctorAPI = {\n  getPatients: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/patients`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getUpcomingAppointments: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/appointments/upcoming`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAllAppointments: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/appointments`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getSchedule: async (doctorId, startDate, endDate) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/schedule`, {\n        params: { startDate, endDate }\n      });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateShiftSchedule: async (doctorId, shiftData) => {\n    try {\n      const response = await api.put(`/Doctor/${doctorId}/shifts`, shiftData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getShiftSchedule: async (doctorId) => {\n    try {\n      const response = await api.get(`/Doctor/${doctorId}/shifts`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  approveAppointment: async (appointmentId) => {\n    try {\n      const response = await api.put(`/Doctor/appointments/${appointmentId}/approve`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  rejectAppointment: async (appointmentId, reason) => {\n    try {\n      const response = await api.put(`/Doctor/appointments/${appointmentId}/reject`, { reason });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getPatientDetails: async (patientId) => {\n    try {\n      const response = await api.get(`/Doctor/patients/${patientId}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  createWalkinAppointment: async (appointmentData) => {\n    try {\n      const response = await api.post('/Doctor/appointments/walkin', appointmentData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\n// Admin API\nexport const adminAPI = {\n  getUsers: async () => {\n    try {\n      const response = await api.get('/Admin/users');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getRoles: async () => {\n    try {\n      const response = await api.get('/Admin/roles');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  createStaff: async (staffData) => {\n    try {\n      const response = await api.post('/Admin/create-staff', staffData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateUserStatus: async (userId, isActive) => {\n    try {\n      const response = await api.put(`/Admin/users/${userId}`, { isActive });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  updateUserRole: async (userId, newRole) => {\n    try {\n      const response = await api.put(`/Admin/users/${userId}/role`, { newRole });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getAppointmentStats: async (startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get('/Admin/reports/appointment-stats', { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  getRevenueReport: async (startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.startDate = startDate;\n      if (endDate) params.endDate = endDate;\n      const response = await api.get('/Admin/reports/revenue', { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}