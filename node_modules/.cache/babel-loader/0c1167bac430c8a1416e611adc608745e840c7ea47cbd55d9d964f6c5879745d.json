{"ast":null,"code":"var _jsxFileName = \"C:\\\\Project\\\\HopewellClinic\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$();\nimport React from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport { AuthProvider, useAuth } from './contexts/AuthContext';\nimport LandingPage from './components/LandingPage';\nimport AuthPage from './components/AuthPage';\nimport PatientDashboard from './components/PatientDashboard';\nimport DoctorDashboard from './components/DoctorDashboard';\nimport AdminDashboard from './components/AdminDashboard';\nimport LoadingSpinner from './components/LoadingSpinner';\n\n// Import the existing API functions\nimport { appointmentsAPI, servicesAPI, patientsAPI, staffAPI, adminAPI } from './services/api';\n\n// Protected Route component\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children,\n  allowedRoles = []\n}) => {\n  _s();\n  const {\n    isAuthenticated,\n    isLoading,\n    hasAnyRole\n  } = useAuth();\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen flex items-center justify-center\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this);\n  }\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/auth\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  }\n  if (allowedRoles.length > 0 && !hasAnyRole(allowedRoles)) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/unauthorized\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n\n// Dashboard wrapper component that handles data loading\n_s(ProtectedRoute, \"QRsE/tUD7olIanpaPmCviy1w10g=\", false, function () {\n  return [useAuth];\n});\n_c = ProtectedRoute;\nconst DashboardWrapper = ({\n  children,\n  user\n}) => {\n  _s2();\n  const [appointments, setAppointments] = React.useState([]);\n  const [services, setServices] = React.useState([]);\n  const [doctors, setDoctors] = React.useState([]);\n  const [availableSlots, setAvailableSlots] = React.useState([]);\n  const [patientId, setPatientId] = React.useState(null);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isBooking, setIsBooking] = React.useState(false);\n  const [bookingError, setBookingError] = React.useState('');\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n\n      // Get the Patient ID from the ApplicationUser ID\n      const patient = await patientsAPI.getByUserId(user.id);\n      setPatientId(patient.id);\n      const [appointmentsData, servicesData, doctorsData] = await Promise.all([appointmentsAPI.getByPatient(patient.id), servicesAPI.getAll(), staffAPI.getByRole('doctor')]);\n      setAppointments(appointmentsData);\n      setServices(servicesData);\n      setDoctors(doctorsData);\n    } catch (error) {\n      console.error('Error loading dashboard data:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const loadAvailableSlots = async date => {\n    try {\n      console.log('Loading available slots for date:', date);\n      const slots = await appointmentsAPI.getAvailable(date);\n      console.log('Available slots received:', slots);\n\n      // Calculate the day of the week for the requested date\n      const requestedDate = new Date(date);\n      const dayOfWeek = requestedDate.getDay(); // 0 = Sunday, 1 = Monday, etc.\n\n      // Filter slots to only include the correct day of the week\n      const filteredSlots = slots.filter(slot => slot.dayOfWeek === dayOfWeek);\n      console.log('Filtered slots for day', dayOfWeek, ':', filteredSlots);\n      setAvailableSlots(filteredSlots);\n    } catch (error) {\n      console.error('Error loading available slots:', error);\n      setAvailableSlots([]);\n    }\n  };\n  const handleBookAppointment = async bookingData => {\n    try {\n      setIsBooking(true);\n      setBookingError('');\n\n      // Calculate end time based on service duration\n      const selectedService = services.find(s => s.id === bookingData.serviceId);\n\n      // Ensure startTime is in HH:mm:ss format\n      const startTimeFormatted = bookingData.startTime.includes(':') && bookingData.startTime.split(':').length === 2 ? bookingData.startTime + ':00' : bookingData.startTime;\n      const startTime = new Date(`2000-01-01T${startTimeFormatted}`);\n      const endTime = new Date(startTime.getTime() + ((selectedService === null || selectedService === void 0 ? void 0 : selectedService.durationMinutes) || 30) * 60000);\n      const endTimeString = endTime.toTimeString().slice(0, 8); // Format as HH:mm:ss\n\n      await appointmentsAPI.create({\n        patientId: patientId,\n        serviceId: bookingData.serviceId,\n        staffId: bookingData.staffId,\n        appointmentDate: bookingData.appointmentDate,\n        startTime: startTimeFormatted,\n        endTime: endTimeString,\n        notes: bookingData.notes || ''\n      });\n\n      // Refresh appointments\n      await loadDashboardData();\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error booking appointment:', error);\n      setBookingError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.message || 'Failed to book appointment');\n    } finally {\n      setIsBooking(false);\n    }\n  };\n  const handleUpdateAppointment = async (appointmentId, updateData) => {\n    try {\n      setIsBooking(true);\n      setBookingError('');\n\n      // Calculate end time based on service duration\n      const selectedService = services.find(s => s.id === updateData.serviceId);\n\n      // Ensure startTime is in HH:mm:ss format\n      const startTimeFormatted = updateData.startTime.includes(':') && updateData.startTime.split(':').length === 2 ? updateData.startTime + ':00' : updateData.startTime;\n      const startTime = new Date(`2000-01-01T${startTimeFormatted}`);\n      const endTime = new Date(startTime.getTime() + ((selectedService === null || selectedService === void 0 ? void 0 : selectedService.durationMinutes) || 30) * 60000);\n      const endTimeString = endTime.toTimeString().slice(0, 8); // Format as HH:mm:ss\n\n      await appointmentsAPI.update(appointmentId, {\n        appointmentDate: updateData.appointmentDate,\n        startTime: startTimeFormatted,\n        endTime: endTimeString,\n        notes: updateData.notes || ''\n      });\n\n      // Refresh appointments\n      await loadDashboardData();\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Error updating appointment:', error);\n      setBookingError(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || error.message || 'Failed to update appointment');\n    } finally {\n      setIsBooking(false);\n    }\n  };\n  const handleCancelAppointment = async appointmentId => {\n    try {\n      setIsBooking(true);\n      setBookingError('');\n      await appointmentsAPI.delete(appointmentId);\n\n      // Refresh appointments\n      await loadDashboardData();\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('Error canceling appointment:', error);\n      setBookingError(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || error.message || 'Failed to cancel appointment');\n    } finally {\n      setIsBooking(false);\n    }\n  };\n  React.useEffect(() => {\n    loadDashboardData();\n  }, [user.id]);\n\n  // Call children as a function with props\n  return children({\n    user,\n    appointments,\n    services,\n    doctors,\n    availableSlots,\n    isLoading,\n    isBooking,\n    bookingError,\n    onBookAppointment: handleBookAppointment,\n    onUpdateAppointment: handleUpdateAppointment,\n    onCancelAppointment: handleCancelAppointment,\n    onLoadAvailableSlots: loadAvailableSlots\n  });\n};\n\n// Doctor Dashboard wrapper component that handles doctor-specific data loading\n_s2(DashboardWrapper, \"QjIZ9+KrVBr9O7c8AGMnUuNJ29A=\");\n_c2 = DashboardWrapper;\nconst DoctorDashboardWrapper = ({\n  children,\n  user\n}) => {\n  _s3();\n  const [appointments, setAppointments] = React.useState([]);\n  const [patients, setPatients] = React.useState([]);\n  const [shiftSchedule, setShiftSchedule] = React.useState([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isProcessing, setIsProcessing] = React.useState(false);\n  const [error, setError] = React.useState('');\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      // For now, use existing endpoints that work\n      // Get all appointments (we'll filter by doctor later when backend supports it)\n      try {\n        const appointmentsData = await appointmentsAPI.getAll();\n        // Filter appointments for this doctor (when staffId is available)\n        setAppointments(appointmentsData);\n      } catch (appointmentsError) {\n        console.log('No appointments endpoint available yet');\n        setAppointments([]);\n      }\n\n      // Get all patients (we'll filter by doctor later when backend supports it)\n      try {\n        const patientsData = await patientsAPI.getAll();\n        setPatients(patientsData);\n      } catch (patientsError) {\n        console.log('No patients endpoint available yet');\n        setPatients([]);\n      }\n\n      // Initialize empty shift schedule (backend not implemented yet)\n      setShiftSchedule([]);\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      console.error('Error loading doctor dashboard data:', error);\n      setError(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || error.message || 'Failed to load dashboard data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleApproveAppointment = async appointmentId => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      // For now, just update the appointment status using existing endpoint\n      await appointmentsAPI.updateStatus(appointmentId, 'confirmed');\n      await loadDashboardData(); // Refresh data\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      console.error('Error approving appointment:', error);\n      setError(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || error.message || 'Failed to approve appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleRejectAppointment = async (appointmentId, reason) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      // For now, just update the appointment status using existing endpoint\n      await appointmentsAPI.updateStatus(appointmentId, 'cancelled');\n      await loadDashboardData(); // Refresh data\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      console.error('Error rejecting appointment:', error);\n      setError(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.error) || error.message || 'Failed to reject appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleUpdateShiftSchedule = async shiftData => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      // For now, just store locally (backend not implemented yet)\n      console.log('Shift schedule update requested:', shiftData);\n      setShiftSchedule(shiftData);\n      // Simulate success\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      console.error('Error updating shift schedule:', error);\n      setError(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.error) || error.message || 'Failed to update shift schedule');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleViewPatientDetails = async patientId => {\n    try {\n      setError('');\n      // For now, just log the request (backend not implemented yet)\n      console.log('View patient details requested for:', patientId);\n    } catch (error) {\n      var _error$response8, _error$response8$data;\n      console.error('Error loading patient details:', error);\n      setError(((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.error) || error.message || 'Failed to load patient details');\n    }\n  };\n  React.useEffect(() => {\n    loadDashboardData();\n  }, [user.id]);\n\n  // Call children as a function with props\n  return children({\n    user,\n    appointments,\n    patients,\n    shiftSchedule,\n    isLoading,\n    isProcessing,\n    error,\n    onApproveAppointment: handleApproveAppointment,\n    onRejectAppointment: handleRejectAppointment,\n    onUpdateShiftSchedule: handleUpdateShiftSchedule,\n    onViewPatientDetails: handleViewPatientDetails\n  });\n};\n\n// Admin Dashboard wrapper component that handles admin-specific data loading\n_s3(DoctorDashboardWrapper, \"ya1EbW4cNEBtBdbguKY5LBWokLw=\");\n_c3 = DoctorDashboardWrapper;\nconst AdminDashboardWrapper = ({\n  children,\n  user\n}) => {\n  _s4();\n  const [users, setUsers] = React.useState([]);\n  const [appointments, setAppointments] = React.useState([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isProcessing, setIsProcessing] = React.useState(false);\n  const [error, setError] = React.useState('');\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      // Get all users\n      const usersData = await adminAPI.getUsers();\n      setUsers(usersData);\n\n      // Get all appointments (we'll need to implement this endpoint)\n      try {\n        // For now, we'll use the existing appointments API\n        const appointmentsData = await appointmentsAPI.getAll();\n        setAppointments(appointmentsData);\n      } catch (appointmentsError) {\n        console.log('No appointments endpoint available yet');\n        setAppointments([]);\n      }\n    } catch (error) {\n      var _error$response9, _error$response9$data;\n      console.error('Error loading admin dashboard data:', error);\n      setError(((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.error) || error.message || 'Failed to load dashboard data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleToggleUserStatus = async (userId, isActive) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await adminAPI.updateUserStatus(userId, isActive);\n      await loadDashboardData(); // Refresh data\n    } catch (error) {\n      var _error$response0, _error$response0$data;\n      console.error('Error updating user status:', error);\n      setError(((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : (_error$response0$data = _error$response0.data) === null || _error$response0$data === void 0 ? void 0 : _error$response0$data.error) || error.message || 'Failed to update user status');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleUpdateUserRole = async (userId, newRole) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await adminAPI.updateUserRole(userId, newRole);\n      await loadDashboardData(); // Refresh data\n    } catch (error) {\n      var _error$response1, _error$response1$data;\n      console.error('Error updating user role:', error);\n      setError(((_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : (_error$response1$data = _error$response1.data) === null || _error$response1$data === void 0 ? void 0 : _error$response1$data.error) || error.message || 'Failed to update user role');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleCreateStaff = async staffData => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await adminAPI.createStaff(staffData);\n      await loadDashboardData(); // Refresh data\n    } catch (error) {\n      var _error$response10, _error$response10$dat;\n      console.error('Error creating staff:', error);\n      setError(((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : (_error$response10$dat = _error$response10.data) === null || _error$response10$dat === void 0 ? void 0 : _error$response10$dat.error) || error.message || 'Failed to create staff member');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  React.useEffect(() => {\n    loadDashboardData();\n  }, [user.id]);\n\n  // Call children as a function with props\n  return children({\n    user,\n    users,\n    appointments,\n    isLoading,\n    isProcessing,\n    error,\n    onToggleUserStatus: handleToggleUserStatus,\n    onUpdateUserRole: handleUpdateUserRole,\n    onCreateStaff: handleCreateStaff\n  });\n};\n\n// Main App Routes component\n_s4(AdminDashboardWrapper, \"aSTXwFmpbPmnH6LGR3ymme4yjJc=\");\n_c4 = AdminDashboardWrapper;\nconst AppRoutes = () => {\n  _s5();\n  var _user$roles, _user$roles2;\n  const {\n    isAuthenticated,\n    user,\n    login,\n    register,\n    logout,\n    isLoading,\n    error,\n    clearError\n  } = useAuth();\n  const handleLogin = async (email, password) => {\n    try {\n      await login({\n        email,\n        password\n      });\n    } catch (err) {\n      // Error is handled by AuthContext\n    }\n  };\n  const handleRegister = async userData => {\n    try {\n      await register(userData);\n    } catch (err) {\n      // Error is handled by AuthContext\n    }\n  };\n  const handleLogout = () => {\n    logout();\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen flex items-center justify-center\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      element: /*#__PURE__*/_jsxDEV(LandingPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/auth\",\n      element: isAuthenticated ? /*#__PURE__*/_jsxDEV(Navigate, {\n        to: user !== null && user !== void 0 && (_user$roles = user.roles) !== null && _user$roles !== void 0 && _user$roles.includes('admin') ? '/admin-dashboard' : user !== null && user !== void 0 && (_user$roles2 = user.roles) !== null && _user$roles2 !== void 0 && _user$roles2.includes('doctor') ? '/doctor-dashboard' : '/patient-dashboard',\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(AuthPage, {\n        onLogin: handleLogin,\n        onRegister: handleRegister,\n        isLoading: isLoading,\n        error: error,\n        clearError: clearError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/patient-dashboard\",\n      element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n        allowedRoles: ['patient'],\n        children: /*#__PURE__*/_jsxDEV(DashboardWrapper, {\n          user: user,\n          children: props => /*#__PURE__*/_jsxDEV(PatientDashboard, {\n            ...props,\n            onLogout: handleLogout\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/doctor-dashboard\",\n      element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n        allowedRoles: ['doctor'],\n        children: /*#__PURE__*/_jsxDEV(DoctorDashboardWrapper, {\n          user: user,\n          children: props => /*#__PURE__*/_jsxDEV(DoctorDashboard, {\n            ...props,\n            onLogout: handleLogout\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/admin-dashboard\",\n      element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n        allowedRoles: ['admin'],\n        children: /*#__PURE__*/_jsxDEV(AdminDashboardWrapper, {\n          user: user,\n          children: props => /*#__PURE__*/_jsxDEV(AdminDashboard, {\n            ...props,\n            onLogout: handleLogout\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 517,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/unauthorized\",\n      element: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"min-h-screen flex items-center justify-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-2xl font-bold text-foreground mb-4\",\n            children: \"Unauthorized\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-muted-foreground mb-4\",\n            children: \"You don't have permission to access this page.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleLogout,\n            className: \"px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90\",\n            children: \"Sign Out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"*\",\n      element: /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/\",\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 465,\n    columnNumber: 5\n  }, this);\n};\n\n// Main App component\n_s5(AppRoutes, \"GaGKisbCmmD5CAA51vWhAmj0u90=\", false, function () {\n  return [useAuth];\n});\n_c5 = AppRoutes;\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(AuthProvider, {\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/_jsxDEV(AppRoutes, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 548,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 547,\n    columnNumber: 5\n  }, this);\n};\n_c6 = App;\nexport default App;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"ProtectedRoute\");\n$RefreshReg$(_c2, \"DashboardWrapper\");\n$RefreshReg$(_c3, \"DoctorDashboardWrapper\");\n$RefreshReg$(_c4, \"AdminDashboardWrapper\");\n$RefreshReg$(_c5, \"AppRoutes\");\n$RefreshReg$(_c6, \"App\");","map":{"version":3,"names":["React","BrowserRouter","Router","Routes","Route","Navigate","AuthProvider","useAuth","LandingPage","AuthPage","PatientDashboard","DoctorDashboard","AdminDashboard","LoadingSpinner","appointmentsAPI","servicesAPI","patientsAPI","staffAPI","adminAPI","jsxDEV","_jsxDEV","Fragment","_Fragment","ProtectedRoute","children","allowedRoles","_s","isAuthenticated","isLoading","hasAnyRole","className","fileName","_jsxFileName","lineNumber","columnNumber","to","replace","length","_c","DashboardWrapper","user","_s2","appointments","setAppointments","useState","services","setServices","doctors","setDoctors","availableSlots","setAvailableSlots","patientId","setPatientId","setIsLoading","isBooking","setIsBooking","bookingError","setBookingError","loadDashboardData","patient","getByUserId","id","appointmentsData","servicesData","doctorsData","Promise","all","getByPatient","getAll","getByRole","error","console","loadAvailableSlots","date","log","slots","getAvailable","requestedDate","Date","dayOfWeek","getDay","filteredSlots","filter","slot","handleBookAppointment","bookingData","selectedService","find","s","serviceId","startTimeFormatted","startTime","includes","split","endTime","getTime","durationMinutes","endTimeString","toTimeString","slice","create","staffId","appointmentDate","notes","_error$response","_error$response$data","response","data","message","handleUpdateAppointment","appointmentId","updateData","update","_error$response2","_error$response2$data","handleCancelAppointment","delete","_error$response3","_error$response3$data","useEffect","onBookAppointment","onUpdateAppointment","onCancelAppointment","onLoadAvailableSlots","_c2","DoctorDashboardWrapper","_s3","patients","setPatients","shiftSchedule","setShiftSchedule","isProcessing","setIsProcessing","setError","appointmentsError","patientsData","patientsError","_error$response4","_error$response4$data","handleApproveAppointment","updateStatus","_error$response5","_error$response5$data","handleRejectAppointment","reason","_error$response6","_error$response6$data","handleUpdateShiftSchedule","shiftData","resolve","setTimeout","_error$response7","_error$response7$data","handleViewPatientDetails","_error$response8","_error$response8$data","onApproveAppointment","onRejectAppointment","onUpdateShiftSchedule","onViewPatientDetails","_c3","AdminDashboardWrapper","_s4","users","setUsers","usersData","getUsers","_error$response9","_error$response9$data","handleToggleUserStatus","userId","isActive","updateUserStatus","_error$response0","_error$response0$data","handleUpdateUserRole","newRole","updateUserRole","_error$response1","_error$response1$data","handleCreateStaff","staffData","createStaff","_error$response10","_error$response10$dat","onToggleUserStatus","onUpdateUserRole","onCreateStaff","_c4","AppRoutes","_s5","_user$roles","_user$roles2","login","register","logout","clearError","handleLogin","email","password","err","handleRegister","userData","handleLogout","path","element","roles","onLogin","onRegister","props","onLogout","onClick","_c5","App","_c6","$RefreshReg$"],"sources":["C:/Project/HopewellClinic/src/App.tsx"],"sourcesContent":["import React from 'react';\r\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\r\nimport { AuthProvider, useAuth } from './contexts/AuthContext';\r\nimport LandingPage from './components/LandingPage';\r\nimport AuthPage from './components/AuthPage';\r\nimport PatientDashboard from './components/PatientDashboard';\r\nimport DoctorDashboard from './components/DoctorDashboard';\r\nimport AdminDashboard from './components/AdminDashboard';\r\nimport NurseDashboard from './components/NurseDashboard';\r\nimport LoadingSpinner from './components/LoadingSpinner';\r\n\r\n// Import the existing API functions\r\nimport { appointmentsAPI, servicesAPI, patientsAPI, staffAPI, doctorAPI, adminAPI } from './services/api';\r\n\r\n// Protected Route component\r\nconst ProtectedRoute: React.FC<{ \r\n  children: React.ReactNode; \r\n  allowedRoles?: string[] \r\n}> = ({ children, allowedRoles = [] }) => {\r\n  const { isAuthenticated, isLoading, hasAnyRole } = useAuth();\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!isAuthenticated) {\r\n    return <Navigate to=\"/auth\" replace />;\r\n  }\r\n\r\n  if (allowedRoles.length > 0 && !hasAnyRole(allowedRoles)) {\r\n    return <Navigate to=\"/unauthorized\" replace />;\r\n  }\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\n// Dashboard wrapper component that handles data loading\r\nconst DashboardWrapper: React.FC<{ \r\n  children: (props: any) => React.ReactNode;\r\n  user: any;\r\n}> = ({ children, user }) => {\r\n  const [appointments, setAppointments] = React.useState([]);\r\n  const [services, setServices] = React.useState([]);\r\n  const [doctors, setDoctors] = React.useState([]);\r\n  const [availableSlots, setAvailableSlots] = React.useState([]);\r\n  const [patientId, setPatientId] = React.useState<string | null>(null);\r\n  const [isLoading, setIsLoading] = React.useState(true);\r\n  const [isBooking, setIsBooking] = React.useState(false);\r\n  const [bookingError, setBookingError] = React.useState('');\r\n\r\n  const loadDashboardData = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      \r\n      // Get the Patient ID from the ApplicationUser ID\r\n      const patient = await patientsAPI.getByUserId(user.id);\r\n      setPatientId(patient.id);\r\n      \r\n      const [appointmentsData, servicesData, doctorsData] = await Promise.all([\r\n        appointmentsAPI.getByPatient(patient.id),\r\n        servicesAPI.getAll(),\r\n        staffAPI.getByRole('doctor')\r\n      ]);\r\n      setAppointments(appointmentsData);\r\n      setServices(servicesData);\r\n      setDoctors(doctorsData);\r\n    } catch (error) {\r\n      console.error('Error loading dashboard data:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadAvailableSlots = async (date: string) => {\r\n    try {\r\n      console.log('Loading available slots for date:', date);\r\n      const slots = await appointmentsAPI.getAvailable(date);\r\n      console.log('Available slots received:', slots);\r\n      \r\n      // Calculate the day of the week for the requested date\r\n      const requestedDate = new Date(date);\r\n      const dayOfWeek = requestedDate.getDay(); // 0 = Sunday, 1 = Monday, etc.\r\n      \r\n      // Filter slots to only include the correct day of the week\r\n      const filteredSlots = slots.filter((slot: any) => slot.dayOfWeek === dayOfWeek);\r\n      console.log('Filtered slots for day', dayOfWeek, ':', filteredSlots);\r\n      \r\n      setAvailableSlots(filteredSlots);\r\n    } catch (error) {\r\n      console.error('Error loading available slots:', error);\r\n      setAvailableSlots([]);\r\n    }\r\n  };\r\n\r\n  const handleBookAppointment = async (bookingData: any) => {\r\n    try {\r\n      setIsBooking(true);\r\n      setBookingError('');\r\n      \r\n      // Calculate end time based on service duration\r\n      const selectedService = services.find((s: any) => s.id === bookingData.serviceId) as any;\r\n      \r\n      // Ensure startTime is in HH:mm:ss format\r\n      const startTimeFormatted = bookingData.startTime.includes(':') && bookingData.startTime.split(':').length === 2 \r\n        ? bookingData.startTime + ':00' \r\n        : bookingData.startTime;\r\n      \r\n      const startTime = new Date(`2000-01-01T${startTimeFormatted}`);\r\n      const endTime = new Date(startTime.getTime() + (selectedService?.durationMinutes || 30) * 60000);\r\n      \r\n      const endTimeString = endTime.toTimeString().slice(0, 8); // Format as HH:mm:ss\r\n      \r\n      await appointmentsAPI.create({\r\n        patientId: patientId,\r\n        serviceId: bookingData.serviceId,\r\n        staffId: bookingData.staffId,\r\n        appointmentDate: bookingData.appointmentDate,\r\n        startTime: startTimeFormatted,\r\n        endTime: endTimeString,\r\n        notes: bookingData.notes || ''\r\n      });\r\n\r\n      // Refresh appointments\r\n      await loadDashboardData();\r\n    } catch (error: any) {\r\n      console.error('Error booking appointment:', error);\r\n      setBookingError(error.response?.data?.error || error.message || 'Failed to book appointment');\r\n    } finally {\r\n      setIsBooking(false);\r\n    }\r\n  };\r\n\r\n  const handleUpdateAppointment = async (appointmentId: string, updateData: any) => {\r\n    try {\r\n      setIsBooking(true);\r\n      setBookingError('');\r\n      \r\n      // Calculate end time based on service duration\r\n      const selectedService = services.find((s: any) => s.id === updateData.serviceId) as any;\r\n      \r\n      // Ensure startTime is in HH:mm:ss format\r\n      const startTimeFormatted = updateData.startTime.includes(':') && updateData.startTime.split(':').length === 2 \r\n        ? updateData.startTime + ':00' \r\n        : updateData.startTime;\r\n      \r\n      const startTime = new Date(`2000-01-01T${startTimeFormatted}`);\r\n      const endTime = new Date(startTime.getTime() + (selectedService?.durationMinutes || 30) * 60000);\r\n      \r\n      const endTimeString = endTime.toTimeString().slice(0, 8); // Format as HH:mm:ss\r\n      \r\n      await appointmentsAPI.update(appointmentId, {\r\n        appointmentDate: updateData.appointmentDate,\r\n        startTime: startTimeFormatted,\r\n        endTime: endTimeString,\r\n        notes: updateData.notes || ''\r\n      });\r\n\r\n      // Refresh appointments\r\n      await loadDashboardData();\r\n    } catch (error: any) {\r\n      console.error('Error updating appointment:', error);\r\n      setBookingError(error.response?.data?.error || error.message || 'Failed to update appointment');\r\n    } finally {\r\n      setIsBooking(false);\r\n    }\r\n  };\r\n\r\n  const handleCancelAppointment = async (appointmentId: string) => {\r\n    try {\r\n      setIsBooking(true);\r\n      setBookingError('');\r\n      \r\n      await appointmentsAPI.delete(appointmentId);\r\n\r\n      // Refresh appointments\r\n      await loadDashboardData();\r\n    } catch (error: any) {\r\n      console.error('Error canceling appointment:', error);\r\n      setBookingError(error.response?.data?.error || error.message || 'Failed to cancel appointment');\r\n    } finally {\r\n      setIsBooking(false);\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    loadDashboardData();\r\n  }, [user.id]);\r\n\r\n  // Call children as a function with props\r\n  return children({\r\n    user,\r\n    appointments,\r\n    services,\r\n    doctors,\r\n    availableSlots,\r\n    isLoading,\r\n    isBooking,\r\n    bookingError,\r\n    onBookAppointment: handleBookAppointment,\r\n    onUpdateAppointment: handleUpdateAppointment,\r\n    onCancelAppointment: handleCancelAppointment,\r\n    onLoadAvailableSlots: loadAvailableSlots\r\n  });\r\n};\r\n\r\n// Doctor Dashboard wrapper component that handles doctor-specific data loading\r\nconst DoctorDashboardWrapper: React.FC<{ \r\n  children: (props: any) => React.ReactNode;\r\n  user: any;\r\n}> = ({ children, user }) => {\r\n  const [appointments, setAppointments] = React.useState<any[]>([]);\r\n  const [patients, setPatients] = React.useState<any[]>([]);\r\n  const [shiftSchedule, setShiftSchedule] = React.useState<any[]>([]);\r\n  const [isLoading, setIsLoading] = React.useState(true);\r\n  const [isProcessing, setIsProcessing] = React.useState(false);\r\n  const [error, setError] = React.useState('');\r\n\r\n  const loadDashboardData = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      setError('');\r\n\r\n      // For now, use existing endpoints that work\r\n      // Get all appointments (we'll filter by doctor later when backend supports it)\r\n      try {\r\n        const appointmentsData = await appointmentsAPI.getAll();\r\n        // Filter appointments for this doctor (when staffId is available)\r\n        setAppointments(appointmentsData);\r\n      } catch (appointmentsError) {\r\n        console.log('No appointments endpoint available yet');\r\n        setAppointments([]);\r\n      }\r\n\r\n      // Get all patients (we'll filter by doctor later when backend supports it)\r\n      try {\r\n        const patientsData = await patientsAPI.getAll();\r\n        setPatients(patientsData);\r\n      } catch (patientsError) {\r\n        console.log('No patients endpoint available yet');\r\n        setPatients([]);\r\n      }\r\n\r\n      // Initialize empty shift schedule (backend not implemented yet)\r\n      setShiftSchedule([]);\r\n    } catch (error: any) {\r\n      console.error('Error loading doctor dashboard data:', error);\r\n      setError(error.response?.data?.error || error.message || 'Failed to load dashboard data');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleApproveAppointment = async (appointmentId: string) => {\r\n    try {\r\n      setIsProcessing(true);\r\n      setError('');\r\n      // For now, just update the appointment status using existing endpoint\r\n      await appointmentsAPI.updateStatus(appointmentId, 'confirmed');\r\n      await loadDashboardData(); // Refresh data\r\n    } catch (error: any) {\r\n      console.error('Error approving appointment:', error);\r\n      setError(error.response?.data?.error || error.message || 'Failed to approve appointment');\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  const handleRejectAppointment = async (appointmentId: string, reason: string) => {\r\n    try {\r\n      setIsProcessing(true);\r\n      setError('');\r\n      // For now, just update the appointment status using existing endpoint\r\n      await appointmentsAPI.updateStatus(appointmentId, 'cancelled');\r\n      await loadDashboardData(); // Refresh data\r\n    } catch (error: any) {\r\n      console.error('Error rejecting appointment:', error);\r\n      setError(error.response?.data?.error || error.message || 'Failed to reject appointment');\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  const handleUpdateShiftSchedule = async (shiftData: any[]) => {\r\n    try {\r\n      setIsProcessing(true);\r\n      setError('');\r\n      // For now, just store locally (backend not implemented yet)\r\n      console.log('Shift schedule update requested:', shiftData);\r\n      setShiftSchedule(shiftData);\r\n      // Simulate success\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n    } catch (error: any) {\r\n      console.error('Error updating shift schedule:', error);\r\n      setError(error.response?.data?.error || error.message || 'Failed to update shift schedule');\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  const handleViewPatientDetails = async (patientId: string) => {\r\n    try {\r\n      setError('');\r\n      // For now, just log the request (backend not implemented yet)\r\n      console.log('View patient details requested for:', patientId);\r\n    } catch (error: any) {\r\n      console.error('Error loading patient details:', error);\r\n      setError(error.response?.data?.error || error.message || 'Failed to load patient details');\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    loadDashboardData();\r\n  }, [user.id]);\r\n\r\n  // Call children as a function with props\r\n  return children({\r\n    user,\r\n    appointments,\r\n    patients,\r\n    shiftSchedule,\r\n    isLoading,\r\n    isProcessing,\r\n    error,\r\n    onApproveAppointment: handleApproveAppointment,\r\n    onRejectAppointment: handleRejectAppointment,\r\n    onUpdateShiftSchedule: handleUpdateShiftSchedule,\r\n    onViewPatientDetails: handleViewPatientDetails\r\n  });\r\n};\r\n\r\n// Admin Dashboard wrapper component that handles admin-specific data loading\r\nconst AdminDashboardWrapper: React.FC<{ \r\n  children: (props: any) => React.ReactNode;\r\n  user: any;\r\n}> = ({ children, user }) => {\r\n  const [users, setUsers] = React.useState([]);\r\n  const [appointments, setAppointments] = React.useState([]);\r\n  const [isLoading, setIsLoading] = React.useState(true);\r\n  const [isProcessing, setIsProcessing] = React.useState(false);\r\n  const [error, setError] = React.useState('');\r\n\r\n  const loadDashboardData = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      setError('');\r\n\r\n      // Get all users\r\n      const usersData = await adminAPI.getUsers();\r\n      setUsers(usersData);\r\n\r\n      // Get all appointments (we'll need to implement this endpoint)\r\n      try {\r\n        // For now, we'll use the existing appointments API\r\n        const appointmentsData = await appointmentsAPI.getAll();\r\n        setAppointments(appointmentsData);\r\n      } catch (appointmentsError) {\r\n        console.log('No appointments endpoint available yet');\r\n        setAppointments([]);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error loading admin dashboard data:', error);\r\n      setError(error.response?.data?.error || error.message || 'Failed to load dashboard data');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleToggleUserStatus = async (userId: string, isActive: boolean) => {\r\n    try {\r\n      setIsProcessing(true);\r\n      setError('');\r\n      await adminAPI.updateUserStatus(userId, isActive);\r\n      await loadDashboardData(); // Refresh data\r\n    } catch (error: any) {\r\n      console.error('Error updating user status:', error);\r\n      setError(error.response?.data?.error || error.message || 'Failed to update user status');\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  const handleUpdateUserRole = async (userId: string, newRole: string) => {\r\n    try {\r\n      setIsProcessing(true);\r\n      setError('');\r\n      await adminAPI.updateUserRole(userId, newRole);\r\n      await loadDashboardData(); // Refresh data\r\n    } catch (error: any) {\r\n      console.error('Error updating user role:', error);\r\n      setError(error.response?.data?.error || error.message || 'Failed to update user role');\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  const handleCreateStaff = async (staffData: any) => {\r\n    try {\r\n      setIsProcessing(true);\r\n      setError('');\r\n      await adminAPI.createStaff(staffData);\r\n      await loadDashboardData(); // Refresh data\r\n    } catch (error: any) {\r\n      console.error('Error creating staff:', error);\r\n      setError(error.response?.data?.error || error.message || 'Failed to create staff member');\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    loadDashboardData();\r\n  }, [user.id]);\r\n\r\n  // Call children as a function with props\r\n  return children({\r\n    user,\r\n    users,\r\n    appointments,\r\n    isLoading,\r\n    isProcessing,\r\n    error,\r\n    onToggleUserStatus: handleToggleUserStatus,\r\n    onUpdateUserRole: handleUpdateUserRole,\r\n    onCreateStaff: handleCreateStaff\r\n  });\r\n};\r\n\r\n// Main App Routes component\r\nconst AppRoutes: React.FC = () => {\r\n  const { isAuthenticated, user, login, register, logout, isLoading, error, clearError } = useAuth();\r\n\r\n  const handleLogin = async (email: string, password: string) => {\r\n    try {\r\n      await login({ email, password });\r\n    } catch (err) {\r\n      // Error is handled by AuthContext\r\n    }\r\n  };\r\n\r\n  const handleRegister = async (userData: any) => {\r\n    try {\r\n      await register(userData);\r\n    } catch (err) {\r\n      // Error is handled by AuthContext\r\n    }\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    logout();\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Routes>\r\n      {/* Public Routes */}\r\n      <Route path=\"/\" element={<LandingPage />} />\r\n      <Route \r\n        path=\"/auth\" \r\n        element={\r\n          isAuthenticated ? (\r\n            <Navigate to={\r\n              user?.roles?.includes('admin') ? '/admin-dashboard' :\r\n              user?.roles?.includes('doctor') ? '/doctor-dashboard' : \r\n              '/patient-dashboard'\r\n            } replace />\r\n          ) : (\r\n            <AuthPage\r\n              onLogin={handleLogin}\r\n              onRegister={handleRegister}\r\n              isLoading={isLoading}\r\n              error={error}\r\n              clearError={clearError}\r\n            />\r\n          )\r\n        } \r\n      />\r\n\r\n      {/* Protected Routes */}\r\n      <Route\r\n        path=\"/patient-dashboard\"\r\n        element={\r\n          <ProtectedRoute allowedRoles={['patient']}>\r\n            <DashboardWrapper user={user}>\r\n              {(props) => <PatientDashboard {...props} onLogout={handleLogout} />}\r\n            </DashboardWrapper>\r\n          </ProtectedRoute>\r\n        }\r\n      />\r\n\r\n      <Route\r\n        path=\"/doctor-dashboard\"\r\n        element={\r\n          <ProtectedRoute allowedRoles={['doctor']}>\r\n            <DoctorDashboardWrapper user={user}>\r\n              {(props) => <DoctorDashboard {...props} onLogout={handleLogout} />}\r\n            </DoctorDashboardWrapper>\r\n          </ProtectedRoute>\r\n        }\r\n      />\r\n\r\n      <Route\r\n        path=\"/admin-dashboard\"\r\n        element={\r\n          <ProtectedRoute allowedRoles={['admin']}>\r\n            <AdminDashboardWrapper user={user}>\r\n              {(props) => <AdminDashboard {...props} onLogout={handleLogout} />}\r\n            </AdminDashboardWrapper>\r\n          </ProtectedRoute>\r\n        }\r\n      />\r\n\r\n      {/* Fallback Routes */}\r\n      <Route path=\"/unauthorized\" element={\r\n        <div className=\"min-h-screen flex items-center justify-center\">\r\n          <div className=\"text-center\">\r\n            <h1 className=\"text-2xl font-bold text-foreground mb-4\">Unauthorized</h1>\r\n            <p className=\"text-muted-foreground mb-4\">You don't have permission to access this page.</p>\r\n            <button \r\n              onClick={handleLogout}\r\n              className=\"px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90\"\r\n            >\r\n              Sign Out\r\n            </button>\r\n          </div>\r\n        </div>\r\n      } />\r\n      \r\n      <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\r\n    </Routes>\r\n  );\r\n};\r\n\r\n// Main App component\r\nconst App: React.FC = () => {\r\n  return (\r\n    <AuthProvider>\r\n      <Router>\r\n        <div className=\"App\">\r\n          <AppRoutes />\r\n        </div>\r\n      </Router>\r\n    </AuthProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}