{"ast":null,"code":"import _objectSpread from\"C:/Project/HopewellClinic/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React from'react';import{BrowserRouter as Router,Routes,Route,Navigate}from'react-router-dom';import{AuthProvider,useAuth}from'./contexts/AuthContext';import LandingPage from'./components/LandingPage';import AuthPage from'./components/AuthPage';import PatientDashboard from'./components/PatientDashboard';import DoctorDashboard from'./components/DoctorDashboard';import AdminDashboard from'./components/AdminDashboard';import NurseDashboard from'./components/NurseDashboard';import LoadingSpinner from'./components/LoadingSpinner';// Import the existing API functions\nimport{appointmentsAPI,servicesAPI,patientsAPI,staffAPI,doctorAPI,adminAPI}from'./services/api';// Protected Route component\nimport{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const ProtectedRoute=_ref=>{let{children,allowedRoles=[]}=_ref;const{isAuthenticated,isLoading,hasAnyRole}=useAuth();if(isLoading){return/*#__PURE__*/_jsx(\"div\",{className:\"min-h-screen flex items-center justify-center\",children:/*#__PURE__*/_jsx(LoadingSpinner,{})});}if(!isAuthenticated){return/*#__PURE__*/_jsx(Navigate,{to:\"/auth\",replace:true});}if(allowedRoles.length>0&&!hasAnyRole(allowedRoles)){return/*#__PURE__*/_jsx(Navigate,{to:\"/unauthorized\",replace:true});}return/*#__PURE__*/_jsx(_Fragment,{children:children});};// Dashboard wrapper component that handles data loading\nconst DashboardWrapper=_ref2=>{let{children,user}=_ref2;const[appointments,setAppointments]=React.useState([]);const[services,setServices]=React.useState([]);const[doctors,setDoctors]=React.useState([]);const[availableSlots,setAvailableSlots]=React.useState([]);const[patientId,setPatientId]=React.useState(null);const[isLoading,setIsLoading]=React.useState(true);const[isBooking,setIsBooking]=React.useState(false);const[bookingError,setBookingError]=React.useState('');const loadDashboardData=async()=>{try{setIsLoading(true);// Get the Patient ID from the ApplicationUser ID\nconsole.log('üîç Loading dashboard data for user:',user);console.log('üîç User ID:',user.id);try{const patient=await patientsAPI.getByUserId(user.id);console.log('‚úÖ Found patient record:',patient);setPatientId(patient.id);const[appointmentsData,servicesData,doctorsData]=await Promise.all([appointmentsAPI.getByPatient(patient.id),servicesAPI.getAll(),staffAPI.getByRole('doctor')]);setAppointments(appointmentsData);setServices(servicesData);setDoctors(doctorsData);}catch(patientError){console.error('‚ùå Error finding patient record:',patientError);console.log('‚ö†Ô∏è Patient not found for user ID:',user.id);// Set patientId to null to trigger the error in BookingWizard\nsetPatientId(null);// Still try to load other data\ntry{const[servicesData,doctorsData]=await Promise.all([servicesAPI.getAll(),staffAPI.getByRole('doctor')]);setServices(servicesData);setDoctors(doctorsData);setAppointments([]);// No appointments without patient\n}catch(otherError){console.error('‚ùå Error loading other dashboard data:',otherError);}}}catch(error){console.error('‚ùå Error loading dashboard data:',error);}finally{setIsLoading(false);}};const loadAvailableSlots=async date=>{try{console.log('Loading available slots for date:',date);const slots=await appointmentsAPI.getAvailable(date);console.log('Available slots received:',slots);// Calculate the day of the week for the requested date\nconst requestedDate=new Date(date);const dayOfWeek=requestedDate.getDay();// 0 = Sunday, 1 = Monday, etc.\n// Filter slots to only include the correct day of the week\nconst filteredSlots=slots.filter(slot=>slot.dayOfWeek===dayOfWeek);console.log('Filtered slots for day',dayOfWeek,':',filteredSlots);setAvailableSlots(filteredSlots);}catch(error){console.error('Error loading available slots:',error);setAvailableSlots([]);}};const handleBookAppointment=async bookingData=>{try{setIsBooking(true);setBookingError('');// Calculate end time based on service duration\nconst selectedService=services.find(s=>s.id===bookingData.serviceId);// Ensure startTime is in HH:mm:ss format\nconst startTimeFormatted=bookingData.startTime.includes(':')&&bookingData.startTime.split(':').length===2?bookingData.startTime+':00':bookingData.startTime;const startTime=new Date(\"2000-01-01T\".concat(startTimeFormatted));const endTime=new Date(startTime.getTime()+((selectedService===null||selectedService===void 0?void 0:selectedService.durationMinutes)||30)*60000);const endTimeString=endTime.toTimeString().slice(0,8);// Format as HH:mm:ss\nawait appointmentsAPI.create({patientId:patientId,serviceId:bookingData.serviceId,staffId:bookingData.staffId,appointmentDate:bookingData.appointmentDate,startTime:startTimeFormatted,endTime:endTimeString,notes:bookingData.notes||''});// Refresh appointments\nawait loadDashboardData();}catch(error){var _error$response,_error$response$data;console.error('Error booking appointment:',error);setBookingError(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.error)||error.message||'Failed to book appointment');}finally{setIsBooking(false);}};const handleUpdateAppointment=async(appointmentId,updateData)=>{try{setIsBooking(true);setBookingError('');// Calculate end time based on service duration\nconst selectedService=services.find(s=>s.id===updateData.serviceId);// Ensure startTime is in HH:mm:ss format\nconst startTimeFormatted=updateData.startTime.includes(':')&&updateData.startTime.split(':').length===2?updateData.startTime+':00':updateData.startTime;const startTime=new Date(\"2000-01-01T\".concat(startTimeFormatted));const endTime=new Date(startTime.getTime()+((selectedService===null||selectedService===void 0?void 0:selectedService.durationMinutes)||30)*60000);const endTimeString=endTime.toTimeString().slice(0,8);// Format as HH:mm:ss\nawait appointmentsAPI.update(appointmentId,{appointmentDate:updateData.appointmentDate,startTime:startTimeFormatted,endTime:endTimeString,notes:updateData.notes||''});// Refresh appointments\nawait loadDashboardData();}catch(error){var _error$response2,_error$response2$data;console.error('Error updating appointment:',error);setBookingError(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.error)||error.message||'Failed to update appointment');}finally{setIsBooking(false);}};const handleCancelAppointment=async appointmentId=>{try{setIsBooking(true);setBookingError('');await appointmentsAPI.delete(appointmentId);// Refresh appointments\nawait loadDashboardData();}catch(error){var _error$response3,_error$response3$data;console.error('Error canceling appointment:',error);setBookingError(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.error)||error.message||'Failed to cancel appointment');}finally{setIsBooking(false);}};React.useEffect(()=>{loadDashboardData();},[user.id]);// Call children as a function with props\nreturn children({user,appointments,services,doctors,availableSlots,patientId,isLoading,isBooking,bookingError,onBookAppointment:handleBookAppointment,onUpdateAppointment:handleUpdateAppointment,onCancelAppointment:handleCancelAppointment,onLoadAvailableSlots:loadAvailableSlots,onRefreshAppointments:loadDashboardData});};// Doctor Dashboard wrapper component that handles doctor-specific data loading\nconst DoctorDashboardWrapper=_ref3=>{let{children,user}=_ref3;const[appointments,setAppointments]=React.useState([]);const[patients,setPatients]=React.useState([]);const[shiftSchedule,setShiftSchedule]=React.useState([]);const[staffId,setStaffId]=React.useState('');const[isLoading,setIsLoading]=React.useState(true);const[isProcessing,setIsProcessing]=React.useState(false);const[error,setError]=React.useState('');const loadDashboardData=async()=>{try{setIsLoading(true);setError('');// Get the Staff record for this user\ntry{console.log('üîç Looking up staff record for user:',user);console.log('User ID to match:',user.id);console.log('User email to match:',user.email);const allStaff=await staffAPI.getAll();console.log('üìã All staff records:',allStaff);// Try to find by userId first\nlet staffRecord=allStaff.find(s=>s.userId===user.id);// If not found, try by email\nif(!staffRecord){console.log('‚ö†Ô∏è No match by userId, trying email match...');staffRecord=allStaff.find(s=>{var _s$email,_user$email;return((_s$email=s.email)===null||_s$email===void 0?void 0:_s$email.toLowerCase())===((_user$email=user.email)===null||_user$email===void 0?void 0:_user$email.toLowerCase());});}// If still not found, try by role='doctor' and similar name\nif(!staffRecord&&user.role==='doctor'){console.log('‚ö†Ô∏è No match by email, trying name match for doctors...');staffRecord=allStaff.find(s=>{var _s$firstName,_user$firstName,_s$lastName,_user$lastName;return s.role==='doctor'&&((_s$firstName=s.firstName)===null||_s$firstName===void 0?void 0:_s$firstName.toLowerCase())===((_user$firstName=user.firstName)===null||_user$firstName===void 0?void 0:_user$firstName.toLowerCase())&&((_s$lastName=s.lastName)===null||_s$lastName===void 0?void 0:_s$lastName.toLowerCase())===((_user$lastName=user.lastName)===null||_user$lastName===void 0?void 0:_user$lastName.toLowerCase());});}if(staffRecord){console.log('‚úÖ Found staff record:',staffRecord);console.log('‚úÖ Staff ID to use:',staffRecord.id);console.log('‚úÖ Staff ID type:',typeof staffRecord.id);console.log('‚úÖ Staff ID length:',staffRecord.id.length);setStaffId(staffRecord.id);// Update the user object with the staff ID\nuser.staffId=staffRecord.id;console.log('‚úÖ Updated user.staffId to:',user.staffId);}else{console.error('‚ùå NO STAFF RECORD FOUND!');console.log('User details:',{id:user.id,email:user.email,firstName:user.firstName,lastName:user.lastName});console.log('Available staff records:',allStaff.map(s=>({id:s.id,userId:s.userId,email:s.email,firstName:s.firstName,lastName:s.lastName,role:s.role})));}}catch(staffError){console.error('‚ùå Error fetching staff record:',staffError);}// Get all appointments\ntry{const appointmentsData=await appointmentsAPI.getAll();setAppointments(appointmentsData);}catch(appointmentsError){console.log('No appointments endpoint available yet');setAppointments([]);}// Get all patients\ntry{const patientsData=await patientsAPI.getAll();setPatients(patientsData);}catch(patientsError){console.log('No patients endpoint available yet');setPatients([]);}// Load shift schedule from localStorage or use defaults\nconst loadShiftScheduleFromStorage=()=>{try{const currentStaffId=staffId||user.staffId;const storageKey=\"shiftSchedule_\".concat(currentStaffId);const savedSchedule=localStorage.getItem(storageKey);if(savedSchedule){console.log('üîß Loading saved shift schedule from localStorage');const parsedSchedule=JSON.parse(savedSchedule);setShiftSchedule(parsedSchedule);return;}}catch(error){console.log('‚ö†Ô∏è Error loading from localStorage:',error);}// Fall back to default schedule\nconsole.log('üîß Using default shift schedule');const defaultSchedule=[{dayOfWeek:'Monday',startTime:'09:00',endTime:'17:00',isActive:true},{dayOfWeek:'Tuesday',startTime:'09:00',endTime:'17:00',isActive:true},{dayOfWeek:'Wednesday',startTime:'09:00',endTime:'17:00',isActive:true},{dayOfWeek:'Thursday',startTime:'09:00',endTime:'17:00',isActive:true},{dayOfWeek:'Friday',startTime:'09:00',endTime:'17:00',isActive:true},{dayOfWeek:'Saturday',startTime:'09:00',endTime:'17:00',isActive:false},{dayOfWeek:'Sunday',startTime:'09:00',endTime:'17:00',isActive:false}];setShiftSchedule(defaultSchedule);};loadShiftScheduleFromStorage();}catch(error){var _error$response4,_error$response4$data;console.error('Error loading doctor dashboard data:',error);setError(((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.error)||error.message||'Failed to load dashboard data');}finally{setIsLoading(false);}};const handleApproveAppointment=async appointmentId=>{try{setIsProcessing(true);setError('');// For now, just update the appointment status using existing endpoint\nawait appointmentsAPI.updateStatus(appointmentId,'confirmed');await loadDashboardData();// Refresh data\n}catch(error){var _error$response5,_error$response5$data;console.error('Error approving appointment:',error);setError(((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.error)||error.message||'Failed to approve appointment');}finally{setIsProcessing(false);}};const handleRejectAppointment=async(appointmentId,reason)=>{try{setIsProcessing(true);setError('');// For now, just update the appointment status using existing endpoint\nawait appointmentsAPI.updateStatus(appointmentId,'cancelled');await loadDashboardData();// Refresh data\n}catch(error){var _error$response6,_error$response6$data;console.error('Error rejecting appointment:',error);setError(((_error$response6=error.response)===null||_error$response6===void 0?void 0:(_error$response6$data=_error$response6.data)===null||_error$response6$data===void 0?void 0:_error$response6$data.error)||error.message||'Failed to reject appointment');}finally{setIsProcessing(false);}};const handleUpdateShiftSchedule=async shiftData=>{try{setIsProcessing(true);setError('');const currentStaffId=staffId||user.staffId;if(!currentStaffId){throw new Error('No staff ID available');}console.log('Updating shift schedule for staff ID:',currentStaffId);console.log('Shift data:',shiftData);// Try to call the API, but don't fail if it doesn't exist yet\ntry{await doctorAPI.updateShiftSchedule(currentStaffId,shiftData);console.log('‚úÖ Shift schedule updated successfully via API');}catch(apiError){console.log('‚ö†Ô∏è API update failed, storing locally:',apiError);// If API fails, just store locally for now\n}// Always update local state regardless of API success/failure\nsetShiftSchedule(shiftData);// Save to localStorage for persistence across page reloads\ntry{const storageKey=\"shiftSchedule_\".concat(currentStaffId);localStorage.setItem(storageKey,JSON.stringify(shiftData));console.log('‚úÖ Shift schedule saved to localStorage');}catch(storageError){console.log('‚ö†Ô∏è Error saving to localStorage:',storageError);}console.log('‚úÖ Shift schedule updated locally');}catch(error){var _error$response7,_error$response7$data;console.error('Error updating shift schedule:',error);setError(((_error$response7=error.response)===null||_error$response7===void 0?void 0:(_error$response7$data=_error$response7.data)===null||_error$response7$data===void 0?void 0:_error$response7$data.error)||error.message||'Failed to update shift schedule');}finally{setIsProcessing(false);}};const handleViewPatientDetails=async patientId=>{try{setError('');// For now, just log the request (backend not implemented yet)\nconsole.log('View patient details requested for:',patientId);}catch(error){var _error$response8,_error$response8$data;console.error('Error loading patient details:',error);setError(((_error$response8=error.response)===null||_error$response8===void 0?void 0:(_error$response8$data=_error$response8.data)===null||_error$response8$data===void 0?void 0:_error$response8$data.error)||error.message||'Failed to load patient details');}};React.useEffect(()=>{loadDashboardData();},[user.id]);// Call children as a function with props\nconst userWithStaffId=_objectSpread(_objectSpread({},user),{},{staffId:staffId// Ensure staffId is included\n});console.log('üîç DoctorDashboardWrapper returning user:',userWithStaffId);console.log('üîç DoctorDashboardWrapper staffId:',staffId);console.log('üîç DoctorDashboardWrapper user.staffId:',user.staffId);return children({user:userWithStaffId,appointments,patients,shiftSchedule,isLoading,isProcessing,error,onApproveAppointment:handleApproveAppointment,onRejectAppointment:handleRejectAppointment,onUpdateShiftSchedule:handleUpdateShiftSchedule,onViewPatientDetails:handleViewPatientDetails});};// Nurse Dashboard wrapper component that handles nurse-specific data loading\nconst NurseDashboardWrapper=_ref4=>{let{children,user}=_ref4;const[appointments,setAppointments]=React.useState([]);const[services,setServices]=React.useState([]);const[doctors,setDoctors]=React.useState([]);const[isLoading,setIsLoading]=React.useState(true);const[isProcessing,setIsProcessing]=React.useState(false);const[error,setError]=React.useState('');const loadDashboardData=async()=>{try{setIsLoading(true);setError('');// Load appointments\ntry{const appointmentsData=await appointmentsAPI.getAll();setAppointments(appointmentsData);}catch(appointmentsError){console.log('No appointments endpoint available yet');setAppointments([]);}// Load services\ntry{const servicesData=await servicesAPI.getAll();setServices(servicesData);}catch(servicesError){console.log('No services endpoint available yet');setServices([]);}// Load doctors (staff with doctor role)\ntry{const staffData=await staffAPI.getAll();const doctorsData=staffData.filter(staff=>staff.role==='doctor');setDoctors(doctorsData);}catch(staffError){console.log('No staff endpoint available yet');setDoctors([]);}}catch(error){var _error$response9,_error$response9$data;console.error('Error loading nurse dashboard data:',error);setError(((_error$response9=error.response)===null||_error$response9===void 0?void 0:(_error$response9$data=_error$response9.data)===null||_error$response9$data===void 0?void 0:_error$response9$data.error)||error.message||'Failed to load dashboard data');}finally{setIsLoading(false);}};React.useEffect(()=>{loadDashboardData();},[]);const handleBookWalkInAppointment=async appointmentData=>{try{setIsProcessing(true);setError('');// Create a walk-in appointment with immediate scheduling\nconst walkInAppointment=_objectSpread(_objectSpread({},appointmentData),{},{appointmentDate:new Date().toISOString().split('T')[0],// Today\nstartTime:new Date().toTimeString().slice(0,5),// Current time\nstatus:'walkin',notes:\"Walk-in appointment: \".concat(appointmentData.notes||'No additional notes')});await appointmentsAPI.create(walkInAppointment);await loadDashboardData();// Refresh data\n}catch(error){var _error$response0,_error$response0$data;console.error('Error booking walk-in appointment:',error);setError(((_error$response0=error.response)===null||_error$response0===void 0?void 0:(_error$response0$data=_error$response0.data)===null||_error$response0$data===void 0?void 0:_error$response0$data.error)||error.message||'Failed to book walk-in appointment');}finally{setIsProcessing(false);}};const handleApproveAppointmentForDoctor=async(appointmentId,doctorId)=>{try{setIsProcessing(true);setError('');// Update appointment with doctor assignment and approval\nawait appointmentsAPI.update(appointmentId,{staffId:doctorId,status:'confirmed'});await loadDashboardData();// Refresh data\n}catch(error){var _error$response1,_error$response1$data;console.error('Error approving appointment for doctor:',error);setError(((_error$response1=error.response)===null||_error$response1===void 0?void 0:(_error$response1$data=_error$response1.data)===null||_error$response1$data===void 0?void 0:_error$response1$data.error)||error.message||'Failed to approve appointment');}finally{setIsProcessing(false);}};const handleRejectAppointment=async(appointmentId,reason)=>{try{setIsProcessing(true);setError('');await appointmentsAPI.update(appointmentId,{status:'cancelled',notes:\"Rejected by nurse: \".concat(reason)});await loadDashboardData();// Refresh data\n}catch(error){var _error$response10,_error$response10$dat;console.error('Error rejecting appointment:',error);setError(((_error$response10=error.response)===null||_error$response10===void 0?void 0:(_error$response10$dat=_error$response10.data)===null||_error$response10$dat===void 0?void 0:_error$response10$dat.error)||error.message||'Failed to reject appointment');}finally{setIsProcessing(false);}};return children({user,appointments,services,doctors,isLoading,isProcessing,error,onBookWalkInAppointment:handleBookWalkInAppointment,onApproveAppointmentForDoctor:handleApproveAppointmentForDoctor,onRejectAppointment:handleRejectAppointment,onLogout:()=>{localStorage.removeItem('token');window.location.href='/auth';}});};// Admin Dashboard wrapper component that handles admin-specific data loading\nconst AdminDashboardWrapper=_ref5=>{let{children,user}=_ref5;const[users,setUsers]=React.useState([]);const[appointments,setAppointments]=React.useState([]);const[services,setServices]=React.useState([]);const[isLoading,setIsLoading]=React.useState(true);const[isProcessing,setIsProcessing]=React.useState(false);const[error,setError]=React.useState('');const loadDashboardData=async()=>{try{setIsLoading(true);setError('');// Combine staff and patients into a single users array\nconst allUsers=[];// Get all staff members\ntry{const staffData=await staffAPI.getAll();console.log('üìä Staff data received:',staffData);allUsers.push(...staffData);}catch(staffError){console.log('No staff endpoint available, falling back to admin users');try{const usersData=await adminAPI.getUsers();console.log('üìä Admin users data received:',usersData);allUsers.push(...usersData);}catch(adminError){console.error('Failed to load staff/users:',adminError);}}// Get all patients\ntry{const patientsData=await patientsAPI.getAll();console.log('üë• Patients data received:',patientsData);// Normalize patient data to match staff structure\nconst normalizedPatients=patientsData.map(patient=>_objectSpread(_objectSpread({},patient),{},{role:'patient',isActive:true,// Ensure consistent field names\nfirstName:patient.firstName||patient.first_name,lastName:patient.lastName||patient.last_name,email:patient.email,phone:patient.phone,id:patient.id,userId:patient.userId||patient.id}));console.log('üë• Normalized patients:',normalizedPatients);allUsers.push(...normalizedPatients);}catch(patientsError){console.error('‚ùå Failed to load patients:',patientsError);console.log('No patients endpoint available or no patients in database');}console.log('‚úÖ Combined users data:',allUsers);setUsers(allUsers);// Get all appointments\ntry{const appointmentsData=await appointmentsAPI.getAll();setAppointments(appointmentsData);}catch(appointmentsError){console.log('No appointments endpoint available yet');setAppointments([]);}// Load services\ntry{const servicesData=await servicesAPI.getAll();setServices(servicesData);}catch(servicesError){console.log('No services endpoint available yet');setServices([]);}}catch(error){var _error$response11,_error$response11$dat;console.error('Error loading admin dashboard data:',error);setError(((_error$response11=error.response)===null||_error$response11===void 0?void 0:(_error$response11$dat=_error$response11.data)===null||_error$response11$dat===void 0?void 0:_error$response11$dat.error)||error.message||'Failed to load dashboard data');}finally{setIsLoading(false);}};const handleToggleUserStatus=async(userId,isActive)=>{try{setIsProcessing(true);setError('');await adminAPI.updateUserStatus(userId,isActive);await loadDashboardData();// Refresh data\n}catch(error){var _error$response12,_error$response12$dat;console.error('Error updating user status:',error);setError(((_error$response12=error.response)===null||_error$response12===void 0?void 0:(_error$response12$dat=_error$response12.data)===null||_error$response12$dat===void 0?void 0:_error$response12$dat.error)||error.message||'Failed to update user status');}finally{setIsProcessing(false);}};const handleUpdateUserRole=async(userId,newRole)=>{try{setIsProcessing(true);setError('');await adminAPI.updateUserRole(userId,newRole);await loadDashboardData();// Refresh data\n}catch(error){var _error$response13,_error$response13$dat;console.error('Error updating user role:',error);setError(((_error$response13=error.response)===null||_error$response13===void 0?void 0:(_error$response13$dat=_error$response13.data)===null||_error$response13$dat===void 0?void 0:_error$response13$dat.error)||error.message||'Failed to update user role');}finally{setIsProcessing(false);}};const handleCreateStaff=async staffData=>{try{setIsProcessing(true);setError('');await adminAPI.createStaff(staffData);await loadDashboardData();// Refresh data\n}catch(error){var _error$response14,_error$response14$dat;console.error('Error creating staff:',error);setError(((_error$response14=error.response)===null||_error$response14===void 0?void 0:(_error$response14$dat=_error$response14.data)===null||_error$response14$dat===void 0?void 0:_error$response14$dat.error)||error.message||'Failed to create staff member');}finally{setIsProcessing(false);}};const handleCreateService=async serviceData=>{try{setIsProcessing(true);setError('');await servicesAPI.create(serviceData);await loadDashboardData();// Refresh data\n}catch(error){var _error$response15,_error$response15$dat;console.error('Error creating service:',error);setError(((_error$response15=error.response)===null||_error$response15===void 0?void 0:(_error$response15$dat=_error$response15.data)===null||_error$response15$dat===void 0?void 0:_error$response15$dat.error)||error.message||'Failed to create service');}finally{setIsProcessing(false);}};const handleUpdateService=async(serviceId,serviceData)=>{try{setIsProcessing(true);setError('');await servicesAPI.update(serviceId,serviceData);await loadDashboardData();// Refresh data\n}catch(error){var _error$response16,_error$response16$dat;console.error('Error updating service:',error);setError(((_error$response16=error.response)===null||_error$response16===void 0?void 0:(_error$response16$dat=_error$response16.data)===null||_error$response16$dat===void 0?void 0:_error$response16$dat.error)||error.message||'Failed to update service');}finally{setIsProcessing(false);}};const handleDeleteService=async serviceId=>{try{setIsProcessing(true);setError('');// Check if service is being used by any appointments\nconst appointmentsUsingService=appointments.filter(apt=>apt.service.id===serviceId);if(appointmentsUsingService.length>0){setError(\"Cannot delete service. It is currently being used by \".concat(appointmentsUsingService.length,\" appointment(s). Please cancel or reschedule these appointments first.\"));return;}console.log('Attempting to delete service:',serviceId);const deleteResult=await servicesAPI.delete(serviceId);console.log('Delete result:',deleteResult);await loadDashboardData();// Refresh data\n}catch(error){var _error$response17,_error$response17$dat,_error$response18,_error$response18$dat;console.error('Error deleting service:',error);// Provide more specific error messages\nlet errorMessage='Failed to delete service';if((_error$response17=error.response)!==null&&_error$response17!==void 0&&(_error$response17$dat=_error$response17.data)!==null&&_error$response17$dat!==void 0&&_error$response17$dat.error){errorMessage=error.response.data.error;}else if((_error$response18=error.response)!==null&&_error$response18!==void 0&&(_error$response18$dat=_error$response18.data)!==null&&_error$response18$dat!==void 0&&_error$response18$dat.message){errorMessage=error.response.data.message;}else if(error.message){errorMessage=error.message;}// Check for common database constraint errors\nif(errorMessage.includes('foreign key')||errorMessage.includes('constraint')||errorMessage.includes('reference')){errorMessage='Cannot delete service. It is currently being used by existing appointments. Please cancel or reschedule these appointments first.';}setError(errorMessage);}finally{setIsProcessing(false);}};const handleApproveAppointment=async appointmentId=>{try{setIsProcessing(true);setError('');// Update the appointment status to confirmed\nawait appointmentsAPI.updateStatus(appointmentId,'confirmed');await loadDashboardData();// Refresh data\n}catch(error){var _error$response19,_error$response19$dat;console.error('Error approving appointment:',error);setError(((_error$response19=error.response)===null||_error$response19===void 0?void 0:(_error$response19$dat=_error$response19.data)===null||_error$response19$dat===void 0?void 0:_error$response19$dat.error)||error.message||'Failed to approve appointment');}finally{setIsProcessing(false);}};const handleRejectAppointment=async(appointmentId,reason)=>{try{setIsProcessing(true);setError('');// Update the appointment status to cancelled with reason\nawait appointmentsAPI.updateStatus(appointmentId,'cancelled');// Optionally update notes with rejection reason\nawait appointmentsAPI.update(appointmentId,{notes:\"Rejected by admin: \".concat(reason)});await loadDashboardData();// Refresh data\n}catch(error){var _error$response20,_error$response20$dat;console.error('Error rejecting appointment:',error);setError(((_error$response20=error.response)===null||_error$response20===void 0?void 0:(_error$response20$dat=_error$response20.data)===null||_error$response20$dat===void 0?void 0:_error$response20$dat.error)||error.message||'Failed to reject appointment');}finally{setIsProcessing(false);}};React.useEffect(()=>{loadDashboardData();},[user.id]);// Call children as a function with props\nreturn children({user,users,appointments,services,isLoading,isProcessing,error,onToggleUserStatus:handleToggleUserStatus,onUpdateUserRole:handleUpdateUserRole,onCreateStaff:handleCreateStaff,onCreateService:handleCreateService,onUpdateService:handleUpdateService,onDeleteService:handleDeleteService,onRefreshAppointments:loadDashboardData,onApproveAppointment:handleApproveAppointment,onRejectAppointment:handleRejectAppointment,onLogout:()=>{localStorage.removeItem('token');window.location.href='/auth';}});};// Main App Routes component\nconst AppRoutes=()=>{var _user$roles,_user$roles2,_user$roles3;const{isAuthenticated,user,login,register,logout,isLoading,error,clearError}=useAuth();const handleLogin=async(email,password)=>{try{await login({email,password});}catch(err){// Error is handled by AuthContext\n}};const handleRegister=async userData=>{try{await register(userData);}catch(err){// Error is handled by AuthContext\n}};const handleLogout=()=>{logout();};if(isLoading){return/*#__PURE__*/_jsx(\"div\",{className:\"min-h-screen flex items-center justify-center\",children:/*#__PURE__*/_jsx(LoadingSpinner,{})});}return/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(LandingPage,{})}),/*#__PURE__*/_jsx(Route,{path:\"/auth\",element:isAuthenticated?/*#__PURE__*/_jsx(Navigate,{to:user!==null&&user!==void 0&&(_user$roles=user.roles)!==null&&_user$roles!==void 0&&_user$roles.includes('admin')?'/admin-dashboard':user!==null&&user!==void 0&&(_user$roles2=user.roles)!==null&&_user$roles2!==void 0&&_user$roles2.includes('doctor')?'/doctor-dashboard':user!==null&&user!==void 0&&(_user$roles3=user.roles)!==null&&_user$roles3!==void 0&&_user$roles3.includes('nurse')?'/nurse-dashboard':'/patient-dashboard',replace:true}):/*#__PURE__*/_jsx(AuthPage,{onLogin:handleLogin,onRegister:handleRegister,isLoading:isLoading,error:error,clearError:clearError})}),/*#__PURE__*/_jsx(Route,{path:\"/patient-dashboard\",element:/*#__PURE__*/_jsx(ProtectedRoute,{allowedRoles:['patient'],children:/*#__PURE__*/_jsx(DashboardWrapper,{user:user,children:props=>/*#__PURE__*/_jsx(PatientDashboard,_objectSpread(_objectSpread({},props),{},{onLogout:handleLogout}))})})}),/*#__PURE__*/_jsx(Route,{path:\"/doctor-dashboard\",element:/*#__PURE__*/_jsx(ProtectedRoute,{allowedRoles:['doctor'],children:/*#__PURE__*/_jsx(DoctorDashboardWrapper,{user:user,children:props=>/*#__PURE__*/_jsx(DoctorDashboard,_objectSpread(_objectSpread({},props),{},{onLogout:handleLogout}))})})}),/*#__PURE__*/_jsx(Route,{path:\"/admin-dashboard\",element:/*#__PURE__*/_jsx(ProtectedRoute,{allowedRoles:['admin'],children:/*#__PURE__*/_jsx(AdminDashboardWrapper,{user:user,children:props=>/*#__PURE__*/_jsx(AdminDashboard,_objectSpread(_objectSpread({},props),{},{onLogout:handleLogout}))})})}),/*#__PURE__*/_jsx(Route,{path:\"/nurse-dashboard\",element:/*#__PURE__*/_jsx(ProtectedRoute,{allowedRoles:['nurse'],children:/*#__PURE__*/_jsx(NurseDashboardWrapper,{user:user,children:props=>/*#__PURE__*/_jsx(NurseDashboard,_objectSpread(_objectSpread({},props),{},{onLogout:handleLogout}))})})}),/*#__PURE__*/_jsx(Route,{path:\"/unauthorized\",element:/*#__PURE__*/_jsx(\"div\",{className:\"min-h-screen flex items-center justify-center\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-2xl font-bold text-foreground mb-4\",children:\"Unauthorized\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-muted-foreground mb-4\",children:\"You don't have permission to access this page.\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleLogout,className:\"px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90\",children:\"Sign Out\"})]})})}),/*#__PURE__*/_jsx(Route,{path:\"*\",element:/*#__PURE__*/_jsx(Navigate,{to:\"/\",replace:true})})]});};// Main App component\nconst App=()=>{return/*#__PURE__*/_jsx(AuthProvider,{children:/*#__PURE__*/_jsx(Router,{children:/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsx(AppRoutes,{})})})});};export default App;","map":{"version":3,"names":["React","BrowserRouter","Router","Routes","Route","Navigate","AuthProvider","useAuth","LandingPage","AuthPage","PatientDashboard","DoctorDashboard","AdminDashboard","NurseDashboard","LoadingSpinner","appointmentsAPI","servicesAPI","patientsAPI","staffAPI","doctorAPI","adminAPI","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","ProtectedRoute","_ref","children","allowedRoles","isAuthenticated","isLoading","hasAnyRole","className","to","replace","length","DashboardWrapper","_ref2","user","appointments","setAppointments","useState","services","setServices","doctors","setDoctors","availableSlots","setAvailableSlots","patientId","setPatientId","setIsLoading","isBooking","setIsBooking","bookingError","setBookingError","loadDashboardData","console","log","id","patient","getByUserId","appointmentsData","servicesData","doctorsData","Promise","all","getByPatient","getAll","getByRole","patientError","error","otherError","loadAvailableSlots","date","slots","getAvailable","requestedDate","Date","dayOfWeek","getDay","filteredSlots","filter","slot","handleBookAppointment","bookingData","selectedService","find","s","serviceId","startTimeFormatted","startTime","includes","split","concat","endTime","getTime","durationMinutes","endTimeString","toTimeString","slice","create","staffId","appointmentDate","notes","_error$response","_error$response$data","response","data","message","handleUpdateAppointment","appointmentId","updateData","update","_error$response2","_error$response2$data","handleCancelAppointment","delete","_error$response3","_error$response3$data","useEffect","onBookAppointment","onUpdateAppointment","onCancelAppointment","onLoadAvailableSlots","onRefreshAppointments","DoctorDashboardWrapper","_ref3","patients","setPatients","shiftSchedule","setShiftSchedule","setStaffId","isProcessing","setIsProcessing","setError","email","allStaff","staffRecord","userId","_s$email","_user$email","toLowerCase","role","_s$firstName","_user$firstName","_s$lastName","_user$lastName","firstName","lastName","map","staffError","appointmentsError","patientsData","patientsError","loadShiftScheduleFromStorage","currentStaffId","storageKey","savedSchedule","localStorage","getItem","parsedSchedule","JSON","parse","defaultSchedule","isActive","_error$response4","_error$response4$data","handleApproveAppointment","updateStatus","_error$response5","_error$response5$data","handleRejectAppointment","reason","_error$response6","_error$response6$data","handleUpdateShiftSchedule","shiftData","Error","updateShiftSchedule","apiError","setItem","stringify","storageError","_error$response7","_error$response7$data","handleViewPatientDetails","_error$response8","_error$response8$data","userWithStaffId","_objectSpread","onApproveAppointment","onRejectAppointment","onUpdateShiftSchedule","onViewPatientDetails","NurseDashboardWrapper","_ref4","servicesError","staffData","staff","_error$response9","_error$response9$data","handleBookWalkInAppointment","appointmentData","walkInAppointment","toISOString","status","_error$response0","_error$response0$data","handleApproveAppointmentForDoctor","doctorId","_error$response1","_error$response1$data","_error$response10","_error$response10$dat","onBookWalkInAppointment","onApproveAppointmentForDoctor","onLogout","removeItem","window","location","href","AdminDashboardWrapper","_ref5","users","setUsers","allUsers","push","usersData","getUsers","adminError","normalizedPatients","first_name","last_name","phone","_error$response11","_error$response11$dat","handleToggleUserStatus","updateUserStatus","_error$response12","_error$response12$dat","handleUpdateUserRole","newRole","updateUserRole","_error$response13","_error$response13$dat","handleCreateStaff","createStaff","_error$response14","_error$response14$dat","handleCreateService","serviceData","_error$response15","_error$response15$dat","handleUpdateService","_error$response16","_error$response16$dat","handleDeleteService","appointmentsUsingService","apt","service","deleteResult","_error$response17","_error$response17$dat","_error$response18","_error$response18$dat","errorMessage","_error$response19","_error$response19$dat","_error$response20","_error$response20$dat","onToggleUserStatus","onUpdateUserRole","onCreateStaff","onCreateService","onUpdateService","onDeleteService","AppRoutes","_user$roles","_user$roles2","_user$roles3","login","register","logout","clearError","handleLogin","password","err","handleRegister","userData","handleLogout","path","element","roles","onLogin","onRegister","props","onClick","App"],"sources":["C:/Project/HopewellClinic/src/App.tsx"],"sourcesContent":["import React from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport { AuthProvider, useAuth } from './contexts/AuthContext';\nimport LandingPage from './components/LandingPage';\nimport AuthPage from './components/AuthPage';\nimport PatientDashboard from './components/PatientDashboard';\nimport DoctorDashboard from './components/DoctorDashboard';\nimport AdminDashboard from './components/AdminDashboard';\nimport NurseDashboard from './components/NurseDashboard';\nimport LoadingSpinner from './components/LoadingSpinner';\n\n// Import the existing API functions\nimport { appointmentsAPI, servicesAPI, patientsAPI, staffAPI, doctorAPI, adminAPI } from './services/api';\n\n// Protected Route component\nconst ProtectedRoute: React.FC<{ \n  children: React.ReactNode; \n  allowedRoles?: string[] \n}> = ({ children, allowedRoles = [] }) => {\n  const { isAuthenticated, isLoading, hasAnyRole } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <Navigate to=\"/auth\" replace />;\n  }\n\n  if (allowedRoles.length > 0 && !hasAnyRole(allowedRoles)) {\n    return <Navigate to=\"/unauthorized\" replace />;\n  }\n\n  return <>{children}</>;\n};\n\n// Dashboard wrapper component that handles data loading\nconst DashboardWrapper: React.FC<{ \n  children: (props: any) => React.ReactNode;\n  user: any;\n}> = ({ children, user }) => {\n  const [appointments, setAppointments] = React.useState([]);\n  const [services, setServices] = React.useState([]);\n  const [doctors, setDoctors] = React.useState([]);\n  const [availableSlots, setAvailableSlots] = React.useState([]);\n  const [patientId, setPatientId] = React.useState<string | null>(null);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isBooking, setIsBooking] = React.useState(false);\n  const [bookingError, setBookingError] = React.useState('');\n\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      \n      // Get the Patient ID from the ApplicationUser ID\n      console.log('üîç Loading dashboard data for user:', user);\n      console.log('üîç User ID:', user.id);\n      \n      try {\n        const patient = await patientsAPI.getByUserId(user.id);\n        console.log('‚úÖ Found patient record:', patient);\n        setPatientId(patient.id);\n        \n        const [appointmentsData, servicesData, doctorsData] = await Promise.all([\n          appointmentsAPI.getByPatient(patient.id),\n          servicesAPI.getAll(),\n          staffAPI.getByRole('doctor')\n        ]);\n        setAppointments(appointmentsData);\n        setServices(servicesData);\n        setDoctors(doctorsData);\n      } catch (patientError) {\n        console.error('‚ùå Error finding patient record:', patientError);\n        console.log('‚ö†Ô∏è Patient not found for user ID:', user.id);\n        \n        // Set patientId to null to trigger the error in BookingWizard\n        setPatientId(null);\n        \n        // Still try to load other data\n        try {\n          const [servicesData, doctorsData] = await Promise.all([\n            servicesAPI.getAll(),\n            staffAPI.getByRole('doctor')\n          ]);\n          setServices(servicesData);\n          setDoctors(doctorsData);\n          setAppointments([]); // No appointments without patient\n        } catch (otherError) {\n          console.error('‚ùå Error loading other dashboard data:', otherError);\n        }\n      }\n    } catch (error) {\n      console.error('‚ùå Error loading dashboard data:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadAvailableSlots = async (date: string) => {\n    try {\n      console.log('Loading available slots for date:', date);\n      const slots = await appointmentsAPI.getAvailable(date);\n      console.log('Available slots received:', slots);\n      \n      // Calculate the day of the week for the requested date\n      const requestedDate = new Date(date);\n      const dayOfWeek = requestedDate.getDay(); // 0 = Sunday, 1 = Monday, etc.\n      \n      // Filter slots to only include the correct day of the week\n      const filteredSlots = slots.filter((slot: any) => slot.dayOfWeek === dayOfWeek);\n      console.log('Filtered slots for day', dayOfWeek, ':', filteredSlots);\n      \n      setAvailableSlots(filteredSlots);\n    } catch (error) {\n      console.error('Error loading available slots:', error);\n      setAvailableSlots([]);\n    }\n  };\n\n  const handleBookAppointment = async (bookingData: any) => {\n    try {\n      setIsBooking(true);\n      setBookingError('');\n      \n      // Calculate end time based on service duration\n      const selectedService = services.find((s: any) => s.id === bookingData.serviceId) as any;\n      \n      // Ensure startTime is in HH:mm:ss format\n      const startTimeFormatted = bookingData.startTime.includes(':') && bookingData.startTime.split(':').length === 2 \n        ? bookingData.startTime + ':00' \n        : bookingData.startTime;\n      \n      const startTime = new Date(`2000-01-01T${startTimeFormatted}`);\n      const endTime = new Date(startTime.getTime() + (selectedService?.durationMinutes || 30) * 60000);\n      \n      const endTimeString = endTime.toTimeString().slice(0, 8); // Format as HH:mm:ss\n      \n      await appointmentsAPI.create({\n        patientId: patientId,\n        serviceId: bookingData.serviceId,\n        staffId: bookingData.staffId,\n        appointmentDate: bookingData.appointmentDate,\n        startTime: startTimeFormatted,\n        endTime: endTimeString,\n        notes: bookingData.notes || ''\n      });\n\n      // Refresh appointments\n      await loadDashboardData();\n    } catch (error: any) {\n      console.error('Error booking appointment:', error);\n      setBookingError(error.response?.data?.error || error.message || 'Failed to book appointment');\n    } finally {\n      setIsBooking(false);\n    }\n  };\n\n  const handleUpdateAppointment = async (appointmentId: string, updateData: any) => {\n    try {\n      setIsBooking(true);\n      setBookingError('');\n      \n      // Calculate end time based on service duration\n      const selectedService = services.find((s: any) => s.id === updateData.serviceId) as any;\n      \n      // Ensure startTime is in HH:mm:ss format\n      const startTimeFormatted = updateData.startTime.includes(':') && updateData.startTime.split(':').length === 2 \n        ? updateData.startTime + ':00' \n        : updateData.startTime;\n      \n      const startTime = new Date(`2000-01-01T${startTimeFormatted}`);\n      const endTime = new Date(startTime.getTime() + (selectedService?.durationMinutes || 30) * 60000);\n      \n      const endTimeString = endTime.toTimeString().slice(0, 8); // Format as HH:mm:ss\n      \n      await appointmentsAPI.update(appointmentId, {\n        appointmentDate: updateData.appointmentDate,\n        startTime: startTimeFormatted,\n        endTime: endTimeString,\n        notes: updateData.notes || ''\n      });\n\n      // Refresh appointments\n      await loadDashboardData();\n    } catch (error: any) {\n      console.error('Error updating appointment:', error);\n      setBookingError(error.response?.data?.error || error.message || 'Failed to update appointment');\n    } finally {\n      setIsBooking(false);\n    }\n  };\n\n  const handleCancelAppointment = async (appointmentId: string) => {\n    try {\n      setIsBooking(true);\n      setBookingError('');\n      \n      await appointmentsAPI.delete(appointmentId);\n\n      // Refresh appointments\n      await loadDashboardData();\n    } catch (error: any) {\n      console.error('Error canceling appointment:', error);\n      setBookingError(error.response?.data?.error || error.message || 'Failed to cancel appointment');\n    } finally {\n      setIsBooking(false);\n    }\n  };\n\n  React.useEffect(() => {\n    loadDashboardData();\n  }, [user.id]);\n\n  // Call children as a function with props\n  return children({\n    user,\n    appointments,\n    services,\n    doctors,\n    availableSlots,\n    patientId,\n    isLoading,\n    isBooking,\n    bookingError,\n    onBookAppointment: handleBookAppointment,\n    onUpdateAppointment: handleUpdateAppointment,\n    onCancelAppointment: handleCancelAppointment,\n    onLoadAvailableSlots: loadAvailableSlots,\n    onRefreshAppointments: loadDashboardData\n  });\n};\n\n// Doctor Dashboard wrapper component that handles doctor-specific data loading\nconst DoctorDashboardWrapper: React.FC<{ \n  children: (props: any) => React.ReactNode;\n  user: any;\n}> = ({ children, user }) => {\n  const [appointments, setAppointments] = React.useState<any[]>([]);\n  const [patients, setPatients] = React.useState<any[]>([]);\n  const [shiftSchedule, setShiftSchedule] = React.useState<any[]>([]);\n  const [staffId, setStaffId] = React.useState<string>('');\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isProcessing, setIsProcessing] = React.useState(false);\n  const [error, setError] = React.useState('');\n\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      // Get the Staff record for this user\n      try {\n        console.log('üîç Looking up staff record for user:', user);\n        console.log('User ID to match:', user.id);\n        console.log('User email to match:', user.email);\n        \n        const allStaff = await staffAPI.getAll();\n        console.log('üìã All staff records:', allStaff);\n        \n        // Try to find by userId first\n        let staffRecord = allStaff.find((s: any) => s.userId === user.id);\n        \n        // If not found, try by email\n        if (!staffRecord) {\n          console.log('‚ö†Ô∏è No match by userId, trying email match...');\n          staffRecord = allStaff.find((s: any) => s.email?.toLowerCase() === user.email?.toLowerCase());\n        }\n        \n        // If still not found, try by role='doctor' and similar name\n        if (!staffRecord && user.role === 'doctor') {\n          console.log('‚ö†Ô∏è No match by email, trying name match for doctors...');\n          staffRecord = allStaff.find((s: any) => \n            s.role === 'doctor' && \n            s.firstName?.toLowerCase() === user.firstName?.toLowerCase() &&\n            s.lastName?.toLowerCase() === user.lastName?.toLowerCase()\n          );\n        }\n        \n        if (staffRecord) {\n          console.log('‚úÖ Found staff record:', staffRecord);\n          console.log('‚úÖ Staff ID to use:', staffRecord.id);\n          console.log('‚úÖ Staff ID type:', typeof staffRecord.id);\n          console.log('‚úÖ Staff ID length:', staffRecord.id.length);\n          setStaffId(staffRecord.id);\n          \n          // Update the user object with the staff ID\n          user.staffId = staffRecord.id;\n          console.log('‚úÖ Updated user.staffId to:', user.staffId);\n        } else {\n          console.error('‚ùå NO STAFF RECORD FOUND!');\n          console.log('User details:', { id: user.id, email: user.email, firstName: user.firstName, lastName: user.lastName });\n          console.log('Available staff records:', allStaff.map((s: any) => ({\n            id: s.id,\n            userId: s.userId,\n            email: s.email,\n            firstName: s.firstName,\n            lastName: s.lastName,\n            role: s.role\n          })));\n        }\n      } catch (staffError) {\n        console.error('‚ùå Error fetching staff record:', staffError);\n      }\n\n      // Get all appointments\n      try {\n        const appointmentsData = await appointmentsAPI.getAll();\n        setAppointments(appointmentsData);\n      } catch (appointmentsError) {\n        console.log('No appointments endpoint available yet');\n        setAppointments([]);\n      }\n\n      // Get all patients\n      try {\n        const patientsData = await patientsAPI.getAll();\n        setPatients(patientsData);\n      } catch (patientsError) {\n        console.log('No patients endpoint available yet');\n        setPatients([]);\n      }\n\n      // Load shift schedule from localStorage or use defaults\n      const loadShiftScheduleFromStorage = () => {\n        try {\n          const currentStaffId = staffId || user.staffId;\n          const storageKey = `shiftSchedule_${currentStaffId}`;\n          const savedSchedule = localStorage.getItem(storageKey);\n          \n          if (savedSchedule) {\n            console.log('üîß Loading saved shift schedule from localStorage');\n            const parsedSchedule = JSON.parse(savedSchedule);\n            setShiftSchedule(parsedSchedule);\n            return;\n          }\n        } catch (error) {\n          console.log('‚ö†Ô∏è Error loading from localStorage:', error);\n        }\n        \n        // Fall back to default schedule\n        console.log('üîß Using default shift schedule');\n        const defaultSchedule = [\n          { dayOfWeek: 'Monday', startTime: '09:00', endTime: '17:00', isActive: true },\n          { dayOfWeek: 'Tuesday', startTime: '09:00', endTime: '17:00', isActive: true },\n          { dayOfWeek: 'Wednesday', startTime: '09:00', endTime: '17:00', isActive: true },\n          { dayOfWeek: 'Thursday', startTime: '09:00', endTime: '17:00', isActive: true },\n          { dayOfWeek: 'Friday', startTime: '09:00', endTime: '17:00', isActive: true },\n          { dayOfWeek: 'Saturday', startTime: '09:00', endTime: '17:00', isActive: false },\n          { dayOfWeek: 'Sunday', startTime: '09:00', endTime: '17:00', isActive: false }\n        ];\n        setShiftSchedule(defaultSchedule);\n      };\n      \n      loadShiftScheduleFromStorage();\n    } catch (error: any) {\n      console.error('Error loading doctor dashboard data:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to load dashboard data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleApproveAppointment = async (appointmentId: string) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      // For now, just update the appointment status using existing endpoint\n      await appointmentsAPI.updateStatus(appointmentId, 'confirmed');\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error approving appointment:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to approve appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleRejectAppointment = async (appointmentId: string, reason: string) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      // For now, just update the appointment status using existing endpoint\n      await appointmentsAPI.updateStatus(appointmentId, 'cancelled');\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error rejecting appointment:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to reject appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleUpdateShiftSchedule = async (shiftData: any[]) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      \n      const currentStaffId = staffId || user.staffId;\n      if (!currentStaffId) {\n        throw new Error('No staff ID available');\n      }\n      \n      console.log('Updating shift schedule for staff ID:', currentStaffId);\n      console.log('Shift data:', shiftData);\n      \n      // Try to call the API, but don't fail if it doesn't exist yet\n      try {\n        await doctorAPI.updateShiftSchedule(currentStaffId, shiftData);\n        console.log('‚úÖ Shift schedule updated successfully via API');\n      } catch (apiError) {\n        console.log('‚ö†Ô∏è API update failed, storing locally:', apiError);\n        // If API fails, just store locally for now\n      }\n      \n      // Always update local state regardless of API success/failure\n      setShiftSchedule(shiftData);\n      \n      // Save to localStorage for persistence across page reloads\n      try {\n        const storageKey = `shiftSchedule_${currentStaffId}`;\n        localStorage.setItem(storageKey, JSON.stringify(shiftData));\n        console.log('‚úÖ Shift schedule saved to localStorage');\n      } catch (storageError) {\n        console.log('‚ö†Ô∏è Error saving to localStorage:', storageError);\n      }\n      \n      console.log('‚úÖ Shift schedule updated locally');\n    } catch (error: any) {\n      console.error('Error updating shift schedule:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to update shift schedule');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleViewPatientDetails = async (patientId: string) => {\n    try {\n      setError('');\n      // For now, just log the request (backend not implemented yet)\n      console.log('View patient details requested for:', patientId);\n    } catch (error: any) {\n      console.error('Error loading patient details:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to load patient details');\n    }\n  };\n\n  React.useEffect(() => {\n    loadDashboardData();\n  }, [user.id]);\n\n  // Call children as a function with props\n  const userWithStaffId = {\n    ...user,\n    staffId: staffId // Ensure staffId is included\n  };\n  \n  console.log('üîç DoctorDashboardWrapper returning user:', userWithStaffId);\n  console.log('üîç DoctorDashboardWrapper staffId:', staffId);\n  console.log('üîç DoctorDashboardWrapper user.staffId:', user.staffId);\n  \n  return children({\n    user: userWithStaffId,\n    appointments,\n    patients,\n    shiftSchedule,\n    isLoading,\n    isProcessing,\n    error,\n    onApproveAppointment: handleApproveAppointment,\n    onRejectAppointment: handleRejectAppointment,\n    onUpdateShiftSchedule: handleUpdateShiftSchedule,\n    onViewPatientDetails: handleViewPatientDetails\n  });\n};\n\n// Nurse Dashboard wrapper component that handles nurse-specific data loading\nconst NurseDashboardWrapper: React.FC<{ \n  children: (props: any) => React.ReactNode;\n  user: any;\n}> = ({ children, user }) => {\n  const [appointments, setAppointments] = React.useState<any[]>([]);\n  const [services, setServices] = React.useState<any[]>([]);\n  const [doctors, setDoctors] = React.useState<any[]>([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isProcessing, setIsProcessing] = React.useState(false);\n  const [error, setError] = React.useState('');\n\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      // Load appointments\n      try {\n        const appointmentsData = await appointmentsAPI.getAll();\n        setAppointments(appointmentsData);\n      } catch (appointmentsError) {\n        console.log('No appointments endpoint available yet');\n        setAppointments([]);\n      }\n\n      // Load services\n      try {\n        const servicesData = await servicesAPI.getAll();\n        setServices(servicesData);\n      } catch (servicesError) {\n        console.log('No services endpoint available yet');\n        setServices([]);\n      }\n\n      // Load doctors (staff with doctor role)\n      try {\n        const staffData = await staffAPI.getAll();\n        const doctorsData = staffData.filter((staff: any) => staff.role === 'doctor');\n        setDoctors(doctorsData);\n      } catch (staffError) {\n        console.log('No staff endpoint available yet');\n        setDoctors([]);\n      }\n    } catch (error: any) {\n      console.error('Error loading nurse dashboard data:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to load dashboard data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  React.useEffect(() => {\n    loadDashboardData();\n  }, []);\n\n  const handleBookWalkInAppointment = async (appointmentData: any) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      \n      // Create a walk-in appointment with immediate scheduling\n      const walkInAppointment = {\n        ...appointmentData,\n        appointmentDate: new Date().toISOString().split('T')[0], // Today\n        startTime: new Date().toTimeString().slice(0, 5), // Current time\n        status: 'walkin',\n        notes: `Walk-in appointment: ${appointmentData.notes || 'No additional notes'}`\n      };\n\n      await appointmentsAPI.create(walkInAppointment);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error booking walk-in appointment:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to book walk-in appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleApproveAppointmentForDoctor = async (appointmentId: string, doctorId: string) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      \n      // Update appointment with doctor assignment and approval\n      await appointmentsAPI.update(appointmentId, {\n        staffId: doctorId,\n        status: 'confirmed'\n      });\n      \n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error approving appointment for doctor:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to approve appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleRejectAppointment = async (appointmentId: string, reason: string) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      \n      await appointmentsAPI.update(appointmentId, {\n        status: 'cancelled',\n        notes: `Rejected by nurse: ${reason}`\n      });\n      \n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error rejecting appointment:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to reject appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return children({\n    user,\n    appointments,\n    services,\n    doctors,\n    isLoading,\n    isProcessing,\n    error,\n    onBookWalkInAppointment: handleBookWalkInAppointment,\n    onApproveAppointmentForDoctor: handleApproveAppointmentForDoctor,\n    onRejectAppointment: handleRejectAppointment,\n    onLogout: () => {\n      localStorage.removeItem('token');\n      window.location.href = '/auth';\n    }\n  });\n};\n\n// Admin Dashboard wrapper component that handles admin-specific data loading\nconst AdminDashboardWrapper: React.FC<{ \n  children: (props: any) => React.ReactNode;\n  user: any;\n}> = ({ children, user }) => {\n  const [users, setUsers] = React.useState<any[]>([]);\n  const [appointments, setAppointments] = React.useState<any[]>([]);\n  const [services, setServices] = React.useState<any[]>([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isProcessing, setIsProcessing] = React.useState(false);\n  const [error, setError] = React.useState('');\n\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      // Combine staff and patients into a single users array\n      const allUsers: any[] = [];\n\n      // Get all staff members\n      try {\n        const staffData = await staffAPI.getAll();\n        console.log('üìä Staff data received:', staffData);\n        allUsers.push(...staffData);\n      } catch (staffError) {\n        console.log('No staff endpoint available, falling back to admin users');\n        try {\n          const usersData = await adminAPI.getUsers();\n          console.log('üìä Admin users data received:', usersData);\n          allUsers.push(...usersData);\n        } catch (adminError) {\n          console.error('Failed to load staff/users:', adminError);\n        }\n      }\n\n      // Get all patients\n      try {\n        const patientsData = await patientsAPI.getAll();\n        console.log('üë• Patients data received:', patientsData);\n        \n        // Normalize patient data to match staff structure\n        const normalizedPatients = patientsData.map((patient: any) => ({\n          ...patient,\n          role: 'patient',\n          isActive: true,\n          // Ensure consistent field names\n          firstName: patient.firstName || patient.first_name,\n          lastName: patient.lastName || patient.last_name,\n          email: patient.email,\n          phone: patient.phone,\n          id: patient.id,\n          userId: patient.userId || patient.id\n        }));\n        \n        console.log('üë• Normalized patients:', normalizedPatients);\n        allUsers.push(...normalizedPatients);\n      } catch (patientsError) {\n        console.error('‚ùå Failed to load patients:', patientsError);\n        console.log('No patients endpoint available or no patients in database');\n      }\n\n      console.log('‚úÖ Combined users data:', allUsers);\n      setUsers(allUsers);\n\n      // Get all appointments\n      try {\n        const appointmentsData = await appointmentsAPI.getAll();\n        setAppointments(appointmentsData);\n      } catch (appointmentsError) {\n        console.log('No appointments endpoint available yet');\n        setAppointments([]);\n      }\n\n      // Load services\n      try {\n        const servicesData = await servicesAPI.getAll();\n        setServices(servicesData);\n      } catch (servicesError) {\n        console.log('No services endpoint available yet');\n        setServices([]);\n      }\n    } catch (error: any) {\n      console.error('Error loading admin dashboard data:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to load dashboard data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleToggleUserStatus = async (userId: string, isActive: boolean) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await adminAPI.updateUserStatus(userId, isActive);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error updating user status:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to update user status');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleUpdateUserRole = async (userId: string, newRole: string) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await adminAPI.updateUserRole(userId, newRole);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error updating user role:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to update user role');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleCreateStaff = async (staffData: any) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await adminAPI.createStaff(staffData);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error creating staff:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to create staff member');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleCreateService = async (serviceData: any) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await servicesAPI.create(serviceData);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error creating service:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to create service');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleUpdateService = async (serviceId: string, serviceData: any) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await servicesAPI.update(serviceId, serviceData);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error updating service:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to update service');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleDeleteService = async (serviceId: string) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      \n      // Check if service is being used by any appointments\n      const appointmentsUsingService = appointments.filter(apt => apt.service.id === serviceId);\n      if (appointmentsUsingService.length > 0) {\n        setError(`Cannot delete service. It is currently being used by ${appointmentsUsingService.length} appointment(s). Please cancel or reschedule these appointments first.`);\n        return;\n      }\n      \n      console.log('Attempting to delete service:', serviceId);\n      const deleteResult = await servicesAPI.delete(serviceId);\n      console.log('Delete result:', deleteResult);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error deleting service:', error);\n      \n      // Provide more specific error messages\n      let errorMessage = 'Failed to delete service';\n      if (error.response?.data?.error) {\n        errorMessage = error.response.data.error;\n      } else if (error.response?.data?.message) {\n        errorMessage = error.response.data.message;\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      \n      // Check for common database constraint errors\n      if (errorMessage.includes('foreign key') || errorMessage.includes('constraint') || errorMessage.includes('reference')) {\n        errorMessage = 'Cannot delete service. It is currently being used by existing appointments. Please cancel or reschedule these appointments first.';\n      }\n      \n      setError(errorMessage);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleApproveAppointment = async (appointmentId: string) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      // Update the appointment status to confirmed\n      await appointmentsAPI.updateStatus(appointmentId, 'confirmed');\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error approving appointment:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to approve appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleRejectAppointment = async (appointmentId: string, reason: string) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      // Update the appointment status to cancelled with reason\n      await appointmentsAPI.updateStatus(appointmentId, 'cancelled');\n      // Optionally update notes with rejection reason\n      await appointmentsAPI.update(appointmentId, {\n        notes: `Rejected by admin: ${reason}`\n      });\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error rejecting appointment:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to reject appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  React.useEffect(() => {\n    loadDashboardData();\n  }, [user.id]);\n\n  // Call children as a function with props\n  return children({\n    user,\n    users,\n    appointments,\n    services,\n    isLoading,\n    isProcessing,\n    error,\n    onToggleUserStatus: handleToggleUserStatus,\n    onUpdateUserRole: handleUpdateUserRole,\n    onCreateStaff: handleCreateStaff,\n    onCreateService: handleCreateService,\n    onUpdateService: handleUpdateService,\n    onDeleteService: handleDeleteService,\n    onRefreshAppointments: loadDashboardData,\n    onApproveAppointment: handleApproveAppointment,\n    onRejectAppointment: handleRejectAppointment,\n    onLogout: () => {\n      localStorage.removeItem('token');\n      window.location.href = '/auth';\n    }\n  });\n};\n\n// Main App Routes component\nconst AppRoutes: React.FC = () => {\n  const { isAuthenticated, user, login, register, logout, isLoading, error, clearError } = useAuth();\n\n  const handleLogin = async (email: string, password: string) => {\n    try {\n      await login({ email, password });\n    } catch (err) {\n      // Error is handled by AuthContext\n    }\n  };\n\n  const handleRegister = async (userData: any) => {\n    try {\n      await register(userData);\n    } catch (err) {\n      // Error is handled by AuthContext\n    }\n  };\n\n  const handleLogout = () => {\n    logout();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  return (\n    <Routes>\n      {/* Public Routes */}\n      <Route path=\"/\" element={<LandingPage />} />\n      <Route \n        path=\"/auth\" \n        element={\n          isAuthenticated ? (\n            <Navigate to={\n              user?.roles?.includes('admin') ? '/admin-dashboard' :\n              user?.roles?.includes('doctor') ? '/doctor-dashboard' :\n              user?.roles?.includes('nurse') ? '/nurse-dashboard' :\n              '/patient-dashboard'\n            } replace />\n          ) : (\n            <AuthPage\n              onLogin={handleLogin}\n              onRegister={handleRegister}\n              isLoading={isLoading}\n              error={error}\n              clearError={clearError}\n            />\n          )\n        } \n      />\n\n      {/* Protected Routes */}\n      <Route\n        path=\"/patient-dashboard\"\n        element={\n          <ProtectedRoute allowedRoles={['patient']}>\n            <DashboardWrapper user={user}>\n              {(props) => <PatientDashboard {...props} onLogout={handleLogout} />}\n            </DashboardWrapper>\n          </ProtectedRoute>\n        }\n      />\n\n      <Route\n        path=\"/doctor-dashboard\"\n        element={\n          <ProtectedRoute allowedRoles={['doctor']}>\n            <DoctorDashboardWrapper user={user}>\n              {(props) => <DoctorDashboard {...props} onLogout={handleLogout} />}\n            </DoctorDashboardWrapper>\n          </ProtectedRoute>\n        }\n      />\n\n      <Route\n        path=\"/admin-dashboard\"\n        element={\n          <ProtectedRoute allowedRoles={['admin']}>\n            <AdminDashboardWrapper user={user}>\n              {(props) => <AdminDashboard {...props} onLogout={handleLogout} />}\n            </AdminDashboardWrapper>\n          </ProtectedRoute>\n        }\n      />\n\n      <Route\n        path=\"/nurse-dashboard\"\n        element={\n          <ProtectedRoute allowedRoles={['nurse']}>\n            <NurseDashboardWrapper user={user}>\n              {(props) => <NurseDashboard {...props} onLogout={handleLogout} />}\n            </NurseDashboardWrapper>\n          </ProtectedRoute>\n        }\n      />\n\n      {/* Fallback Routes */}\n      <Route path=\"/unauthorized\" element={\n        <div className=\"min-h-screen flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-foreground mb-4\">Unauthorized</h1>\n            <p className=\"text-muted-foreground mb-4\">You don't have permission to access this page.</p>\n            <button \n              onClick={handleLogout}\n              className=\"px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90\"\n            >\n              Sign Out\n            </button>\n          </div>\n        </div>\n      } />\n      \n      <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\n    </Routes>\n  );\n};\n\n// Main App component\nconst App: React.FC = () => {\n  return (\n    <AuthProvider>\n      <Router>\n        <div className=\"App\">\n          <AppRoutes />\n        </div>\n      </Router>\n    </AuthProvider>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}