{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authAPI } from '../services/api';\n\n// Initial state\nconst initialState = {\n  user: null,\n  token: null,\n  isAuthenticated: false,\n  isLoading: true,\n  error: null\n};\n\n// Action types\nconst AUTH_ACTIONS = {\n  LOGIN_START: 'LOGIN_START',\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\n  LOGIN_FAILURE: 'LOGIN_FAILURE',\n  REGISTER_START: 'REGISTER_START',\n  REGISTER_SUCCESS: 'REGISTER_SUCCESS',\n  REGISTER_FAILURE: 'REGISTER_FAILURE',\n  LOGOUT: 'LOGOUT',\n  LOAD_USER_START: 'LOAD_USER_START',\n  LOAD_USER_SUCCESS: 'LOAD_USER_SUCCESS',\n  LOAD_USER_FAILURE: 'LOAD_USER_FAILURE',\n  CLEAR_ERROR: 'CLEAR_ERROR'\n};\n\n// Reducer\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case AUTH_ACTIONS.LOGIN_START:\n    case AUTH_ACTIONS.REGISTER_START:\n    case AUTH_ACTIONS.LOAD_USER_START:\n      return {\n        ...state,\n        isLoading: true,\n        error: null\n      };\n    case AUTH_ACTIONS.LOGIN_SUCCESS:\n    case AUTH_ACTIONS.REGISTER_SUCCESS:\n    case AUTH_ACTIONS.LOAD_USER_SUCCESS:\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null\n      };\n    case AUTH_ACTIONS.LOGIN_FAILURE:\n    case AUTH_ACTIONS.REGISTER_FAILURE:\n    case AUTH_ACTIONS.LOAD_USER_FAILURE:\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: action.payload\n      };\n    case AUTH_ACTIONS.LOGOUT:\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: null\n      };\n    case AUTH_ACTIONS.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Auth provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Load user from localStorage on app start\n  useEffect(() => {\n    const loadUser = async () => {\n      const token = localStorage.getItem('token');\n      const userData = localStorage.getItem('user');\n      if (token && userData) {\n        try {\n          const user = JSON.parse(userData);\n          dispatch({\n            type: AUTH_ACTIONS.LOAD_USER_SUCCESS,\n            payload: {\n              user,\n              token\n            }\n          });\n        } catch (error) {\n          // Invalid user data in localStorage\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          dispatch({\n            type: AUTH_ACTIONS.LOAD_USER_FAILURE,\n            payload: 'Invalid user data'\n          });\n        }\n      } else {\n        dispatch({\n          type: AUTH_ACTIONS.LOAD_USER_FAILURE,\n          payload: 'No user data found'\n        });\n      }\n    };\n    loadUser();\n  }, []);\n\n  // Login function\n  const login = async credentials => {\n    dispatch({\n      type: AUTH_ACTIONS.LOGIN_START\n    });\n    try {\n      const response = await authAPI.login(credentials);\n      const {\n        token,\n        user\n      } = response;\n\n      // Store in localStorage\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_SUCCESS,\n        payload: {\n          user,\n          token\n        }\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      const errorMessage = error.error || error.message || 'Login failed';\n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_FAILURE,\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Register function\n  const register = async userData => {\n    dispatch({\n      type: AUTH_ACTIONS.REGISTER_START\n    });\n    try {\n      const response = await authAPI.register(userData);\n      dispatch({\n        type: AUTH_ACTIONS.REGISTER_SUCCESS,\n        payload: response\n      });\n      return {\n        success: true,\n        message: response.message\n      };\n    } catch (error) {\n      const errorMessage = error.error || error.message || 'Registration failed';\n      dispatch({\n        type: AUTH_ACTIONS.REGISTER_FAILURE,\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      await authAPI.logout();\n    } catch (error) {\n      // Even if logout API fails, we should still clear local state\n      console.error('Logout API error:', error);\n    } finally {\n      // Clear localStorage\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      dispatch({\n        type: AUTH_ACTIONS.LOGOUT\n      });\n    }\n  };\n\n  // Clear error function\n  const clearError = () => {\n    dispatch({\n      type: AUTH_ACTIONS.CLEAR_ERROR\n    });\n  };\n\n  // Check if user has specific role\n  const hasRole = role => {\n    var _state$user, _state$user$roles;\n    return ((_state$user = state.user) === null || _state$user === void 0 ? void 0 : (_state$user$roles = _state$user.roles) === null || _state$user$roles === void 0 ? void 0 : _state$user$roles.includes(role)) || false;\n  };\n\n  // Check if user has any of the specified roles\n  const hasAnyRole = roles => {\n    return roles.some(role => {\n      var _state$user2, _state$user2$roles;\n      return (_state$user2 = state.user) === null || _state$user2 === void 0 ? void 0 : (_state$user2$roles = _state$user2.roles) === null || _state$user2$roles === void 0 ? void 0 : _state$user2$roles.includes(role);\n    });\n  };\n\n  // Get user's primary role (first role in the array)\n  const getPrimaryRole = () => {\n    var _state$user3, _state$user3$roles;\n    return ((_state$user3 = state.user) === null || _state$user3 === void 0 ? void 0 : (_state$user3$roles = _state$user3.roles) === null || _state$user3$roles === void 0 ? void 0 : _state$user3$roles[0]) || null;\n  };\n  const value = {\n    ...state,\n    login,\n    register,\n    logout,\n    clearError,\n    hasRole,\n    hasAnyRole,\n    getPrimaryRole\n  };\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value\n  }, children);\n};\n\n// Custom hook to use auth context\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","authAPI","initialState","user","token","isAuthenticated","isLoading","error","AUTH_ACTIONS","LOGIN_START","LOGIN_SUCCESS","LOGIN_FAILURE","REGISTER_START","REGISTER_SUCCESS","REGISTER_FAILURE","LOGOUT","LOAD_USER_START","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","CLEAR_ERROR","authReducer","state","action","type","payload","AuthContext","AuthProvider","children","_s","dispatch","loadUser","localStorage","getItem","userData","JSON","parse","removeItem","login","credentials","response","setItem","stringify","success","errorMessage","message","register","logout","console","clearError","hasRole","role","_state$user","_state$user$roles","roles","includes","hasAnyRole","some","_state$user2","_state$user2$roles","getPrimaryRole","_state$user3","_state$user3$roles","value","createElement","Provider","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Project/HopewellClinic/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport { authAPI } from '../services/api';\r\n\r\n// Initial state\r\nconst initialState = {\r\n  user: null,\r\n  token: null,\r\n  isAuthenticated: false,\r\n  isLoading: true,\r\n  error: null,\r\n};\r\n\r\n// Action types\r\nconst AUTH_ACTIONS = {\r\n  LOGIN_START: 'LOGIN_START',\r\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\r\n  LOGIN_FAILURE: 'LOGIN_FAILURE',\r\n  REGISTER_START: 'REGISTER_START',\r\n  REGISTER_SUCCESS: 'REGISTER_SUCCESS',\r\n  REGISTER_FAILURE: 'REGISTER_FAILURE',\r\n  LOGOUT: 'LOGOUT',\r\n  LOAD_USER_START: 'LOAD_USER_START',\r\n  LOAD_USER_SUCCESS: 'LOAD_USER_SUCCESS',\r\n  LOAD_USER_FAILURE: 'LOAD_USER_FAILURE',\r\n  CLEAR_ERROR: 'CLEAR_ERROR',\r\n};\r\n\r\n// Reducer\r\nconst authReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case AUTH_ACTIONS.LOGIN_START:\r\n    case AUTH_ACTIONS.REGISTER_START:\r\n    case AUTH_ACTIONS.LOAD_USER_START:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        error: null,\r\n      };\r\n\r\n    case AUTH_ACTIONS.LOGIN_SUCCESS:\r\n    case AUTH_ACTIONS.REGISTER_SUCCESS:\r\n    case AUTH_ACTIONS.LOAD_USER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        user: action.payload.user,\r\n        token: action.payload.token,\r\n        isAuthenticated: true,\r\n        isLoading: false,\r\n        error: null,\r\n      };\r\n\r\n    case AUTH_ACTIONS.LOGIN_FAILURE:\r\n    case AUTH_ACTIONS.REGISTER_FAILURE:\r\n    case AUTH_ACTIONS.LOAD_USER_FAILURE:\r\n      return {\r\n        ...state,\r\n        user: null,\r\n        token: null,\r\n        isAuthenticated: false,\r\n        isLoading: false,\r\n        error: action.payload,\r\n      };\r\n\r\n    case AUTH_ACTIONS.LOGOUT:\r\n      return {\r\n        ...state,\r\n        user: null,\r\n        token: null,\r\n        isAuthenticated: false,\r\n        isLoading: false,\r\n        error: null,\r\n      };\r\n\r\n    case AUTH_ACTIONS.CLEAR_ERROR:\r\n      return {\r\n        ...state,\r\n        error: null,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Create context\r\nconst AuthContext = createContext();\r\n\r\n// Auth provider component\r\nexport const AuthProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  // Load user from localStorage on app start\r\n  useEffect(() => {\r\n    const loadUser = async () => {\r\n      const token = localStorage.getItem('token');\r\n      const userData = localStorage.getItem('user');\r\n\r\n      if (token && userData) {\r\n        try {\r\n          const user = JSON.parse(userData);\r\n          dispatch({\r\n            type: AUTH_ACTIONS.LOAD_USER_SUCCESS,\r\n            payload: { user, token },\r\n          });\r\n        } catch (error) {\r\n          // Invalid user data in localStorage\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('user');\r\n          dispatch({\r\n            type: AUTH_ACTIONS.LOAD_USER_FAILURE,\r\n            payload: 'Invalid user data',\r\n          });\r\n        }\r\n      } else {\r\n        dispatch({\r\n          type: AUTH_ACTIONS.LOAD_USER_FAILURE,\r\n          payload: 'No user data found',\r\n        });\r\n      }\r\n    };\r\n\r\n    loadUser();\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = async (credentials) => {\r\n    dispatch({ type: AUTH_ACTIONS.LOGIN_START });\r\n\r\n    try {\r\n      const response = await authAPI.login(credentials);\r\n      const { token, user } = response;\r\n\r\n      // Store in localStorage\r\n      localStorage.setItem('token', token);\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n\r\n      dispatch({\r\n        type: AUTH_ACTIONS.LOGIN_SUCCESS,\r\n        payload: { user, token },\r\n      });\r\n\r\n      return { success: true };\r\n    } catch (error) {\r\n      const errorMessage = error.error || error.message || 'Login failed';\r\n      dispatch({\r\n        type: AUTH_ACTIONS.LOGIN_FAILURE,\r\n        payload: errorMessage,\r\n      });\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Register function\r\n  const register = async (userData) => {\r\n    dispatch({ type: AUTH_ACTIONS.REGISTER_START });\r\n\r\n    try {\r\n      const response = await authAPI.register(userData);\r\n      \r\n      dispatch({\r\n        type: AUTH_ACTIONS.REGISTER_SUCCESS,\r\n        payload: response,\r\n      });\r\n\r\n      return { success: true, message: response.message };\r\n    } catch (error) {\r\n      const errorMessage = error.error || error.message || 'Registration failed';\r\n      dispatch({\r\n        type: AUTH_ACTIONS.REGISTER_FAILURE,\r\n        payload: errorMessage,\r\n      });\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = async () => {\r\n    try {\r\n      await authAPI.logout();\r\n    } catch (error) {\r\n      // Even if logout API fails, we should still clear local state\r\n      console.error('Logout API error:', error);\r\n    } finally {\r\n      // Clear localStorage\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n\r\n      dispatch({ type: AUTH_ACTIONS.LOGOUT });\r\n    }\r\n  };\r\n\r\n  // Clear error function\r\n  const clearError = () => {\r\n    dispatch({ type: AUTH_ACTIONS.CLEAR_ERROR });\r\n  };\r\n\r\n  // Check if user has specific role\r\n  const hasRole = (role) => {\r\n    return state.user?.roles?.includes(role) || false;\r\n  };\r\n\r\n  // Check if user has any of the specified roles\r\n  const hasAnyRole = (roles) => {\r\n    return roles.some(role => state.user?.roles?.includes(role));\r\n  };\r\n\r\n  // Get user's primary role (first role in the array)\r\n  const getPrimaryRole = () => {\r\n    return state.user?.roles?.[0] || null;\r\n  };\r\n\r\n  const value = {\r\n    ...state,\r\n    login,\r\n    register,\r\n    logout,\r\n    clearError,\r\n    hasRole,\r\n    hasAnyRole,\r\n    getPrimaryRole,\r\n  };\r\n\r\n  return React.createElement(AuthContext.Provider, { value }, children);\r\n};\r\n\r\n// Custom hook to use auth context\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}