{"ast":null,"code":"var _jsxFileName = \"C:\\\\Project\\\\HopewellClinic\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$();\nimport React from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport { AuthProvider, useAuth } from './contexts/AuthContext';\nimport LandingPage from './components/LandingPage';\nimport AuthPage from './components/AuthPage';\nimport PatientDashboard from './components/PatientDashboard';\nimport DoctorDashboard from './components/DoctorDashboard';\nimport AdminDashboard from './components/AdminDashboard';\nimport NurseDashboard from './components/NurseDashboard';\nimport LoadingSpinner from './components/LoadingSpinner';\n\n// Import the existing API functions\nimport { appointmentsAPI, servicesAPI, patientsAPI, staffAPI, doctorAPI, adminAPI } from './services/api';\n\n// Protected Route component\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children,\n  allowedRoles = []\n}) => {\n  _s();\n  const {\n    isAuthenticated,\n    isLoading,\n    hasAnyRole\n  } = useAuth();\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen flex items-center justify-center\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this);\n  }\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/auth\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  }\n  if (allowedRoles.length > 0 && !hasAnyRole(allowedRoles)) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/unauthorized\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n\n// Dashboard wrapper component that handles data loading\n_s(ProtectedRoute, \"QRsE/tUD7olIanpaPmCviy1w10g=\", false, function () {\n  return [useAuth];\n});\n_c = ProtectedRoute;\nconst DashboardWrapper = ({\n  children,\n  user\n}) => {\n  _s2();\n  const [appointments, setAppointments] = React.useState([]);\n  const [services, setServices] = React.useState([]);\n  const [doctors, setDoctors] = React.useState([]);\n  const [availableSlots, setAvailableSlots] = React.useState([]);\n  const [patientId, setPatientId] = React.useState(null);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isBooking, setIsBooking] = React.useState(false);\n  const [bookingError, setBookingError] = React.useState('');\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n\n      // Get the Patient ID from the ApplicationUser ID\n      console.log('🔍 Loading dashboard data for user:', user);\n      console.log('🔍 User ID:', user.id);\n      try {\n        const patient = await patientsAPI.getByUserId(user.id);\n        console.log('✅ Found patient record:', patient);\n        setPatientId(patient.id);\n        const [appointmentsData, servicesData, doctorsData] = await Promise.all([appointmentsAPI.getByPatient(patient.id), servicesAPI.getAll(), staffAPI.getByRole('doctor')]);\n        setAppointments(appointmentsData);\n        setServices(servicesData);\n        setDoctors(doctorsData);\n      } catch (patientError) {\n        console.error('❌ Error finding patient record:', patientError);\n        console.log('⚠️ Patient not found for user ID:', user.id);\n\n        // Set patientId to null to trigger the error in BookingWizard\n        setPatientId(null);\n\n        // Still try to load other data\n        try {\n          const [servicesData, doctorsData] = await Promise.all([servicesAPI.getAll(), staffAPI.getByRole('doctor')]);\n          setServices(servicesData);\n          setDoctors(doctorsData);\n          setAppointments([]); // No appointments without patient\n        } catch (otherError) {\n          console.error('❌ Error loading other dashboard data:', otherError);\n        }\n      }\n    } catch (error) {\n      console.error('❌ Error loading dashboard data:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const loadAvailableSlots = async date => {\n    try {\n      console.log('Loading available slots for date:', date);\n      const slots = await appointmentsAPI.getAvailable(date);\n      console.log('Available slots received:', slots);\n\n      // Calculate the day of the week for the requested date\n      const requestedDate = new Date(date);\n      const dayOfWeek = requestedDate.getDay(); // 0 = Sunday, 1 = Monday, etc.\n\n      // Filter slots to only include the correct day of the week\n      const filteredSlots = slots.filter(slot => slot.dayOfWeek === dayOfWeek);\n      console.log('Filtered slots for day', dayOfWeek, ':', filteredSlots);\n      setAvailableSlots(filteredSlots);\n    } catch (error) {\n      console.error('Error loading available slots:', error);\n      setAvailableSlots([]);\n    }\n  };\n  const handleBookAppointment = async bookingData => {\n    try {\n      setIsBooking(true);\n      setBookingError('');\n\n      // Calculate end time based on service duration\n      const selectedService = services.find(s => s.id === bookingData.serviceId);\n\n      // Ensure startTime is in HH:mm:ss format\n      const startTimeFormatted = bookingData.startTime.includes(':') && bookingData.startTime.split(':').length === 2 ? bookingData.startTime + ':00' : bookingData.startTime;\n      const startTime = new Date(`2000-01-01T${startTimeFormatted}`);\n      const endTime = new Date(startTime.getTime() + ((selectedService === null || selectedService === void 0 ? void 0 : selectedService.durationMinutes) || 30) * 60000);\n      const endTimeString = endTime.toTimeString().slice(0, 8); // Format as HH:mm:ss\n\n      await appointmentsAPI.create({\n        patientId: patientId,\n        serviceId: bookingData.serviceId,\n        staffId: bookingData.staffId,\n        appointmentDate: bookingData.appointmentDate,\n        startTime: startTimeFormatted,\n        endTime: endTimeString,\n        notes: bookingData.notes || ''\n      });\n\n      // Refresh appointments\n      await loadDashboardData();\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error booking appointment:', error);\n      setBookingError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.message || 'Failed to book appointment');\n    } finally {\n      setIsBooking(false);\n    }\n  };\n  const handleUpdateAppointment = async (appointmentId, updateData) => {\n    try {\n      setIsBooking(true);\n      setBookingError('');\n\n      // Calculate end time based on service duration\n      const selectedService = services.find(s => s.id === updateData.serviceId);\n\n      // Ensure startTime is in HH:mm:ss format\n      const startTimeFormatted = updateData.startTime.includes(':') && updateData.startTime.split(':').length === 2 ? updateData.startTime + ':00' : updateData.startTime;\n      const startTime = new Date(`2000-01-01T${startTimeFormatted}`);\n      const endTime = new Date(startTime.getTime() + ((selectedService === null || selectedService === void 0 ? void 0 : selectedService.durationMinutes) || 30) * 60000);\n      const endTimeString = endTime.toTimeString().slice(0, 8); // Format as HH:mm:ss\n\n      await appointmentsAPI.update(appointmentId, {\n        appointmentDate: updateData.appointmentDate,\n        startTime: startTimeFormatted,\n        endTime: endTimeString,\n        notes: updateData.notes || ''\n      });\n\n      // Refresh appointments\n      await loadDashboardData();\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Error updating appointment:', error);\n      setBookingError(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || error.message || 'Failed to update appointment');\n    } finally {\n      setIsBooking(false);\n    }\n  };\n  const handleCancelAppointment = async appointmentId => {\n    try {\n      setIsBooking(true);\n      setBookingError('');\n      await appointmentsAPI.delete(appointmentId);\n\n      // Refresh appointments\n      await loadDashboardData();\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('Error canceling appointment:', error);\n      setBookingError(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || error.message || 'Failed to cancel appointment');\n    } finally {\n      setIsBooking(false);\n    }\n  };\n  React.useEffect(() => {\n    loadDashboardData();\n  }, [user.id]);\n\n  // Call children as a function with props\n  return children({\n    user,\n    appointments,\n    services,\n    doctors,\n    availableSlots,\n    patientId,\n    isLoading,\n    isBooking,\n    bookingError,\n    onBookAppointment: handleBookAppointment,\n    onUpdateAppointment: handleUpdateAppointment,\n    onCancelAppointment: handleCancelAppointment,\n    onLoadAvailableSlots: loadAvailableSlots,\n    onRefreshAppointments: loadDashboardData\n  });\n};\n\n// Doctor Dashboard wrapper component that handles doctor-specific data loading\n_s2(DashboardWrapper, \"QjIZ9+KrVBr9O7c8AGMnUuNJ29A=\");\n_c2 = DashboardWrapper;\nconst DoctorDashboardWrapper = ({\n  children,\n  user\n}) => {\n  _s3();\n  const [appointments, setAppointments] = React.useState([]);\n  const [patients, setPatients] = React.useState([]);\n  const [shiftSchedule, setShiftSchedule] = React.useState([]);\n  const [staffId, setStaffId] = React.useState('');\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isProcessing, setIsProcessing] = React.useState(false);\n  const [error, setError] = React.useState('');\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      // Get the Staff record for this user\n      try {\n        console.log('🔍 Looking up staff record for user:', user);\n        console.log('User ID to match:', user.id);\n        console.log('User email to match:', user.email);\n        const allStaff = await staffAPI.getAll();\n        console.log('📋 All staff records:', allStaff);\n\n        // Try to find by userId first\n        let staffRecord = allStaff.find(s => s.userId === user.id);\n\n        // If not found, try by email\n        if (!staffRecord) {\n          console.log('⚠️ No match by userId, trying email match...');\n          staffRecord = allStaff.find(s => {\n            var _s$email, _user$email;\n            return ((_s$email = s.email) === null || _s$email === void 0 ? void 0 : _s$email.toLowerCase()) === ((_user$email = user.email) === null || _user$email === void 0 ? void 0 : _user$email.toLowerCase());\n          });\n        }\n\n        // If still not found, try by role='doctor' and similar name\n        if (!staffRecord && user.role === 'doctor') {\n          console.log('⚠️ No match by email, trying name match for doctors...');\n          staffRecord = allStaff.find(s => {\n            var _s$firstName, _user$firstName, _s$lastName, _user$lastName;\n            return s.role === 'doctor' && ((_s$firstName = s.firstName) === null || _s$firstName === void 0 ? void 0 : _s$firstName.toLowerCase()) === ((_user$firstName = user.firstName) === null || _user$firstName === void 0 ? void 0 : _user$firstName.toLowerCase()) && ((_s$lastName = s.lastName) === null || _s$lastName === void 0 ? void 0 : _s$lastName.toLowerCase()) === ((_user$lastName = user.lastName) === null || _user$lastName === void 0 ? void 0 : _user$lastName.toLowerCase());\n          });\n        }\n        if (staffRecord) {\n          console.log('✅ Found staff record:', staffRecord);\n          console.log('✅ Staff ID to use:', staffRecord.id);\n          console.log('✅ Staff ID type:', typeof staffRecord.id);\n          console.log('✅ Staff ID length:', staffRecord.id.length);\n          setStaffId(staffRecord.id);\n\n          // Update the user object with the staff ID\n          user.staffId = staffRecord.id;\n          console.log('✅ Updated user.staffId to:', user.staffId);\n        } else {\n          console.error('❌ NO STAFF RECORD FOUND!');\n          console.log('User details:', {\n            id: user.id,\n            email: user.email,\n            firstName: user.firstName,\n            lastName: user.lastName\n          });\n          console.log('Available staff records:', allStaff.map(s => ({\n            id: s.id,\n            userId: s.userId,\n            email: s.email,\n            firstName: s.firstName,\n            lastName: s.lastName,\n            role: s.role\n          })));\n        }\n      } catch (staffError) {\n        console.error('❌ Error fetching staff record:', staffError);\n      }\n\n      // Get all appointments\n      try {\n        const appointmentsData = await appointmentsAPI.getAll();\n        setAppointments(appointmentsData);\n      } catch (appointmentsError) {\n        console.log('No appointments endpoint available yet');\n        setAppointments([]);\n      }\n\n      // Get all patients\n      try {\n        const patientsData = await patientsAPI.getAll();\n        setPatients(patientsData);\n      } catch (patientsError) {\n        console.log('No patients endpoint available yet');\n        setPatients([]);\n      }\n\n      // Load shift schedule for the doctor (after staffId is set) - non-blocking\n      const loadShiftSchedule = async () => {\n        try {\n          const currentStaffId = staffId || user.staffId;\n          if (currentStaffId) {\n            console.log('🔍 Loading shift schedule for staff ID:', currentStaffId);\n            const shiftData = await doctorAPI.getShiftSchedule(currentStaffId);\n            console.log('✅ Shift schedule loaded:', shiftData);\n            setShiftSchedule(shiftData);\n          } else {\n            console.log('⚠️ No staffId available, using empty shift schedule');\n            setShiftSchedule([]);\n          }\n        } catch (shiftError) {\n          console.log('⚠️ Could not load shift schedule, using defaults:', shiftError);\n          // If shift schedule loading fails, use default schedule\n          const defaultSchedule = [{\n            dayOfWeek: 'Monday',\n            startTime: '09:00',\n            endTime: '17:00',\n            isActive: true\n          }, {\n            dayOfWeek: 'Tuesday',\n            startTime: '09:00',\n            endTime: '17:00',\n            isActive: true\n          }, {\n            dayOfWeek: 'Wednesday',\n            startTime: '09:00',\n            endTime: '17:00',\n            isActive: true\n          }, {\n            dayOfWeek: 'Thursday',\n            startTime: '09:00',\n            endTime: '17:00',\n            isActive: true\n          }, {\n            dayOfWeek: 'Friday',\n            startTime: '09:00',\n            endTime: '17:00',\n            isActive: true\n          }, {\n            dayOfWeek: 'Saturday',\n            startTime: '09:00',\n            endTime: '17:00',\n            isActive: false\n          }, {\n            dayOfWeek: 'Sunday',\n            startTime: '09:00',\n            endTime: '17:00',\n            isActive: false\n          }];\n          setShiftSchedule(defaultSchedule);\n        }\n      };\n\n      // Load shift schedule asynchronously without blocking the main flow\n      loadShiftSchedule();\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      console.error('Error loading doctor dashboard data:', error);\n      setError(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || error.message || 'Failed to load dashboard data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleApproveAppointment = async appointmentId => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      // For now, just update the appointment status using existing endpoint\n      await appointmentsAPI.updateStatus(appointmentId, 'confirmed');\n      await loadDashboardData(); // Refresh data\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      console.error('Error approving appointment:', error);\n      setError(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || error.message || 'Failed to approve appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleRejectAppointment = async (appointmentId, reason) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      // For now, just update the appointment status using existing endpoint\n      await appointmentsAPI.updateStatus(appointmentId, 'cancelled');\n      await loadDashboardData(); // Refresh data\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      console.error('Error rejecting appointment:', error);\n      setError(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.error) || error.message || 'Failed to reject appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleUpdateShiftSchedule = async shiftData => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      const currentStaffId = staffId || user.staffId;\n      if (!currentStaffId) {\n        throw new Error('No staff ID available');\n      }\n      console.log('Updating shift schedule for staff ID:', currentStaffId);\n      console.log('Shift data:', shiftData);\n\n      // Call the API to update shift schedule\n      await doctorAPI.updateShiftSchedule(currentStaffId, shiftData);\n\n      // Update local state\n      setShiftSchedule(shiftData);\n      console.log('✅ Shift schedule updated successfully');\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      console.error('Error updating shift schedule:', error);\n      setError(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.error) || error.message || 'Failed to update shift schedule');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleViewPatientDetails = async patientId => {\n    try {\n      setError('');\n      // For now, just log the request (backend not implemented yet)\n      console.log('View patient details requested for:', patientId);\n    } catch (error) {\n      var _error$response8, _error$response8$data;\n      console.error('Error loading patient details:', error);\n      setError(((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.error) || error.message || 'Failed to load patient details');\n    }\n  };\n  React.useEffect(() => {\n    loadDashboardData();\n  }, [user.id]);\n\n  // Call children as a function with props\n  const userWithStaffId = {\n    ...user,\n    staffId: staffId // Ensure staffId is included\n  };\n  console.log('🔍 DoctorDashboardWrapper returning user:', userWithStaffId);\n  console.log('🔍 DoctorDashboardWrapper staffId:', staffId);\n  console.log('🔍 DoctorDashboardWrapper user.staffId:', user.staffId);\n  return children({\n    user: userWithStaffId,\n    appointments,\n    patients,\n    shiftSchedule,\n    isLoading,\n    isProcessing,\n    error,\n    onApproveAppointment: handleApproveAppointment,\n    onRejectAppointment: handleRejectAppointment,\n    onUpdateShiftSchedule: handleUpdateShiftSchedule,\n    onViewPatientDetails: handleViewPatientDetails\n  });\n};\n\n// Nurse Dashboard wrapper component that handles nurse-specific data loading\n_s3(DoctorDashboardWrapper, \"8G5C4Y+m3q04vxl8khXUXKm7BHU=\");\n_c3 = DoctorDashboardWrapper;\nconst NurseDashboardWrapper = ({\n  children,\n  user\n}) => {\n  _s4();\n  const [appointments, setAppointments] = React.useState([]);\n  const [services, setServices] = React.useState([]);\n  const [doctors, setDoctors] = React.useState([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isProcessing, setIsProcessing] = React.useState(false);\n  const [error, setError] = React.useState('');\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      // Load appointments\n      try {\n        const appointmentsData = await appointmentsAPI.getAll();\n        setAppointments(appointmentsData);\n      } catch (appointmentsError) {\n        console.log('No appointments endpoint available yet');\n        setAppointments([]);\n      }\n\n      // Load services\n      try {\n        const servicesData = await servicesAPI.getAll();\n        setServices(servicesData);\n      } catch (servicesError) {\n        console.log('No services endpoint available yet');\n        setServices([]);\n      }\n\n      // Load doctors (staff with doctor role)\n      try {\n        const staffData = await staffAPI.getAll();\n        const doctorsData = staffData.filter(staff => staff.role === 'doctor');\n        setDoctors(doctorsData);\n      } catch (staffError) {\n        console.log('No staff endpoint available yet');\n        setDoctors([]);\n      }\n    } catch (error) {\n      var _error$response9, _error$response9$data;\n      console.error('Error loading nurse dashboard data:', error);\n      setError(((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.error) || error.message || 'Failed to load dashboard data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  React.useEffect(() => {\n    loadDashboardData();\n  }, []);\n  const handleBookWalkInAppointment = async appointmentData => {\n    try {\n      setIsProcessing(true);\n      setError('');\n\n      // Create a walk-in appointment with immediate scheduling\n      const walkInAppointment = {\n        ...appointmentData,\n        appointmentDate: new Date().toISOString().split('T')[0],\n        // Today\n        startTime: new Date().toTimeString().slice(0, 5),\n        // Current time\n        status: 'walkin',\n        notes: `Walk-in appointment: ${appointmentData.notes || 'No additional notes'}`\n      };\n      await appointmentsAPI.create(walkInAppointment);\n      await loadDashboardData(); // Refresh data\n    } catch (error) {\n      var _error$response0, _error$response0$data;\n      console.error('Error booking walk-in appointment:', error);\n      setError(((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : (_error$response0$data = _error$response0.data) === null || _error$response0$data === void 0 ? void 0 : _error$response0$data.error) || error.message || 'Failed to book walk-in appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleApproveAppointmentForDoctor = async (appointmentId, doctorId) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n\n      // Update appointment with doctor assignment and approval\n      await appointmentsAPI.update(appointmentId, {\n        staffId: doctorId,\n        status: 'confirmed'\n      });\n      await loadDashboardData(); // Refresh data\n    } catch (error) {\n      var _error$response1, _error$response1$data;\n      console.error('Error approving appointment for doctor:', error);\n      setError(((_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : (_error$response1$data = _error$response1.data) === null || _error$response1$data === void 0 ? void 0 : _error$response1$data.error) || error.message || 'Failed to approve appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleRejectAppointment = async (appointmentId, reason) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await appointmentsAPI.update(appointmentId, {\n        status: 'cancelled',\n        notes: `Rejected by nurse: ${reason}`\n      });\n      await loadDashboardData(); // Refresh data\n    } catch (error) {\n      var _error$response10, _error$response10$dat;\n      console.error('Error rejecting appointment:', error);\n      setError(((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : (_error$response10$dat = _error$response10.data) === null || _error$response10$dat === void 0 ? void 0 : _error$response10$dat.error) || error.message || 'Failed to reject appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  return children({\n    user,\n    appointments,\n    services,\n    doctors,\n    isLoading,\n    isProcessing,\n    error,\n    onBookWalkInAppointment: handleBookWalkInAppointment,\n    onApproveAppointmentForDoctor: handleApproveAppointmentForDoctor,\n    onRejectAppointment: handleRejectAppointment,\n    onLogout: () => {\n      localStorage.removeItem('token');\n      window.location.href = '/auth';\n    }\n  });\n};\n\n// Admin Dashboard wrapper component that handles admin-specific data loading\n_s4(NurseDashboardWrapper, \"PQwn7KKvfJlFxUDPBk489nEz4ZM=\");\n_c4 = NurseDashboardWrapper;\nconst AdminDashboardWrapper = ({\n  children,\n  user\n}) => {\n  _s5();\n  const [users, setUsers] = React.useState([]);\n  const [appointments, setAppointments] = React.useState([]);\n  const [services, setServices] = React.useState([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isProcessing, setIsProcessing] = React.useState(false);\n  const [error, setError] = React.useState('');\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      // Combine staff and patients into a single users array\n      const allUsers = [];\n\n      // Get all staff members\n      try {\n        const staffData = await staffAPI.getAll();\n        console.log('📊 Staff data received:', staffData);\n        allUsers.push(...staffData);\n      } catch (staffError) {\n        console.log('No staff endpoint available, falling back to admin users');\n        try {\n          const usersData = await adminAPI.getUsers();\n          console.log('📊 Admin users data received:', usersData);\n          allUsers.push(...usersData);\n        } catch (adminError) {\n          console.error('Failed to load staff/users:', adminError);\n        }\n      }\n\n      // Get all patients\n      try {\n        const patientsData = await patientsAPI.getAll();\n        console.log('👥 Patients data received:', patientsData);\n\n        // Normalize patient data to match staff structure\n        const normalizedPatients = patientsData.map(patient => ({\n          ...patient,\n          role: 'patient',\n          isActive: true,\n          // Ensure consistent field names\n          firstName: patient.firstName || patient.first_name,\n          lastName: patient.lastName || patient.last_name,\n          email: patient.email,\n          phone: patient.phone,\n          id: patient.id,\n          userId: patient.userId || patient.id\n        }));\n        console.log('👥 Normalized patients:', normalizedPatients);\n        allUsers.push(...normalizedPatients);\n      } catch (patientsError) {\n        console.error('❌ Failed to load patients:', patientsError);\n        console.log('No patients endpoint available or no patients in database');\n      }\n      console.log('✅ Combined users data:', allUsers);\n      setUsers(allUsers);\n\n      // Get all appointments\n      try {\n        const appointmentsData = await appointmentsAPI.getAll();\n        setAppointments(appointmentsData);\n      } catch (appointmentsError) {\n        console.log('No appointments endpoint available yet');\n        setAppointments([]);\n      }\n\n      // Load services\n      try {\n        const servicesData = await servicesAPI.getAll();\n        setServices(servicesData);\n      } catch (servicesError) {\n        console.log('No services endpoint available yet');\n        setServices([]);\n      }\n    } catch (error) {\n      var _error$response11, _error$response11$dat;\n      console.error('Error loading admin dashboard data:', error);\n      setError(((_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : (_error$response11$dat = _error$response11.data) === null || _error$response11$dat === void 0 ? void 0 : _error$response11$dat.error) || error.message || 'Failed to load dashboard data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleToggleUserStatus = async (userId, isActive) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await adminAPI.updateUserStatus(userId, isActive);\n      await loadDashboardData(); // Refresh data\n    } catch (error) {\n      var _error$response12, _error$response12$dat;\n      console.error('Error updating user status:', error);\n      setError(((_error$response12 = error.response) === null || _error$response12 === void 0 ? void 0 : (_error$response12$dat = _error$response12.data) === null || _error$response12$dat === void 0 ? void 0 : _error$response12$dat.error) || error.message || 'Failed to update user status');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleUpdateUserRole = async (userId, newRole) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await adminAPI.updateUserRole(userId, newRole);\n      await loadDashboardData(); // Refresh data\n    } catch (error) {\n      var _error$response13, _error$response13$dat;\n      console.error('Error updating user role:', error);\n      setError(((_error$response13 = error.response) === null || _error$response13 === void 0 ? void 0 : (_error$response13$dat = _error$response13.data) === null || _error$response13$dat === void 0 ? void 0 : _error$response13$dat.error) || error.message || 'Failed to update user role');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleCreateStaff = async staffData => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await adminAPI.createStaff(staffData);\n      await loadDashboardData(); // Refresh data\n    } catch (error) {\n      var _error$response14, _error$response14$dat;\n      console.error('Error creating staff:', error);\n      setError(((_error$response14 = error.response) === null || _error$response14 === void 0 ? void 0 : (_error$response14$dat = _error$response14.data) === null || _error$response14$dat === void 0 ? void 0 : _error$response14$dat.error) || error.message || 'Failed to create staff member');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleCreateService = async serviceData => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await servicesAPI.create(serviceData);\n      await loadDashboardData(); // Refresh data\n    } catch (error) {\n      var _error$response15, _error$response15$dat;\n      console.error('Error creating service:', error);\n      setError(((_error$response15 = error.response) === null || _error$response15 === void 0 ? void 0 : (_error$response15$dat = _error$response15.data) === null || _error$response15$dat === void 0 ? void 0 : _error$response15$dat.error) || error.message || 'Failed to create service');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleUpdateService = async (serviceId, serviceData) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await servicesAPI.update(serviceId, serviceData);\n      await loadDashboardData(); // Refresh data\n    } catch (error) {\n      var _error$response16, _error$response16$dat;\n      console.error('Error updating service:', error);\n      setError(((_error$response16 = error.response) === null || _error$response16 === void 0 ? void 0 : (_error$response16$dat = _error$response16.data) === null || _error$response16$dat === void 0 ? void 0 : _error$response16$dat.error) || error.message || 'Failed to update service');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleDeleteService = async serviceId => {\n    try {\n      setIsProcessing(true);\n      setError('');\n\n      // Check if service is being used by any appointments\n      const appointmentsUsingService = appointments.filter(apt => apt.service.id === serviceId);\n      if (appointmentsUsingService.length > 0) {\n        setError(`Cannot delete service. It is currently being used by ${appointmentsUsingService.length} appointment(s). Please cancel or reschedule these appointments first.`);\n        return;\n      }\n      console.log('Attempting to delete service:', serviceId);\n      const deleteResult = await servicesAPI.delete(serviceId);\n      console.log('Delete result:', deleteResult);\n      await loadDashboardData(); // Refresh data\n    } catch (error) {\n      var _error$response17, _error$response17$dat, _error$response18, _error$response18$dat;\n      console.error('Error deleting service:', error);\n\n      // Provide more specific error messages\n      let errorMessage = 'Failed to delete service';\n      if ((_error$response17 = error.response) !== null && _error$response17 !== void 0 && (_error$response17$dat = _error$response17.data) !== null && _error$response17$dat !== void 0 && _error$response17$dat.error) {\n        errorMessage = error.response.data.error;\n      } else if ((_error$response18 = error.response) !== null && _error$response18 !== void 0 && (_error$response18$dat = _error$response18.data) !== null && _error$response18$dat !== void 0 && _error$response18$dat.message) {\n        errorMessage = error.response.data.message;\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n\n      // Check for common database constraint errors\n      if (errorMessage.includes('foreign key') || errorMessage.includes('constraint') || errorMessage.includes('reference')) {\n        errorMessage = 'Cannot delete service. It is currently being used by existing appointments. Please cancel or reschedule these appointments first.';\n      }\n      setError(errorMessage);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  React.useEffect(() => {\n    loadDashboardData();\n  }, [user.id]);\n\n  // Call children as a function with props\n  return children({\n    user,\n    users,\n    appointments,\n    services,\n    isLoading,\n    isProcessing,\n    error,\n    onToggleUserStatus: handleToggleUserStatus,\n    onUpdateUserRole: handleUpdateUserRole,\n    onCreateStaff: handleCreateStaff,\n    onCreateService: handleCreateService,\n    onUpdateService: handleUpdateService,\n    onDeleteService: handleDeleteService,\n    onLogout: () => {\n      localStorage.removeItem('token');\n      window.location.href = '/auth';\n    }\n  });\n};\n\n// Main App Routes component\n_s5(AdminDashboardWrapper, \"a9OqehUcjTLs+bFLB7KNIpYPyzA=\");\n_c5 = AdminDashboardWrapper;\nconst AppRoutes = () => {\n  _s6();\n  var _user$roles, _user$roles2, _user$roles3;\n  const {\n    isAuthenticated,\n    user,\n    login,\n    register,\n    logout,\n    isLoading,\n    error,\n    clearError\n  } = useAuth();\n  const handleLogin = async (email, password) => {\n    try {\n      await login({\n        email,\n        password\n      });\n    } catch (err) {\n      // Error is handled by AuthContext\n    }\n  };\n  const handleRegister = async userData => {\n    try {\n      await register(userData);\n    } catch (err) {\n      // Error is handled by AuthContext\n    }\n  };\n  const handleLogout = () => {\n    logout();\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen flex items-center justify-center\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 854,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 853,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      element: /*#__PURE__*/_jsxDEV(LandingPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 862,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 862,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/auth\",\n      element: isAuthenticated ? /*#__PURE__*/_jsxDEV(Navigate, {\n        to: user !== null && user !== void 0 && (_user$roles = user.roles) !== null && _user$roles !== void 0 && _user$roles.includes('admin') ? '/admin-dashboard' : user !== null && user !== void 0 && (_user$roles2 = user.roles) !== null && _user$roles2 !== void 0 && _user$roles2.includes('doctor') ? '/doctor-dashboard' : user !== null && user !== void 0 && (_user$roles3 = user.roles) !== null && _user$roles3 !== void 0 && _user$roles3.includes('nurse') ? '/nurse-dashboard' : '/patient-dashboard',\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 867,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(AuthPage, {\n        onLogin: handleLogin,\n        onRegister: handleRegister,\n        isLoading: isLoading,\n        error: error,\n        clearError: clearError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 874,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 863,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/patient-dashboard\",\n      element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n        allowedRoles: ['patient'],\n        children: /*#__PURE__*/_jsxDEV(DashboardWrapper, {\n          user: user,\n          children: props => /*#__PURE__*/_jsxDEV(PatientDashboard, {\n            ...props,\n            onLogout: handleLogout\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 891,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 890,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 889,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 886,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/doctor-dashboard\",\n      element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n        allowedRoles: ['doctor'],\n        children: /*#__PURE__*/_jsxDEV(DoctorDashboardWrapper, {\n          user: user,\n          children: props => /*#__PURE__*/_jsxDEV(DoctorDashboard, {\n            ...props,\n            onLogout: handleLogout\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 902,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 901,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 900,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 897,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/admin-dashboard\",\n      element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n        allowedRoles: ['admin'],\n        children: /*#__PURE__*/_jsxDEV(AdminDashboardWrapper, {\n          user: user,\n          children: props => /*#__PURE__*/_jsxDEV(AdminDashboard, {\n            ...props,\n            onLogout: handleLogout\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 913,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 912,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 911,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 908,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/nurse-dashboard\",\n      element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n        allowedRoles: ['nurse'],\n        children: /*#__PURE__*/_jsxDEV(NurseDashboardWrapper, {\n          user: user,\n          children: props => /*#__PURE__*/_jsxDEV(NurseDashboard, {\n            ...props,\n            onLogout: handleLogout\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 924,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 923,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 922,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 919,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/unauthorized\",\n      element: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"min-h-screen flex items-center justify-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-2xl font-bold text-foreground mb-4\",\n            children: \"Unauthorized\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 934,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-muted-foreground mb-4\",\n            children: \"You don't have permission to access this page.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 935,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleLogout,\n            className: \"px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90\",\n            children: \"Sign Out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 936,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 933,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 932,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 931,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"*\",\n      element: /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/\",\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 946,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 946,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 860,\n    columnNumber: 5\n  }, this);\n};\n\n// Main App component\n_s6(AppRoutes, \"GaGKisbCmmD5CAA51vWhAmj0u90=\", false, function () {\n  return [useAuth];\n});\n_c6 = AppRoutes;\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(AuthProvider, {\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/_jsxDEV(AppRoutes, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 957,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 956,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 955,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 954,\n    columnNumber: 5\n  }, this);\n};\n_c7 = App;\nexport default App;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"ProtectedRoute\");\n$RefreshReg$(_c2, \"DashboardWrapper\");\n$RefreshReg$(_c3, \"DoctorDashboardWrapper\");\n$RefreshReg$(_c4, \"NurseDashboardWrapper\");\n$RefreshReg$(_c5, \"AdminDashboardWrapper\");\n$RefreshReg$(_c6, \"AppRoutes\");\n$RefreshReg$(_c7, \"App\");","map":{"version":3,"names":["React","BrowserRouter","Router","Routes","Route","Navigate","AuthProvider","useAuth","LandingPage","AuthPage","PatientDashboard","DoctorDashboard","AdminDashboard","NurseDashboard","LoadingSpinner","appointmentsAPI","servicesAPI","patientsAPI","staffAPI","doctorAPI","adminAPI","jsxDEV","_jsxDEV","Fragment","_Fragment","ProtectedRoute","children","allowedRoles","_s","isAuthenticated","isLoading","hasAnyRole","className","fileName","_jsxFileName","lineNumber","columnNumber","to","replace","length","_c","DashboardWrapper","user","_s2","appointments","setAppointments","useState","services","setServices","doctors","setDoctors","availableSlots","setAvailableSlots","patientId","setPatientId","setIsLoading","isBooking","setIsBooking","bookingError","setBookingError","loadDashboardData","console","log","id","patient","getByUserId","appointmentsData","servicesData","doctorsData","Promise","all","getByPatient","getAll","getByRole","patientError","error","otherError","loadAvailableSlots","date","slots","getAvailable","requestedDate","Date","dayOfWeek","getDay","filteredSlots","filter","slot","handleBookAppointment","bookingData","selectedService","find","s","serviceId","startTimeFormatted","startTime","includes","split","endTime","getTime","durationMinutes","endTimeString","toTimeString","slice","create","staffId","appointmentDate","notes","_error$response","_error$response$data","response","data","message","handleUpdateAppointment","appointmentId","updateData","update","_error$response2","_error$response2$data","handleCancelAppointment","delete","_error$response3","_error$response3$data","useEffect","onBookAppointment","onUpdateAppointment","onCancelAppointment","onLoadAvailableSlots","onRefreshAppointments","_c2","DoctorDashboardWrapper","_s3","patients","setPatients","shiftSchedule","setShiftSchedule","setStaffId","isProcessing","setIsProcessing","setError","email","allStaff","staffRecord","userId","_s$email","_user$email","toLowerCase","role","_s$firstName","_user$firstName","_s$lastName","_user$lastName","firstName","lastName","map","staffError","appointmentsError","patientsData","patientsError","loadShiftSchedule","currentStaffId","shiftData","getShiftSchedule","shiftError","defaultSchedule","isActive","_error$response4","_error$response4$data","handleApproveAppointment","updateStatus","_error$response5","_error$response5$data","handleRejectAppointment","reason","_error$response6","_error$response6$data","handleUpdateShiftSchedule","Error","updateShiftSchedule","_error$response7","_error$response7$data","handleViewPatientDetails","_error$response8","_error$response8$data","userWithStaffId","onApproveAppointment","onRejectAppointment","onUpdateShiftSchedule","onViewPatientDetails","_c3","NurseDashboardWrapper","_s4","servicesError","staffData","staff","_error$response9","_error$response9$data","handleBookWalkInAppointment","appointmentData","walkInAppointment","toISOString","status","_error$response0","_error$response0$data","handleApproveAppointmentForDoctor","doctorId","_error$response1","_error$response1$data","_error$response10","_error$response10$dat","onBookWalkInAppointment","onApproveAppointmentForDoctor","onLogout","localStorage","removeItem","window","location","href","_c4","AdminDashboardWrapper","_s5","users","setUsers","allUsers","push","usersData","getUsers","adminError","normalizedPatients","first_name","last_name","phone","_error$response11","_error$response11$dat","handleToggleUserStatus","updateUserStatus","_error$response12","_error$response12$dat","handleUpdateUserRole","newRole","updateUserRole","_error$response13","_error$response13$dat","handleCreateStaff","createStaff","_error$response14","_error$response14$dat","handleCreateService","serviceData","_error$response15","_error$response15$dat","handleUpdateService","_error$response16","_error$response16$dat","handleDeleteService","appointmentsUsingService","apt","service","deleteResult","_error$response17","_error$response17$dat","_error$response18","_error$response18$dat","errorMessage","onToggleUserStatus","onUpdateUserRole","onCreateStaff","onCreateService","onUpdateService","onDeleteService","_c5","AppRoutes","_s6","_user$roles","_user$roles2","_user$roles3","login","register","logout","clearError","handleLogin","password","err","handleRegister","userData","handleLogout","path","element","roles","onLogin","onRegister","props","onClick","_c6","App","_c7","$RefreshReg$"],"sources":["C:/Project/HopewellClinic/src/App.tsx"],"sourcesContent":["import React from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport { AuthProvider, useAuth } from './contexts/AuthContext';\nimport LandingPage from './components/LandingPage';\nimport AuthPage from './components/AuthPage';\nimport PatientDashboard from './components/PatientDashboard';\nimport DoctorDashboard from './components/DoctorDashboard';\nimport AdminDashboard from './components/AdminDashboard';\nimport NurseDashboard from './components/NurseDashboard';\nimport LoadingSpinner from './components/LoadingSpinner';\n\n// Import the existing API functions\nimport { appointmentsAPI, servicesAPI, patientsAPI, staffAPI, doctorAPI, adminAPI } from './services/api';\n\n// Protected Route component\nconst ProtectedRoute: React.FC<{ \n  children: React.ReactNode; \n  allowedRoles?: string[] \n}> = ({ children, allowedRoles = [] }) => {\n  const { isAuthenticated, isLoading, hasAnyRole } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <Navigate to=\"/auth\" replace />;\n  }\n\n  if (allowedRoles.length > 0 && !hasAnyRole(allowedRoles)) {\n    return <Navigate to=\"/unauthorized\" replace />;\n  }\n\n  return <>{children}</>;\n};\n\n// Dashboard wrapper component that handles data loading\nconst DashboardWrapper: React.FC<{ \n  children: (props: any) => React.ReactNode;\n  user: any;\n}> = ({ children, user }) => {\n  const [appointments, setAppointments] = React.useState([]);\n  const [services, setServices] = React.useState([]);\n  const [doctors, setDoctors] = React.useState([]);\n  const [availableSlots, setAvailableSlots] = React.useState([]);\n  const [patientId, setPatientId] = React.useState<string | null>(null);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isBooking, setIsBooking] = React.useState(false);\n  const [bookingError, setBookingError] = React.useState('');\n\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      \n      // Get the Patient ID from the ApplicationUser ID\n      console.log('🔍 Loading dashboard data for user:', user);\n      console.log('🔍 User ID:', user.id);\n      \n      try {\n        const patient = await patientsAPI.getByUserId(user.id);\n        console.log('✅ Found patient record:', patient);\n        setPatientId(patient.id);\n        \n        const [appointmentsData, servicesData, doctorsData] = await Promise.all([\n          appointmentsAPI.getByPatient(patient.id),\n          servicesAPI.getAll(),\n          staffAPI.getByRole('doctor')\n        ]);\n        setAppointments(appointmentsData);\n        setServices(servicesData);\n        setDoctors(doctorsData);\n      } catch (patientError) {\n        console.error('❌ Error finding patient record:', patientError);\n        console.log('⚠️ Patient not found for user ID:', user.id);\n        \n        // Set patientId to null to trigger the error in BookingWizard\n        setPatientId(null);\n        \n        // Still try to load other data\n        try {\n          const [servicesData, doctorsData] = await Promise.all([\n            servicesAPI.getAll(),\n            staffAPI.getByRole('doctor')\n          ]);\n          setServices(servicesData);\n          setDoctors(doctorsData);\n          setAppointments([]); // No appointments without patient\n        } catch (otherError) {\n          console.error('❌ Error loading other dashboard data:', otherError);\n        }\n      }\n    } catch (error) {\n      console.error('❌ Error loading dashboard data:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadAvailableSlots = async (date: string) => {\n    try {\n      console.log('Loading available slots for date:', date);\n      const slots = await appointmentsAPI.getAvailable(date);\n      console.log('Available slots received:', slots);\n      \n      // Calculate the day of the week for the requested date\n      const requestedDate = new Date(date);\n      const dayOfWeek = requestedDate.getDay(); // 0 = Sunday, 1 = Monday, etc.\n      \n      // Filter slots to only include the correct day of the week\n      const filteredSlots = slots.filter((slot: any) => slot.dayOfWeek === dayOfWeek);\n      console.log('Filtered slots for day', dayOfWeek, ':', filteredSlots);\n      \n      setAvailableSlots(filteredSlots);\n    } catch (error) {\n      console.error('Error loading available slots:', error);\n      setAvailableSlots([]);\n    }\n  };\n\n  const handleBookAppointment = async (bookingData: any) => {\n    try {\n      setIsBooking(true);\n      setBookingError('');\n      \n      // Calculate end time based on service duration\n      const selectedService = services.find((s: any) => s.id === bookingData.serviceId) as any;\n      \n      // Ensure startTime is in HH:mm:ss format\n      const startTimeFormatted = bookingData.startTime.includes(':') && bookingData.startTime.split(':').length === 2 \n        ? bookingData.startTime + ':00' \n        : bookingData.startTime;\n      \n      const startTime = new Date(`2000-01-01T${startTimeFormatted}`);\n      const endTime = new Date(startTime.getTime() + (selectedService?.durationMinutes || 30) * 60000);\n      \n      const endTimeString = endTime.toTimeString().slice(0, 8); // Format as HH:mm:ss\n      \n      await appointmentsAPI.create({\n        patientId: patientId,\n        serviceId: bookingData.serviceId,\n        staffId: bookingData.staffId,\n        appointmentDate: bookingData.appointmentDate,\n        startTime: startTimeFormatted,\n        endTime: endTimeString,\n        notes: bookingData.notes || ''\n      });\n\n      // Refresh appointments\n      await loadDashboardData();\n    } catch (error: any) {\n      console.error('Error booking appointment:', error);\n      setBookingError(error.response?.data?.error || error.message || 'Failed to book appointment');\n    } finally {\n      setIsBooking(false);\n    }\n  };\n\n  const handleUpdateAppointment = async (appointmentId: string, updateData: any) => {\n    try {\n      setIsBooking(true);\n      setBookingError('');\n      \n      // Calculate end time based on service duration\n      const selectedService = services.find((s: any) => s.id === updateData.serviceId) as any;\n      \n      // Ensure startTime is in HH:mm:ss format\n      const startTimeFormatted = updateData.startTime.includes(':') && updateData.startTime.split(':').length === 2 \n        ? updateData.startTime + ':00' \n        : updateData.startTime;\n      \n      const startTime = new Date(`2000-01-01T${startTimeFormatted}`);\n      const endTime = new Date(startTime.getTime() + (selectedService?.durationMinutes || 30) * 60000);\n      \n      const endTimeString = endTime.toTimeString().slice(0, 8); // Format as HH:mm:ss\n      \n      await appointmentsAPI.update(appointmentId, {\n        appointmentDate: updateData.appointmentDate,\n        startTime: startTimeFormatted,\n        endTime: endTimeString,\n        notes: updateData.notes || ''\n      });\n\n      // Refresh appointments\n      await loadDashboardData();\n    } catch (error: any) {\n      console.error('Error updating appointment:', error);\n      setBookingError(error.response?.data?.error || error.message || 'Failed to update appointment');\n    } finally {\n      setIsBooking(false);\n    }\n  };\n\n  const handleCancelAppointment = async (appointmentId: string) => {\n    try {\n      setIsBooking(true);\n      setBookingError('');\n      \n      await appointmentsAPI.delete(appointmentId);\n\n      // Refresh appointments\n      await loadDashboardData();\n    } catch (error: any) {\n      console.error('Error canceling appointment:', error);\n      setBookingError(error.response?.data?.error || error.message || 'Failed to cancel appointment');\n    } finally {\n      setIsBooking(false);\n    }\n  };\n\n  React.useEffect(() => {\n    loadDashboardData();\n  }, [user.id]);\n\n  // Call children as a function with props\n  return children({\n    user,\n    appointments,\n    services,\n    doctors,\n    availableSlots,\n    patientId,\n    isLoading,\n    isBooking,\n    bookingError,\n    onBookAppointment: handleBookAppointment,\n    onUpdateAppointment: handleUpdateAppointment,\n    onCancelAppointment: handleCancelAppointment,\n    onLoadAvailableSlots: loadAvailableSlots,\n    onRefreshAppointments: loadDashboardData\n  });\n};\n\n// Doctor Dashboard wrapper component that handles doctor-specific data loading\nconst DoctorDashboardWrapper: React.FC<{ \n  children: (props: any) => React.ReactNode;\n  user: any;\n}> = ({ children, user }) => {\n  const [appointments, setAppointments] = React.useState<any[]>([]);\n  const [patients, setPatients] = React.useState<any[]>([]);\n  const [shiftSchedule, setShiftSchedule] = React.useState<any[]>([]);\n  const [staffId, setStaffId] = React.useState<string>('');\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isProcessing, setIsProcessing] = React.useState(false);\n  const [error, setError] = React.useState('');\n\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      // Get the Staff record for this user\n      try {\n        console.log('🔍 Looking up staff record for user:', user);\n        console.log('User ID to match:', user.id);\n        console.log('User email to match:', user.email);\n        \n        const allStaff = await staffAPI.getAll();\n        console.log('📋 All staff records:', allStaff);\n        \n        // Try to find by userId first\n        let staffRecord = allStaff.find((s: any) => s.userId === user.id);\n        \n        // If not found, try by email\n        if (!staffRecord) {\n          console.log('⚠️ No match by userId, trying email match...');\n          staffRecord = allStaff.find((s: any) => s.email?.toLowerCase() === user.email?.toLowerCase());\n        }\n        \n        // If still not found, try by role='doctor' and similar name\n        if (!staffRecord && user.role === 'doctor') {\n          console.log('⚠️ No match by email, trying name match for doctors...');\n          staffRecord = allStaff.find((s: any) => \n            s.role === 'doctor' && \n            s.firstName?.toLowerCase() === user.firstName?.toLowerCase() &&\n            s.lastName?.toLowerCase() === user.lastName?.toLowerCase()\n          );\n        }\n        \n        if (staffRecord) {\n          console.log('✅ Found staff record:', staffRecord);\n          console.log('✅ Staff ID to use:', staffRecord.id);\n          console.log('✅ Staff ID type:', typeof staffRecord.id);\n          console.log('✅ Staff ID length:', staffRecord.id.length);\n          setStaffId(staffRecord.id);\n          \n          // Update the user object with the staff ID\n          user.staffId = staffRecord.id;\n          console.log('✅ Updated user.staffId to:', user.staffId);\n        } else {\n          console.error('❌ NO STAFF RECORD FOUND!');\n          console.log('User details:', { id: user.id, email: user.email, firstName: user.firstName, lastName: user.lastName });\n          console.log('Available staff records:', allStaff.map((s: any) => ({\n            id: s.id,\n            userId: s.userId,\n            email: s.email,\n            firstName: s.firstName,\n            lastName: s.lastName,\n            role: s.role\n          })));\n        }\n      } catch (staffError) {\n        console.error('❌ Error fetching staff record:', staffError);\n      }\n\n      // Get all appointments\n      try {\n        const appointmentsData = await appointmentsAPI.getAll();\n        setAppointments(appointmentsData);\n      } catch (appointmentsError) {\n        console.log('No appointments endpoint available yet');\n        setAppointments([]);\n      }\n\n      // Get all patients\n      try {\n        const patientsData = await patientsAPI.getAll();\n        setPatients(patientsData);\n      } catch (patientsError) {\n        console.log('No patients endpoint available yet');\n        setPatients([]);\n      }\n\n      // Load shift schedule for the doctor (after staffId is set) - non-blocking\n      const loadShiftSchedule = async () => {\n        try {\n          const currentStaffId = staffId || user.staffId;\n          if (currentStaffId) {\n            console.log('🔍 Loading shift schedule for staff ID:', currentStaffId);\n            const shiftData = await doctorAPI.getShiftSchedule(currentStaffId);\n            console.log('✅ Shift schedule loaded:', shiftData);\n            setShiftSchedule(shiftData);\n          } else {\n            console.log('⚠️ No staffId available, using empty shift schedule');\n            setShiftSchedule([]);\n          }\n        } catch (shiftError) {\n          console.log('⚠️ Could not load shift schedule, using defaults:', shiftError);\n          // If shift schedule loading fails, use default schedule\n          const defaultSchedule = [\n            { dayOfWeek: 'Monday', startTime: '09:00', endTime: '17:00', isActive: true },\n            { dayOfWeek: 'Tuesday', startTime: '09:00', endTime: '17:00', isActive: true },\n            { dayOfWeek: 'Wednesday', startTime: '09:00', endTime: '17:00', isActive: true },\n            { dayOfWeek: 'Thursday', startTime: '09:00', endTime: '17:00', isActive: true },\n            { dayOfWeek: 'Friday', startTime: '09:00', endTime: '17:00', isActive: true },\n            { dayOfWeek: 'Saturday', startTime: '09:00', endTime: '17:00', isActive: false },\n            { dayOfWeek: 'Sunday', startTime: '09:00', endTime: '17:00', isActive: false }\n          ];\n          setShiftSchedule(defaultSchedule);\n        }\n      };\n      \n      // Load shift schedule asynchronously without blocking the main flow\n      loadShiftSchedule();\n    } catch (error: any) {\n      console.error('Error loading doctor dashboard data:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to load dashboard data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleApproveAppointment = async (appointmentId: string) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      // For now, just update the appointment status using existing endpoint\n      await appointmentsAPI.updateStatus(appointmentId, 'confirmed');\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error approving appointment:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to approve appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleRejectAppointment = async (appointmentId: string, reason: string) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      // For now, just update the appointment status using existing endpoint\n      await appointmentsAPI.updateStatus(appointmentId, 'cancelled');\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error rejecting appointment:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to reject appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleUpdateShiftSchedule = async (shiftData: any[]) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      \n      const currentStaffId = staffId || user.staffId;\n      if (!currentStaffId) {\n        throw new Error('No staff ID available');\n      }\n      \n      console.log('Updating shift schedule for staff ID:', currentStaffId);\n      console.log('Shift data:', shiftData);\n      \n      // Call the API to update shift schedule\n      await doctorAPI.updateShiftSchedule(currentStaffId, shiftData);\n      \n      // Update local state\n      setShiftSchedule(shiftData);\n      \n      console.log('✅ Shift schedule updated successfully');\n    } catch (error: any) {\n      console.error('Error updating shift schedule:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to update shift schedule');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleViewPatientDetails = async (patientId: string) => {\n    try {\n      setError('');\n      // For now, just log the request (backend not implemented yet)\n      console.log('View patient details requested for:', patientId);\n    } catch (error: any) {\n      console.error('Error loading patient details:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to load patient details');\n    }\n  };\n\n  React.useEffect(() => {\n    loadDashboardData();\n  }, [user.id]);\n\n  // Call children as a function with props\n  const userWithStaffId = {\n    ...user,\n    staffId: staffId // Ensure staffId is included\n  };\n  \n  console.log('🔍 DoctorDashboardWrapper returning user:', userWithStaffId);\n  console.log('🔍 DoctorDashboardWrapper staffId:', staffId);\n  console.log('🔍 DoctorDashboardWrapper user.staffId:', user.staffId);\n  \n  return children({\n    user: userWithStaffId,\n    appointments,\n    patients,\n    shiftSchedule,\n    isLoading,\n    isProcessing,\n    error,\n    onApproveAppointment: handleApproveAppointment,\n    onRejectAppointment: handleRejectAppointment,\n    onUpdateShiftSchedule: handleUpdateShiftSchedule,\n    onViewPatientDetails: handleViewPatientDetails\n  });\n};\n\n// Nurse Dashboard wrapper component that handles nurse-specific data loading\nconst NurseDashboardWrapper: React.FC<{ \n  children: (props: any) => React.ReactNode;\n  user: any;\n}> = ({ children, user }) => {\n  const [appointments, setAppointments] = React.useState<any[]>([]);\n  const [services, setServices] = React.useState<any[]>([]);\n  const [doctors, setDoctors] = React.useState<any[]>([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isProcessing, setIsProcessing] = React.useState(false);\n  const [error, setError] = React.useState('');\n\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      // Load appointments\n      try {\n        const appointmentsData = await appointmentsAPI.getAll();\n        setAppointments(appointmentsData);\n      } catch (appointmentsError) {\n        console.log('No appointments endpoint available yet');\n        setAppointments([]);\n      }\n\n      // Load services\n      try {\n        const servicesData = await servicesAPI.getAll();\n        setServices(servicesData);\n      } catch (servicesError) {\n        console.log('No services endpoint available yet');\n        setServices([]);\n      }\n\n      // Load doctors (staff with doctor role)\n      try {\n        const staffData = await staffAPI.getAll();\n        const doctorsData = staffData.filter((staff: any) => staff.role === 'doctor');\n        setDoctors(doctorsData);\n      } catch (staffError) {\n        console.log('No staff endpoint available yet');\n        setDoctors([]);\n      }\n    } catch (error: any) {\n      console.error('Error loading nurse dashboard data:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to load dashboard data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  React.useEffect(() => {\n    loadDashboardData();\n  }, []);\n\n  const handleBookWalkInAppointment = async (appointmentData: any) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      \n      // Create a walk-in appointment with immediate scheduling\n      const walkInAppointment = {\n        ...appointmentData,\n        appointmentDate: new Date().toISOString().split('T')[0], // Today\n        startTime: new Date().toTimeString().slice(0, 5), // Current time\n        status: 'walkin',\n        notes: `Walk-in appointment: ${appointmentData.notes || 'No additional notes'}`\n      };\n\n      await appointmentsAPI.create(walkInAppointment);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error booking walk-in appointment:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to book walk-in appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleApproveAppointmentForDoctor = async (appointmentId: string, doctorId: string) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      \n      // Update appointment with doctor assignment and approval\n      await appointmentsAPI.update(appointmentId, {\n        staffId: doctorId,\n        status: 'confirmed'\n      });\n      \n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error approving appointment for doctor:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to approve appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleRejectAppointment = async (appointmentId: string, reason: string) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      \n      await appointmentsAPI.update(appointmentId, {\n        status: 'cancelled',\n        notes: `Rejected by nurse: ${reason}`\n      });\n      \n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error rejecting appointment:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to reject appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return children({\n    user,\n    appointments,\n    services,\n    doctors,\n    isLoading,\n    isProcessing,\n    error,\n    onBookWalkInAppointment: handleBookWalkInAppointment,\n    onApproveAppointmentForDoctor: handleApproveAppointmentForDoctor,\n    onRejectAppointment: handleRejectAppointment,\n    onLogout: () => {\n      localStorage.removeItem('token');\n      window.location.href = '/auth';\n    }\n  });\n};\n\n// Admin Dashboard wrapper component that handles admin-specific data loading\nconst AdminDashboardWrapper: React.FC<{ \n  children: (props: any) => React.ReactNode;\n  user: any;\n}> = ({ children, user }) => {\n  const [users, setUsers] = React.useState<any[]>([]);\n  const [appointments, setAppointments] = React.useState<any[]>([]);\n  const [services, setServices] = React.useState<any[]>([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isProcessing, setIsProcessing] = React.useState(false);\n  const [error, setError] = React.useState('');\n\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      // Combine staff and patients into a single users array\n      const allUsers: any[] = [];\n\n      // Get all staff members\n      try {\n        const staffData = await staffAPI.getAll();\n        console.log('📊 Staff data received:', staffData);\n        allUsers.push(...staffData);\n      } catch (staffError) {\n        console.log('No staff endpoint available, falling back to admin users');\n        try {\n          const usersData = await adminAPI.getUsers();\n          console.log('📊 Admin users data received:', usersData);\n          allUsers.push(...usersData);\n        } catch (adminError) {\n          console.error('Failed to load staff/users:', adminError);\n        }\n      }\n\n      // Get all patients\n      try {\n        const patientsData = await patientsAPI.getAll();\n        console.log('👥 Patients data received:', patientsData);\n        \n        // Normalize patient data to match staff structure\n        const normalizedPatients = patientsData.map((patient: any) => ({\n          ...patient,\n          role: 'patient',\n          isActive: true,\n          // Ensure consistent field names\n          firstName: patient.firstName || patient.first_name,\n          lastName: patient.lastName || patient.last_name,\n          email: patient.email,\n          phone: patient.phone,\n          id: patient.id,\n          userId: patient.userId || patient.id\n        }));\n        \n        console.log('👥 Normalized patients:', normalizedPatients);\n        allUsers.push(...normalizedPatients);\n      } catch (patientsError) {\n        console.error('❌ Failed to load patients:', patientsError);\n        console.log('No patients endpoint available or no patients in database');\n      }\n\n      console.log('✅ Combined users data:', allUsers);\n      setUsers(allUsers);\n\n      // Get all appointments\n      try {\n        const appointmentsData = await appointmentsAPI.getAll();\n        setAppointments(appointmentsData);\n      } catch (appointmentsError) {\n        console.log('No appointments endpoint available yet');\n        setAppointments([]);\n      }\n\n      // Load services\n      try {\n        const servicesData = await servicesAPI.getAll();\n        setServices(servicesData);\n      } catch (servicesError) {\n        console.log('No services endpoint available yet');\n        setServices([]);\n      }\n    } catch (error: any) {\n      console.error('Error loading admin dashboard data:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to load dashboard data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleToggleUserStatus = async (userId: string, isActive: boolean) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await adminAPI.updateUserStatus(userId, isActive);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error updating user status:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to update user status');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleUpdateUserRole = async (userId: string, newRole: string) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await adminAPI.updateUserRole(userId, newRole);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error updating user role:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to update user role');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleCreateStaff = async (staffData: any) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await adminAPI.createStaff(staffData);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error creating staff:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to create staff member');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleCreateService = async (serviceData: any) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await servicesAPI.create(serviceData);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error creating service:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to create service');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleUpdateService = async (serviceId: string, serviceData: any) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await servicesAPI.update(serviceId, serviceData);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error updating service:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to update service');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleDeleteService = async (serviceId: string) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      \n      // Check if service is being used by any appointments\n      const appointmentsUsingService = appointments.filter(apt => apt.service.id === serviceId);\n      if (appointmentsUsingService.length > 0) {\n        setError(`Cannot delete service. It is currently being used by ${appointmentsUsingService.length} appointment(s). Please cancel or reschedule these appointments first.`);\n        return;\n      }\n      \n      console.log('Attempting to delete service:', serviceId);\n      const deleteResult = await servicesAPI.delete(serviceId);\n      console.log('Delete result:', deleteResult);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error deleting service:', error);\n      \n      // Provide more specific error messages\n      let errorMessage = 'Failed to delete service';\n      if (error.response?.data?.error) {\n        errorMessage = error.response.data.error;\n      } else if (error.response?.data?.message) {\n        errorMessage = error.response.data.message;\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      \n      // Check for common database constraint errors\n      if (errorMessage.includes('foreign key') || errorMessage.includes('constraint') || errorMessage.includes('reference')) {\n        errorMessage = 'Cannot delete service. It is currently being used by existing appointments. Please cancel or reschedule these appointments first.';\n      }\n      \n      setError(errorMessage);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  React.useEffect(() => {\n    loadDashboardData();\n  }, [user.id]);\n\n  // Call children as a function with props\n  return children({\n    user,\n    users,\n    appointments,\n    services,\n    isLoading,\n    isProcessing,\n    error,\n    onToggleUserStatus: handleToggleUserStatus,\n    onUpdateUserRole: handleUpdateUserRole,\n    onCreateStaff: handleCreateStaff,\n    onCreateService: handleCreateService,\n    onUpdateService: handleUpdateService,\n    onDeleteService: handleDeleteService,\n    onLogout: () => {\n      localStorage.removeItem('token');\n      window.location.href = '/auth';\n    }\n  });\n};\n\n// Main App Routes component\nconst AppRoutes: React.FC = () => {\n  const { isAuthenticated, user, login, register, logout, isLoading, error, clearError } = useAuth();\n\n  const handleLogin = async (email: string, password: string) => {\n    try {\n      await login({ email, password });\n    } catch (err) {\n      // Error is handled by AuthContext\n    }\n  };\n\n  const handleRegister = async (userData: any) => {\n    try {\n      await register(userData);\n    } catch (err) {\n      // Error is handled by AuthContext\n    }\n  };\n\n  const handleLogout = () => {\n    logout();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  return (\n    <Routes>\n      {/* Public Routes */}\n      <Route path=\"/\" element={<LandingPage />} />\n      <Route \n        path=\"/auth\" \n        element={\n          isAuthenticated ? (\n            <Navigate to={\n              user?.roles?.includes('admin') ? '/admin-dashboard' :\n              user?.roles?.includes('doctor') ? '/doctor-dashboard' :\n              user?.roles?.includes('nurse') ? '/nurse-dashboard' :\n              '/patient-dashboard'\n            } replace />\n          ) : (\n            <AuthPage\n              onLogin={handleLogin}\n              onRegister={handleRegister}\n              isLoading={isLoading}\n              error={error}\n              clearError={clearError}\n            />\n          )\n        } \n      />\n\n      {/* Protected Routes */}\n      <Route\n        path=\"/patient-dashboard\"\n        element={\n          <ProtectedRoute allowedRoles={['patient']}>\n            <DashboardWrapper user={user}>\n              {(props) => <PatientDashboard {...props} onLogout={handleLogout} />}\n            </DashboardWrapper>\n          </ProtectedRoute>\n        }\n      />\n\n      <Route\n        path=\"/doctor-dashboard\"\n        element={\n          <ProtectedRoute allowedRoles={['doctor']}>\n            <DoctorDashboardWrapper user={user}>\n              {(props) => <DoctorDashboard {...props} onLogout={handleLogout} />}\n            </DoctorDashboardWrapper>\n          </ProtectedRoute>\n        }\n      />\n\n      <Route\n        path=\"/admin-dashboard\"\n        element={\n          <ProtectedRoute allowedRoles={['admin']}>\n            <AdminDashboardWrapper user={user}>\n              {(props) => <AdminDashboard {...props} onLogout={handleLogout} />}\n            </AdminDashboardWrapper>\n          </ProtectedRoute>\n        }\n      />\n\n      <Route\n        path=\"/nurse-dashboard\"\n        element={\n          <ProtectedRoute allowedRoles={['nurse']}>\n            <NurseDashboardWrapper user={user}>\n              {(props) => <NurseDashboard {...props} onLogout={handleLogout} />}\n            </NurseDashboardWrapper>\n          </ProtectedRoute>\n        }\n      />\n\n      {/* Fallback Routes */}\n      <Route path=\"/unauthorized\" element={\n        <div className=\"min-h-screen flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-foreground mb-4\">Unauthorized</h1>\n            <p className=\"text-muted-foreground mb-4\">You don't have permission to access this page.</p>\n            <button \n              onClick={handleLogout}\n              className=\"px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90\"\n            >\n              Sign Out\n            </button>\n          </div>\n        </div>\n      } />\n      \n      <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\n    </Routes>\n  );\n};\n\n// Main App component\nconst App: React.FC = () => {\n  return (\n    <AuthProvider>\n      <Router>\n        <div className=\"App\">\n          <AppRoutes />\n        </div>\n      </Router>\n    </AuthProvider>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}