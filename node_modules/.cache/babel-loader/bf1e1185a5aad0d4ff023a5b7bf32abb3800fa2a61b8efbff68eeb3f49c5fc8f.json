{"ast":null,"code":"var _jsxFileName = \"C:\\\\Project\\\\HopewellClinic\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$();\nimport React from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport { AuthProvider, useAuth } from './contexts/AuthContext';\nimport LandingPage from './components/LandingPage';\nimport AuthPage from './components/AuthPage';\nimport PatientDashboard from './components/PatientDashboard';\nimport DoctorDashboard from './components/DoctorDashboard';\nimport AdminDashboard from './components/AdminDashboard';\nimport NurseDashboard from './components/NurseDashboard';\nimport LoadingSpinner from './components/LoadingSpinner';\n\n// Import the existing API functions\nimport { appointmentsAPI, servicesAPI, patientsAPI, staffAPI, adminAPI } from './services/api';\n\n// Protected Route component\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children,\n  allowedRoles = []\n}) => {\n  _s();\n  const {\n    isAuthenticated,\n    isLoading,\n    hasAnyRole\n  } = useAuth();\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen flex items-center justify-center\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this);\n  }\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/auth\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  }\n  if (allowedRoles.length > 0 && !hasAnyRole(allowedRoles)) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/unauthorized\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n\n// Dashboard wrapper component that handles data loading\n_s(ProtectedRoute, \"QRsE/tUD7olIanpaPmCviy1w10g=\", false, function () {\n  return [useAuth];\n});\n_c = ProtectedRoute;\nconst DashboardWrapper = ({\n  children,\n  user\n}) => {\n  _s2();\n  const [appointments, setAppointments] = React.useState([]);\n  const [services, setServices] = React.useState([]);\n  const [doctors, setDoctors] = React.useState([]);\n  const [availableSlots, setAvailableSlots] = React.useState([]);\n  const [patientId, setPatientId] = React.useState(null);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isBooking, setIsBooking] = React.useState(false);\n  const [bookingError, setBookingError] = React.useState('');\n  const [error, setError] = React.useState('');\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n\n      // Get the Patient ID from the ApplicationUser ID\n      let currentPatientId = null;\n      try {\n        const patient = await patientsAPI.getByUserId(user.id);\n        currentPatientId = patient.id;\n        setPatientId(patient.id);\n      } catch (error) {\n        console.error('❌ Failed to get patient data:', error);\n        throw new Error('Patient data not available');\n      }\n\n      // Try to load data, but don't fail if APIs are not available\n      try {\n        const [appointmentsData, servicesData, doctorsData] = await Promise.all([appointmentsAPI.getByPatient(currentPatientId), servicesAPI.getAll(), staffAPI.getByRole('doctor')]);\n        setAppointments(appointmentsData);\n        setServices(servicesData);\n        setDoctors(doctorsData);\n      } catch (error) {\n        console.error('❌ Failed to load dashboard data:', error);\n        throw error;\n      }\n    } catch (error) {\n      console.error('Error loading dashboard data:', error);\n      // Show error to user instead of empty data\n      setError('Failed to load dashboard data. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const loadAvailableSlots = async date => {\n    try {\n      console.log('Loading available slots for date:', date);\n      const slots = await appointmentsAPI.getAvailable(date);\n      console.log('Available slots received:', slots);\n\n      // Calculate the day of the week for the requested date\n      const requestedDate = new Date(date);\n      const dayOfWeek = requestedDate.getDay(); // 0 = Sunday, 1 = Monday, etc.\n\n      // Filter slots to only include the correct day of the week\n      const filteredSlots = slots.filter(slot => slot.dayOfWeek === dayOfWeek);\n      console.log('Filtered slots for day', dayOfWeek, ':', filteredSlots);\n      setAvailableSlots(filteredSlots);\n    } catch (error) {\n      console.error('Error loading available slots:', error);\n      setAvailableSlots([]);\n    }\n  };\n  const handleBookAppointment = async bookingData => {\n    try {\n      setIsBooking(true);\n      setBookingError('');\n\n      // Calculate end time based on service duration\n      const selectedService = services.find(s => s.id === bookingData.serviceId);\n\n      // Ensure startTime is in HH:mm:ss format\n      const startTimeFormatted = bookingData.startTime.includes(':') && bookingData.startTime.split(':').length === 2 ? bookingData.startTime + ':00' : bookingData.startTime;\n      const startTime = new Date(`2000-01-01T${startTimeFormatted}`);\n      const endTime = new Date(startTime.getTime() + ((selectedService === null || selectedService === void 0 ? void 0 : selectedService.durationMinutes) || 30) * 60000);\n      const endTimeString = endTime.toTimeString().slice(0, 8); // Format as HH:mm:ss\n\n      await appointmentsAPI.create({\n        patientId: patientId,\n        serviceId: bookingData.serviceId,\n        staffId: bookingData.staffId,\n        appointmentDate: bookingData.appointmentDate,\n        startTime: startTimeFormatted,\n        endTime: endTimeString,\n        notes: bookingData.notes || ''\n      });\n\n      // Refresh appointments\n      await loadDashboardData();\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error booking appointment:', error);\n      setBookingError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.message || 'Failed to book appointment');\n    } finally {\n      setIsBooking(false);\n    }\n  };\n  const handleUpdateAppointment = async (appointmentId, updateData) => {\n    try {\n      setIsBooking(true);\n      setBookingError('');\n\n      // Calculate end time based on service duration\n      const selectedService = services.find(s => s.id === updateData.serviceId);\n\n      // Ensure startTime is in HH:mm:ss format\n      const startTimeFormatted = updateData.startTime.includes(':') && updateData.startTime.split(':').length === 2 ? updateData.startTime + ':00' : updateData.startTime;\n      const startTime = new Date(`2000-01-01T${startTimeFormatted}`);\n      const endTime = new Date(startTime.getTime() + ((selectedService === null || selectedService === void 0 ? void 0 : selectedService.durationMinutes) || 30) * 60000);\n      const endTimeString = endTime.toTimeString().slice(0, 8); // Format as HH:mm:ss\n\n      await appointmentsAPI.update(appointmentId, {\n        appointmentDate: updateData.appointmentDate,\n        startTime: startTimeFormatted,\n        endTime: endTimeString,\n        notes: updateData.notes || ''\n      });\n\n      // Refresh appointments\n      await loadDashboardData();\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Error updating appointment:', error);\n      setBookingError(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || error.message || 'Failed to update appointment');\n    } finally {\n      setIsBooking(false);\n    }\n  };\n  const handleCancelAppointment = async appointmentId => {\n    try {\n      setIsBooking(true);\n      setBookingError('');\n      await appointmentsAPI.delete(appointmentId);\n\n      // Refresh appointments\n      await loadDashboardData();\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('Error canceling appointment:', error);\n      setBookingError(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || error.message || 'Failed to cancel appointment');\n    } finally {\n      setIsBooking(false);\n    }\n  };\n  React.useEffect(() => {\n    // Add a small delay to ensure user is fully logged in before making API calls\n    const timer = setTimeout(() => {\n      loadDashboardData();\n    }, 100);\n    return () => clearTimeout(timer);\n  }, [user.id]);\n\n  // Call children as a function with props\n  return children({\n    user,\n    appointments,\n    services,\n    doctors,\n    availableSlots,\n    isLoading,\n    isBooking,\n    bookingError,\n    error,\n    onBookAppointment: handleBookAppointment,\n    onUpdateAppointment: handleUpdateAppointment,\n    onCancelAppointment: handleCancelAppointment,\n    onLoadAvailableSlots: loadAvailableSlots\n  });\n};\n\n// Doctor Dashboard wrapper component that handles doctor-specific data loading\n_s2(DashboardWrapper, \"YUv9jqK8X9WzIIM4g7ffij46cfA=\");\n_c2 = DashboardWrapper;\nconst DoctorDashboardWrapper = ({\n  children,\n  user\n}) => {\n  _s3();\n  const [appointments, setAppointments] = React.useState([]);\n  const [patients, setPatients] = React.useState([]);\n  const [shiftSchedule, setShiftSchedule] = React.useState([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isProcessing, setIsProcessing] = React.useState(false);\n  const [error, setError] = React.useState('');\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      // For now, use existing endpoints that work\n      // Get all appointments (we'll filter by doctor later when backend supports it)\n      try {\n        const appointmentsData = await appointmentsAPI.getAll();\n        // Filter appointments for this doctor (when staffId is available)\n        setAppointments(appointmentsData);\n      } catch (appointmentsError) {\n        console.log('No appointments endpoint available yet');\n        setAppointments([]);\n      }\n\n      // Get all patients (we'll filter by doctor later when backend supports it)\n      try {\n        const patientsData = await patientsAPI.getAll();\n        setPatients(patientsData);\n      } catch (patientsError) {\n        console.log('No patients endpoint available yet');\n        setPatients([]);\n      }\n\n      // Initialize empty shift schedule (backend not implemented yet)\n      setShiftSchedule([]);\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      console.error('Error loading doctor dashboard data:', error);\n      setError(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || error.message || 'Failed to load dashboard data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleApproveAppointment = async appointmentId => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      // For now, just update the appointment status using existing endpoint\n      await appointmentsAPI.updateStatus(appointmentId, 'confirmed');\n      await loadDashboardData(); // Refresh data\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      console.error('Error approving appointment:', error);\n      setError(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || error.message || 'Failed to approve appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleRejectAppointment = async (appointmentId, reason) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      // For now, just update the appointment status using existing endpoint\n      await appointmentsAPI.updateStatus(appointmentId, 'cancelled');\n      await loadDashboardData(); // Refresh data\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      console.error('Error rejecting appointment:', error);\n      setError(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.error) || error.message || 'Failed to reject appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleUpdateShiftSchedule = async shiftData => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      // For now, just store locally (backend not implemented yet)\n      console.log('Shift schedule update requested:', shiftData);\n      setShiftSchedule(shiftData);\n      // Simulate success\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      console.error('Error updating shift schedule:', error);\n      setError(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.error) || error.message || 'Failed to update shift schedule');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleViewPatientDetails = async patientId => {\n    try {\n      setError('');\n      // For now, just log the request (backend not implemented yet)\n      console.log('View patient details requested for:', patientId);\n    } catch (error) {\n      var _error$response8, _error$response8$data;\n      console.error('Error loading patient details:', error);\n      setError(((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.error) || error.message || 'Failed to load patient details');\n    }\n  };\n  React.useEffect(() => {\n    // Add a small delay to ensure user is fully logged in before making API calls\n    const timer = setTimeout(() => {\n      loadDashboardData();\n    }, 100);\n    return () => clearTimeout(timer);\n  }, [user.id]);\n\n  // Call children as a function with props\n  return children({\n    user,\n    appointments,\n    patients,\n    shiftSchedule,\n    isLoading,\n    isProcessing,\n    error,\n    onApproveAppointment: handleApproveAppointment,\n    onRejectAppointment: handleRejectAppointment,\n    onUpdateShiftSchedule: handleUpdateShiftSchedule,\n    onViewPatientDetails: handleViewPatientDetails\n  });\n};\n\n// Nurse Dashboard wrapper component that handles nurse-specific data loading\n_s3(DoctorDashboardWrapper, \"ya1EbW4cNEBtBdbguKY5LBWokLw=\");\n_c3 = DoctorDashboardWrapper;\nconst NurseDashboardWrapper = ({\n  children,\n  user\n}) => {\n  _s4();\n  const [appointments, setAppointments] = React.useState([]);\n  const [services, setServices] = React.useState([]);\n  const [doctors, setDoctors] = React.useState([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isProcessing, setIsProcessing] = React.useState(false);\n  const [error, setError] = React.useState('');\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      // Load appointments\n      try {\n        const appointmentsData = await appointmentsAPI.getAll();\n        setAppointments(appointmentsData);\n      } catch (appointmentsError) {\n        console.log('No appointments endpoint available yet');\n        setAppointments([]);\n      }\n\n      // Load services\n      try {\n        const servicesData = await servicesAPI.getAll();\n        setServices(servicesData);\n      } catch (servicesError) {\n        console.log('No services endpoint available yet');\n        setServices([]);\n      }\n\n      // Load doctors (staff with doctor role)\n      try {\n        const staffData = await staffAPI.getAll();\n        const doctorsData = staffData.filter(staff => staff.role === 'doctor');\n        setDoctors(doctorsData);\n      } catch (staffError) {\n        console.log('No staff endpoint available yet');\n        setDoctors([]);\n      }\n    } catch (error) {\n      var _error$response9, _error$response9$data;\n      console.error('Error loading nurse dashboard data:', error);\n      setError(((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.error) || error.message || 'Failed to load dashboard data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  React.useEffect(() => {\n    loadDashboardData();\n  }, []);\n  const handleBookWalkInAppointment = async appointmentData => {\n    try {\n      setIsProcessing(true);\n      setError('');\n\n      // Create a walk-in appointment with immediate scheduling\n      const walkInAppointment = {\n        ...appointmentData,\n        appointmentDate: new Date().toISOString().split('T')[0],\n        // Today\n        startTime: new Date().toTimeString().slice(0, 5),\n        // Current time\n        status: 'walkin',\n        notes: `Walk-in appointment: ${appointmentData.notes || 'No additional notes'}`\n      };\n      await appointmentsAPI.create(walkInAppointment);\n      await loadDashboardData(); // Refresh data\n    } catch (error) {\n      var _error$response0, _error$response0$data;\n      console.error('Error booking walk-in appointment:', error);\n      setError(((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : (_error$response0$data = _error$response0.data) === null || _error$response0$data === void 0 ? void 0 : _error$response0$data.error) || error.message || 'Failed to book walk-in appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleApproveAppointmentForDoctor = async (appointmentId, doctorId) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n\n      // Update appointment with doctor assignment and approval\n      await appointmentsAPI.update(appointmentId, {\n        staffId: doctorId,\n        status: 'confirmed'\n      });\n      await loadDashboardData(); // Refresh data\n    } catch (error) {\n      var _error$response1, _error$response1$data;\n      console.error('Error approving appointment for doctor:', error);\n      setError(((_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : (_error$response1$data = _error$response1.data) === null || _error$response1$data === void 0 ? void 0 : _error$response1$data.error) || error.message || 'Failed to approve appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleRejectAppointment = async (appointmentId, reason) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await appointmentsAPI.update(appointmentId, {\n        status: 'cancelled',\n        notes: `Rejected by nurse: ${reason}`\n      });\n      await loadDashboardData(); // Refresh data\n    } catch (error) {\n      var _error$response10, _error$response10$dat;\n      console.error('Error rejecting appointment:', error);\n      setError(((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : (_error$response10$dat = _error$response10.data) === null || _error$response10$dat === void 0 ? void 0 : _error$response10$dat.error) || error.message || 'Failed to reject appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  return children({\n    user,\n    appointments,\n    services,\n    doctors,\n    isLoading,\n    isProcessing,\n    error,\n    onBookWalkInAppointment: handleBookWalkInAppointment,\n    onApproveAppointmentForDoctor: handleApproveAppointmentForDoctor,\n    onRejectAppointment: handleRejectAppointment,\n    onLogout: () => {\n      localStorage.removeItem('token');\n      window.location.href = '/auth';\n    }\n  });\n};\n\n// Admin Dashboard wrapper component that handles admin-specific data loading\n_s4(NurseDashboardWrapper, \"PQwn7KKvfJlFxUDPBk489nEz4ZM=\");\n_c4 = NurseDashboardWrapper;\nconst AdminDashboardWrapper = ({\n  children,\n  user\n}) => {\n  _s5();\n  const [users, setUsers] = React.useState([]);\n  const [appointments, setAppointments] = React.useState([]);\n  const [services, setServices] = React.useState([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isProcessing, setIsProcessing] = React.useState(false);\n  const [error, setError] = React.useState('');\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      // Get all staff members\n      try {\n        const staffData = await staffAPI.getAll();\n        console.log('Staff data received:', staffData);\n        setUsers(staffData);\n      } catch (staffError) {\n        console.log('No staff endpoint available, falling back to users');\n        const usersData = await adminAPI.getUsers();\n        console.log('Users data received:', usersData);\n        setUsers(usersData);\n      }\n\n      // Get all appointments (we'll need to implement this endpoint)\n      try {\n        // For now, we'll use the existing appointments API\n        const appointmentsData = await appointmentsAPI.getAll();\n        setAppointments(appointmentsData);\n      } catch (appointmentsError) {\n        console.log('No appointments endpoint available yet');\n        setAppointments([]);\n      }\n\n      // Load services\n      try {\n        const servicesData = await servicesAPI.getAll();\n        setServices(servicesData);\n      } catch (servicesError) {\n        console.log('No services endpoint available yet');\n        setServices([]);\n      }\n    } catch (error) {\n      var _error$response11, _error$response11$dat;\n      console.error('Error loading admin dashboard data:', error);\n      setError(((_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : (_error$response11$dat = _error$response11.data) === null || _error$response11$dat === void 0 ? void 0 : _error$response11$dat.error) || error.message || 'Failed to load dashboard data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleToggleUserStatus = async (userId, isActive) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await adminAPI.updateUserStatus(userId, isActive);\n      await loadDashboardData(); // Refresh data\n    } catch (error) {\n      var _error$response12, _error$response12$dat;\n      console.error('Error updating user status:', error);\n      setError(((_error$response12 = error.response) === null || _error$response12 === void 0 ? void 0 : (_error$response12$dat = _error$response12.data) === null || _error$response12$dat === void 0 ? void 0 : _error$response12$dat.error) || error.message || 'Failed to update user status');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleUpdateUserRole = async (userId, newRole) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await adminAPI.updateUserRole(userId, newRole);\n      await loadDashboardData(); // Refresh data\n    } catch (error) {\n      var _error$response13, _error$response13$dat;\n      console.error('Error updating user role:', error);\n      setError(((_error$response13 = error.response) === null || _error$response13 === void 0 ? void 0 : (_error$response13$dat = _error$response13.data) === null || _error$response13$dat === void 0 ? void 0 : _error$response13$dat.error) || error.message || 'Failed to update user role');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleCreateStaff = async staffData => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await adminAPI.createStaff(staffData);\n      await loadDashboardData(); // Refresh data\n    } catch (error) {\n      var _error$response14, _error$response14$dat;\n      console.error('Error creating staff:', error);\n      setError(((_error$response14 = error.response) === null || _error$response14 === void 0 ? void 0 : (_error$response14$dat = _error$response14.data) === null || _error$response14$dat === void 0 ? void 0 : _error$response14$dat.error) || error.message || 'Failed to create staff member');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleCreateService = async serviceData => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await servicesAPI.create(serviceData);\n      await loadDashboardData(); // Refresh data\n    } catch (error) {\n      var _error$response15, _error$response15$dat;\n      console.error('Error creating service:', error);\n      setError(((_error$response15 = error.response) === null || _error$response15 === void 0 ? void 0 : (_error$response15$dat = _error$response15.data) === null || _error$response15$dat === void 0 ? void 0 : _error$response15$dat.error) || error.message || 'Failed to create service');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleUpdateService = async (serviceId, serviceData) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await servicesAPI.update(serviceId, serviceData);\n      await loadDashboardData(); // Refresh data\n    } catch (error) {\n      var _error$response16, _error$response16$dat;\n      console.error('Error updating service:', error);\n      setError(((_error$response16 = error.response) === null || _error$response16 === void 0 ? void 0 : (_error$response16$dat = _error$response16.data) === null || _error$response16$dat === void 0 ? void 0 : _error$response16$dat.error) || error.message || 'Failed to update service');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleDeleteService = async serviceId => {\n    try {\n      setIsProcessing(true);\n      setError('');\n\n      // Check if service is being used by any appointments\n      const appointmentsUsingService = appointments.filter(apt => apt.service.id === serviceId);\n      if (appointmentsUsingService.length > 0) {\n        setError(`Cannot delete service. It is currently being used by ${appointmentsUsingService.length} appointment(s). Please cancel or reschedule these appointments first.`);\n        return;\n      }\n      console.log('Attempting to delete service:', serviceId);\n      const deleteResult = await servicesAPI.delete(serviceId);\n      console.log('Delete result:', deleteResult);\n      await loadDashboardData(); // Refresh data\n    } catch (error) {\n      var _error$response17, _error$response17$dat, _error$response18, _error$response18$dat;\n      console.error('Error deleting service:', error);\n\n      // Provide more specific error messages\n      let errorMessage = 'Failed to delete service';\n      if ((_error$response17 = error.response) !== null && _error$response17 !== void 0 && (_error$response17$dat = _error$response17.data) !== null && _error$response17$dat !== void 0 && _error$response17$dat.error) {\n        errorMessage = error.response.data.error;\n      } else if ((_error$response18 = error.response) !== null && _error$response18 !== void 0 && (_error$response18$dat = _error$response18.data) !== null && _error$response18$dat !== void 0 && _error$response18$dat.message) {\n        errorMessage = error.response.data.message;\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n\n      // Check for common database constraint errors\n      if (errorMessage.includes('foreign key') || errorMessage.includes('constraint') || errorMessage.includes('reference')) {\n        errorMessage = 'Cannot delete service. It is currently being used by existing appointments. Please cancel or reschedule these appointments first.';\n      }\n      setError(errorMessage);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  React.useEffect(() => {\n    loadDashboardData();\n  }, [user.id]);\n\n  // Call children as a function with props\n  return children({\n    user,\n    users,\n    appointments,\n    services,\n    isLoading,\n    isProcessing,\n    error,\n    onToggleUserStatus: handleToggleUserStatus,\n    onUpdateUserRole: handleUpdateUserRole,\n    onCreateStaff: handleCreateStaff,\n    onCreateService: handleCreateService,\n    onUpdateService: handleUpdateService,\n    onDeleteService: handleDeleteService,\n    onLogout: () => {\n      localStorage.removeItem('token');\n      window.location.href = '/auth';\n    }\n  });\n};\n\n// Main App Routes component\n_s5(AdminDashboardWrapper, \"a9OqehUcjTLs+bFLB7KNIpYPyzA=\");\n_c5 = AdminDashboardWrapper;\nconst AppRoutes = () => {\n  _s6();\n  var _user$roles, _user$roles2, _user$roles3;\n  const {\n    isAuthenticated,\n    user,\n    login,\n    register,\n    logout,\n    isLoading,\n    error,\n    clearError\n  } = useAuth();\n  const handleLogin = async (email, password) => {\n    try {\n      await login({\n        email,\n        password\n      });\n    } catch (err) {\n      // Error is handled by AuthContext\n    }\n  };\n  const handleRegister = async userData => {\n    try {\n      await register(userData);\n    } catch (err) {\n      // Error is handled by AuthContext\n    }\n  };\n  const handleLogout = () => {\n    logout();\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen flex items-center justify-center\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 717,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 716,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      element: /*#__PURE__*/_jsxDEV(LandingPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 725,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 725,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/auth\",\n      element: isAuthenticated ? /*#__PURE__*/_jsxDEV(Navigate, {\n        to: user !== null && user !== void 0 && (_user$roles = user.roles) !== null && _user$roles !== void 0 && _user$roles.includes('admin') ? '/admin-dashboard' : user !== null && user !== void 0 && (_user$roles2 = user.roles) !== null && _user$roles2 !== void 0 && _user$roles2.includes('doctor') ? '/doctor-dashboard' : user !== null && user !== void 0 && (_user$roles3 = user.roles) !== null && _user$roles3 !== void 0 && _user$roles3.includes('nurse') ? '/nurse-dashboard' : '/patient-dashboard',\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 730,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(AuthPage, {\n        onLogin: handleLogin,\n        onRegister: handleRegister,\n        isLoading: isLoading,\n        error: error,\n        clearError: clearError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 737,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 726,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/patient-dashboard\",\n      element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n        allowedRoles: ['patient'],\n        children: /*#__PURE__*/_jsxDEV(DashboardWrapper, {\n          user: user,\n          children: props => /*#__PURE__*/_jsxDEV(PatientDashboard, {\n            ...props,\n            onLogout: handleLogout\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 754,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 753,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 752,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 749,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/doctor-dashboard\",\n      element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n        allowedRoles: ['doctor'],\n        children: /*#__PURE__*/_jsxDEV(DoctorDashboardWrapper, {\n          user: user,\n          children: props => /*#__PURE__*/_jsxDEV(DoctorDashboard, {\n            ...props,\n            onLogout: handleLogout\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 765,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 764,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 763,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 760,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/admin-dashboard\",\n      element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n        allowedRoles: ['admin'],\n        children: /*#__PURE__*/_jsxDEV(AdminDashboardWrapper, {\n          user: user,\n          children: props => /*#__PURE__*/_jsxDEV(AdminDashboard, {\n            ...props,\n            onLogout: handleLogout\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 776,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 775,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 774,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 771,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/nurse-dashboard\",\n      element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n        allowedRoles: ['nurse'],\n        children: /*#__PURE__*/_jsxDEV(NurseDashboardWrapper, {\n          user: user,\n          children: props => /*#__PURE__*/_jsxDEV(NurseDashboard, {\n            ...props,\n            onLogout: handleLogout\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 787,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 786,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 785,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 782,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/unauthorized\",\n      element: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"min-h-screen flex items-center justify-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-2xl font-bold text-foreground mb-4\",\n            children: \"Unauthorized\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 797,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-muted-foreground mb-4\",\n            children: \"You don't have permission to access this page.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 798,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleLogout,\n            className: \"px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90\",\n            children: \"Sign Out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 799,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 796,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 795,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 794,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"*\",\n      element: /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/\",\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 809,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 809,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 723,\n    columnNumber: 5\n  }, this);\n};\n\n// Main App component\n_s6(AppRoutes, \"GaGKisbCmmD5CAA51vWhAmj0u90=\", false, function () {\n  return [useAuth];\n});\n_c6 = AppRoutes;\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(AuthProvider, {\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      future: {\n        v7_startTransition: true,\n        v7_relativeSplatPath: true\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/_jsxDEV(AppRoutes, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 820,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 819,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 818,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 817,\n    columnNumber: 5\n  }, this);\n};\n_c7 = App;\nexport default App;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"ProtectedRoute\");\n$RefreshReg$(_c2, \"DashboardWrapper\");\n$RefreshReg$(_c3, \"DoctorDashboardWrapper\");\n$RefreshReg$(_c4, \"NurseDashboardWrapper\");\n$RefreshReg$(_c5, \"AdminDashboardWrapper\");\n$RefreshReg$(_c6, \"AppRoutes\");\n$RefreshReg$(_c7, \"App\");","map":{"version":3,"names":["React","BrowserRouter","Router","Routes","Route","Navigate","AuthProvider","useAuth","LandingPage","AuthPage","PatientDashboard","DoctorDashboard","AdminDashboard","NurseDashboard","LoadingSpinner","appointmentsAPI","servicesAPI","patientsAPI","staffAPI","adminAPI","jsxDEV","_jsxDEV","Fragment","_Fragment","ProtectedRoute","children","allowedRoles","_s","isAuthenticated","isLoading","hasAnyRole","className","fileName","_jsxFileName","lineNumber","columnNumber","to","replace","length","_c","DashboardWrapper","user","_s2","appointments","setAppointments","useState","services","setServices","doctors","setDoctors","availableSlots","setAvailableSlots","patientId","setPatientId","setIsLoading","isBooking","setIsBooking","bookingError","setBookingError","error","setError","loadDashboardData","currentPatientId","patient","getByUserId","id","console","Error","appointmentsData","servicesData","doctorsData","Promise","all","getByPatient","getAll","getByRole","loadAvailableSlots","date","log","slots","getAvailable","requestedDate","Date","dayOfWeek","getDay","filteredSlots","filter","slot","handleBookAppointment","bookingData","selectedService","find","s","serviceId","startTimeFormatted","startTime","includes","split","endTime","getTime","durationMinutes","endTimeString","toTimeString","slice","create","staffId","appointmentDate","notes","_error$response","_error$response$data","response","data","message","handleUpdateAppointment","appointmentId","updateData","update","_error$response2","_error$response2$data","handleCancelAppointment","delete","_error$response3","_error$response3$data","useEffect","timer","setTimeout","clearTimeout","onBookAppointment","onUpdateAppointment","onCancelAppointment","onLoadAvailableSlots","_c2","DoctorDashboardWrapper","_s3","patients","setPatients","shiftSchedule","setShiftSchedule","isProcessing","setIsProcessing","appointmentsError","patientsData","patientsError","_error$response4","_error$response4$data","handleApproveAppointment","updateStatus","_error$response5","_error$response5$data","handleRejectAppointment","reason","_error$response6","_error$response6$data","handleUpdateShiftSchedule","shiftData","resolve","_error$response7","_error$response7$data","handleViewPatientDetails","_error$response8","_error$response8$data","onApproveAppointment","onRejectAppointment","onUpdateShiftSchedule","onViewPatientDetails","_c3","NurseDashboardWrapper","_s4","servicesError","staffData","staff","role","staffError","_error$response9","_error$response9$data","handleBookWalkInAppointment","appointmentData","walkInAppointment","toISOString","status","_error$response0","_error$response0$data","handleApproveAppointmentForDoctor","doctorId","_error$response1","_error$response1$data","_error$response10","_error$response10$dat","onBookWalkInAppointment","onApproveAppointmentForDoctor","onLogout","localStorage","removeItem","window","location","href","_c4","AdminDashboardWrapper","_s5","users","setUsers","usersData","getUsers","_error$response11","_error$response11$dat","handleToggleUserStatus","userId","isActive","updateUserStatus","_error$response12","_error$response12$dat","handleUpdateUserRole","newRole","updateUserRole","_error$response13","_error$response13$dat","handleCreateStaff","createStaff","_error$response14","_error$response14$dat","handleCreateService","serviceData","_error$response15","_error$response15$dat","handleUpdateService","_error$response16","_error$response16$dat","handleDeleteService","appointmentsUsingService","apt","service","deleteResult","_error$response17","_error$response17$dat","_error$response18","_error$response18$dat","errorMessage","onToggleUserStatus","onUpdateUserRole","onCreateStaff","onCreateService","onUpdateService","onDeleteService","_c5","AppRoutes","_s6","_user$roles","_user$roles2","_user$roles3","login","register","logout","clearError","handleLogin","email","password","err","handleRegister","userData","handleLogout","path","element","roles","onLogin","onRegister","props","onClick","_c6","App","future","v7_startTransition","v7_relativeSplatPath","_c7","$RefreshReg$"],"sources":["C:/Project/HopewellClinic/src/App.tsx"],"sourcesContent":["import React from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport { AuthProvider, useAuth } from './contexts/AuthContext';\nimport LandingPage from './components/LandingPage';\nimport AuthPage from './components/AuthPage';\nimport PatientDashboard from './components/PatientDashboard';\nimport DoctorDashboard from './components/DoctorDashboard';\nimport AdminDashboard from './components/AdminDashboard';\nimport NurseDashboard from './components/NurseDashboard';\nimport LoadingSpinner from './components/LoadingSpinner';\n\n// Import the existing API functions\nimport { appointmentsAPI, servicesAPI, patientsAPI, staffAPI, doctorAPI, adminAPI } from './services/api';\n\n// Protected Route component\nconst ProtectedRoute: React.FC<{ \n  children: React.ReactNode; \n  allowedRoles?: string[] \n}> = ({ children, allowedRoles = [] }) => {\n  const { isAuthenticated, isLoading, hasAnyRole } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <Navigate to=\"/auth\" replace />;\n  }\n\n  if (allowedRoles.length > 0 && !hasAnyRole(allowedRoles)) {\n    return <Navigate to=\"/unauthorized\" replace />;\n  }\n\n  return <>{children}</>;\n};\n\n// Dashboard wrapper component that handles data loading\nconst DashboardWrapper: React.FC<{ \n  children: (props: any) => React.ReactNode;\n  user: any;\n}> = ({ children, user }) => {\n  const [appointments, setAppointments] = React.useState<any[]>([]);\n  const [services, setServices] = React.useState<any[]>([]);\n  const [doctors, setDoctors] = React.useState<any[]>([]);\n  const [availableSlots, setAvailableSlots] = React.useState<any[]>([]);\n  const [patientId, setPatientId] = React.useState<string | null>(null);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isBooking, setIsBooking] = React.useState(false);\n  const [bookingError, setBookingError] = React.useState('');\n  const [error, setError] = React.useState('');\n\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      \n      // Get the Patient ID from the ApplicationUser ID\n      let currentPatientId = null;\n      try {\n        const patient = await patientsAPI.getByUserId(user.id);\n        currentPatientId = patient.id;\n        setPatientId(patient.id);\n      } catch (error) {\n        console.error('❌ Failed to get patient data:', error);\n        throw new Error('Patient data not available');\n      }\n      \n      // Try to load data, but don't fail if APIs are not available\n      try {\n        const [appointmentsData, servicesData, doctorsData] = await Promise.all([\n          appointmentsAPI.getByPatient(currentPatientId),\n          servicesAPI.getAll(),\n          staffAPI.getByRole('doctor')\n        ]);\n        setAppointments(appointmentsData);\n        setServices(servicesData);\n        setDoctors(doctorsData);\n      } catch (error) {\n        console.error('❌ Failed to load dashboard data:', error);\n        throw error;\n      }\n    } catch (error) {\n      console.error('Error loading dashboard data:', error);\n      // Show error to user instead of empty data\n      setError('Failed to load dashboard data. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadAvailableSlots = async (date: string) => {\n    try {\n      console.log('Loading available slots for date:', date);\n      const slots = await appointmentsAPI.getAvailable(date);\n      console.log('Available slots received:', slots);\n      \n      // Calculate the day of the week for the requested date\n      const requestedDate = new Date(date);\n      const dayOfWeek = requestedDate.getDay(); // 0 = Sunday, 1 = Monday, etc.\n      \n      // Filter slots to only include the correct day of the week\n      const filteredSlots = slots.filter((slot: any) => slot.dayOfWeek === dayOfWeek);\n      console.log('Filtered slots for day', dayOfWeek, ':', filteredSlots);\n      \n      setAvailableSlots(filteredSlots);\n    } catch (error) {\n      console.error('Error loading available slots:', error);\n      setAvailableSlots([]);\n    }\n  };\n\n  const handleBookAppointment = async (bookingData: any) => {\n    try {\n      setIsBooking(true);\n      setBookingError('');\n      \n      // Calculate end time based on service duration\n      const selectedService = services.find((s: any) => s.id === bookingData.serviceId) as any;\n      \n      // Ensure startTime is in HH:mm:ss format\n      const startTimeFormatted = bookingData.startTime.includes(':') && bookingData.startTime.split(':').length === 2 \n        ? bookingData.startTime + ':00' \n        : bookingData.startTime;\n      \n      const startTime = new Date(`2000-01-01T${startTimeFormatted}`);\n      const endTime = new Date(startTime.getTime() + (selectedService?.durationMinutes || 30) * 60000);\n      \n      const endTimeString = endTime.toTimeString().slice(0, 8); // Format as HH:mm:ss\n      \n      await appointmentsAPI.create({\n        patientId: patientId,\n        serviceId: bookingData.serviceId,\n        staffId: bookingData.staffId,\n        appointmentDate: bookingData.appointmentDate,\n        startTime: startTimeFormatted,\n        endTime: endTimeString,\n        notes: bookingData.notes || ''\n      });\n\n      // Refresh appointments\n      await loadDashboardData();\n    } catch (error: any) {\n      console.error('Error booking appointment:', error);\n      setBookingError(error.response?.data?.error || error.message || 'Failed to book appointment');\n    } finally {\n      setIsBooking(false);\n    }\n  };\n\n  const handleUpdateAppointment = async (appointmentId: string, updateData: any) => {\n    try {\n      setIsBooking(true);\n      setBookingError('');\n      \n      // Calculate end time based on service duration\n      const selectedService = services.find((s: any) => s.id === updateData.serviceId) as any;\n      \n      // Ensure startTime is in HH:mm:ss format\n      const startTimeFormatted = updateData.startTime.includes(':') && updateData.startTime.split(':').length === 2 \n        ? updateData.startTime + ':00' \n        : updateData.startTime;\n      \n      const startTime = new Date(`2000-01-01T${startTimeFormatted}`);\n      const endTime = new Date(startTime.getTime() + (selectedService?.durationMinutes || 30) * 60000);\n      \n      const endTimeString = endTime.toTimeString().slice(0, 8); // Format as HH:mm:ss\n      \n      await appointmentsAPI.update(appointmentId, {\n        appointmentDate: updateData.appointmentDate,\n        startTime: startTimeFormatted,\n        endTime: endTimeString,\n        notes: updateData.notes || ''\n      });\n\n      // Refresh appointments\n      await loadDashboardData();\n    } catch (error: any) {\n      console.error('Error updating appointment:', error);\n      setBookingError(error.response?.data?.error || error.message || 'Failed to update appointment');\n    } finally {\n      setIsBooking(false);\n    }\n  };\n\n  const handleCancelAppointment = async (appointmentId: string) => {\n    try {\n      setIsBooking(true);\n      setBookingError('');\n      \n      await appointmentsAPI.delete(appointmentId);\n\n      // Refresh appointments\n      await loadDashboardData();\n    } catch (error: any) {\n      console.error('Error canceling appointment:', error);\n      setBookingError(error.response?.data?.error || error.message || 'Failed to cancel appointment');\n    } finally {\n      setIsBooking(false);\n    }\n  };\n\n  React.useEffect(() => {\n    // Add a small delay to ensure user is fully logged in before making API calls\n    const timer = setTimeout(() => {\n      loadDashboardData();\n    }, 100);\n    \n    return () => clearTimeout(timer);\n  }, [user.id]);\n\n  // Call children as a function with props\n  return children({\n    user,\n    appointments,\n    services,\n    doctors,\n    availableSlots,\n    isLoading,\n    isBooking,\n    bookingError,\n    error,\n    onBookAppointment: handleBookAppointment,\n    onUpdateAppointment: handleUpdateAppointment,\n    onCancelAppointment: handleCancelAppointment,\n    onLoadAvailableSlots: loadAvailableSlots\n  });\n};\n\n// Doctor Dashboard wrapper component that handles doctor-specific data loading\nconst DoctorDashboardWrapper: React.FC<{ \n  children: (props: any) => React.ReactNode;\n  user: any;\n}> = ({ children, user }) => {\n  const [appointments, setAppointments] = React.useState<any[]>([]);\n  const [patients, setPatients] = React.useState<any[]>([]);\n  const [shiftSchedule, setShiftSchedule] = React.useState<any[]>([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isProcessing, setIsProcessing] = React.useState(false);\n  const [error, setError] = React.useState('');\n\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      // For now, use existing endpoints that work\n      // Get all appointments (we'll filter by doctor later when backend supports it)\n      try {\n        const appointmentsData = await appointmentsAPI.getAll();\n        // Filter appointments for this doctor (when staffId is available)\n        setAppointments(appointmentsData);\n      } catch (appointmentsError) {\n        console.log('No appointments endpoint available yet');\n        setAppointments([]);\n      }\n\n      // Get all patients (we'll filter by doctor later when backend supports it)\n      try {\n        const patientsData = await patientsAPI.getAll();\n        setPatients(patientsData);\n      } catch (patientsError) {\n        console.log('No patients endpoint available yet');\n        setPatients([]);\n      }\n\n      // Initialize empty shift schedule (backend not implemented yet)\n      setShiftSchedule([]);\n    } catch (error: any) {\n      console.error('Error loading doctor dashboard data:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to load dashboard data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleApproveAppointment = async (appointmentId: string) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      // For now, just update the appointment status using existing endpoint\n      await appointmentsAPI.updateStatus(appointmentId, 'confirmed');\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error approving appointment:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to approve appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleRejectAppointment = async (appointmentId: string, reason: string) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      // For now, just update the appointment status using existing endpoint\n      await appointmentsAPI.updateStatus(appointmentId, 'cancelled');\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error rejecting appointment:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to reject appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleUpdateShiftSchedule = async (shiftData: any[]) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      // For now, just store locally (backend not implemented yet)\n      console.log('Shift schedule update requested:', shiftData);\n      setShiftSchedule(shiftData);\n      // Simulate success\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    } catch (error: any) {\n      console.error('Error updating shift schedule:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to update shift schedule');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleViewPatientDetails = async (patientId: string) => {\n    try {\n      setError('');\n      // For now, just log the request (backend not implemented yet)\n      console.log('View patient details requested for:', patientId);\n    } catch (error: any) {\n      console.error('Error loading patient details:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to load patient details');\n    }\n  };\n\n  React.useEffect(() => {\n    // Add a small delay to ensure user is fully logged in before making API calls\n    const timer = setTimeout(() => {\n      loadDashboardData();\n    }, 100);\n    \n    return () => clearTimeout(timer);\n  }, [user.id]);\n\n  // Call children as a function with props\n  return children({\n    user,\n    appointments,\n    patients,\n    shiftSchedule,\n    isLoading,\n    isProcessing,\n    error,\n    onApproveAppointment: handleApproveAppointment,\n    onRejectAppointment: handleRejectAppointment,\n    onUpdateShiftSchedule: handleUpdateShiftSchedule,\n    onViewPatientDetails: handleViewPatientDetails\n  });\n};\n\n// Nurse Dashboard wrapper component that handles nurse-specific data loading\nconst NurseDashboardWrapper: React.FC<{ \n  children: (props: any) => React.ReactNode;\n  user: any;\n}> = ({ children, user }) => {\n  const [appointments, setAppointments] = React.useState<any[]>([]);\n  const [services, setServices] = React.useState<any[]>([]);\n  const [doctors, setDoctors] = React.useState<any[]>([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isProcessing, setIsProcessing] = React.useState(false);\n  const [error, setError] = React.useState('');\n\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      // Load appointments\n      try {\n        const appointmentsData = await appointmentsAPI.getAll();\n        setAppointments(appointmentsData);\n      } catch (appointmentsError) {\n        console.log('No appointments endpoint available yet');\n        setAppointments([]);\n      }\n\n      // Load services\n      try {\n        const servicesData = await servicesAPI.getAll();\n        setServices(servicesData);\n      } catch (servicesError) {\n        console.log('No services endpoint available yet');\n        setServices([]);\n      }\n\n      // Load doctors (staff with doctor role)\n      try {\n        const staffData = await staffAPI.getAll();\n        const doctorsData = staffData.filter((staff: any) => staff.role === 'doctor');\n        setDoctors(doctorsData);\n      } catch (staffError) {\n        console.log('No staff endpoint available yet');\n        setDoctors([]);\n      }\n    } catch (error: any) {\n      console.error('Error loading nurse dashboard data:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to load dashboard data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  React.useEffect(() => {\n    loadDashboardData();\n  }, []);\n\n  const handleBookWalkInAppointment = async (appointmentData: any) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      \n      // Create a walk-in appointment with immediate scheduling\n      const walkInAppointment = {\n        ...appointmentData,\n        appointmentDate: new Date().toISOString().split('T')[0], // Today\n        startTime: new Date().toTimeString().slice(0, 5), // Current time\n        status: 'walkin',\n        notes: `Walk-in appointment: ${appointmentData.notes || 'No additional notes'}`\n      };\n\n      await appointmentsAPI.create(walkInAppointment);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error booking walk-in appointment:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to book walk-in appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleApproveAppointmentForDoctor = async (appointmentId: string, doctorId: string) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      \n      // Update appointment with doctor assignment and approval\n      await appointmentsAPI.update(appointmentId, {\n        staffId: doctorId,\n        status: 'confirmed'\n      });\n      \n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error approving appointment for doctor:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to approve appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleRejectAppointment = async (appointmentId: string, reason: string) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      \n      await appointmentsAPI.update(appointmentId, {\n        status: 'cancelled',\n        notes: `Rejected by nurse: ${reason}`\n      });\n      \n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error rejecting appointment:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to reject appointment');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return children({\n    user,\n    appointments,\n    services,\n    doctors,\n    isLoading,\n    isProcessing,\n    error,\n    onBookWalkInAppointment: handleBookWalkInAppointment,\n    onApproveAppointmentForDoctor: handleApproveAppointmentForDoctor,\n    onRejectAppointment: handleRejectAppointment,\n    onLogout: () => {\n      localStorage.removeItem('token');\n      window.location.href = '/auth';\n    }\n  });\n};\n\n// Admin Dashboard wrapper component that handles admin-specific data loading\nconst AdminDashboardWrapper: React.FC<{ \n  children: (props: any) => React.ReactNode;\n  user: any;\n}> = ({ children, user }) => {\n  const [users, setUsers] = React.useState<any[]>([]);\n  const [appointments, setAppointments] = React.useState<any[]>([]);\n  const [services, setServices] = React.useState<any[]>([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [isProcessing, setIsProcessing] = React.useState(false);\n  const [error, setError] = React.useState('');\n\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      // Get all staff members\n      try {\n        const staffData = await staffAPI.getAll();\n        console.log('Staff data received:', staffData);\n        setUsers(staffData);\n      } catch (staffError) {\n        console.log('No staff endpoint available, falling back to users');\n        const usersData = await adminAPI.getUsers();\n        console.log('Users data received:', usersData);\n        setUsers(usersData);\n      }\n\n      // Get all appointments (we'll need to implement this endpoint)\n      try {\n        // For now, we'll use the existing appointments API\n        const appointmentsData = await appointmentsAPI.getAll();\n        setAppointments(appointmentsData);\n      } catch (appointmentsError) {\n        console.log('No appointments endpoint available yet');\n        setAppointments([]);\n      }\n\n      // Load services\n      try {\n        const servicesData = await servicesAPI.getAll();\n        setServices(servicesData);\n      } catch (servicesError) {\n        console.log('No services endpoint available yet');\n        setServices([]);\n      }\n    } catch (error: any) {\n      console.error('Error loading admin dashboard data:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to load dashboard data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleToggleUserStatus = async (userId: string, isActive: boolean) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await adminAPI.updateUserStatus(userId, isActive);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error updating user status:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to update user status');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleUpdateUserRole = async (userId: string, newRole: string) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await adminAPI.updateUserRole(userId, newRole);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error updating user role:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to update user role');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleCreateStaff = async (staffData: any) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await adminAPI.createStaff(staffData);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error creating staff:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to create staff member');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleCreateService = async (serviceData: any) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await servicesAPI.create(serviceData);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error creating service:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to create service');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleUpdateService = async (serviceId: string, serviceData: any) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      await servicesAPI.update(serviceId, serviceData);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error updating service:', error);\n      setError(error.response?.data?.error || error.message || 'Failed to update service');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleDeleteService = async (serviceId: string) => {\n    try {\n      setIsProcessing(true);\n      setError('');\n      \n      // Check if service is being used by any appointments\n      const appointmentsUsingService = appointments.filter(apt => apt.service.id === serviceId);\n      if (appointmentsUsingService.length > 0) {\n        setError(`Cannot delete service. It is currently being used by ${appointmentsUsingService.length} appointment(s). Please cancel or reschedule these appointments first.`);\n        return;\n      }\n      \n      console.log('Attempting to delete service:', serviceId);\n      const deleteResult = await servicesAPI.delete(serviceId);\n      console.log('Delete result:', deleteResult);\n      await loadDashboardData(); // Refresh data\n    } catch (error: any) {\n      console.error('Error deleting service:', error);\n      \n      // Provide more specific error messages\n      let errorMessage = 'Failed to delete service';\n      if (error.response?.data?.error) {\n        errorMessage = error.response.data.error;\n      } else if (error.response?.data?.message) {\n        errorMessage = error.response.data.message;\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      \n      // Check for common database constraint errors\n      if (errorMessage.includes('foreign key') || errorMessage.includes('constraint') || errorMessage.includes('reference')) {\n        errorMessage = 'Cannot delete service. It is currently being used by existing appointments. Please cancel or reschedule these appointments first.';\n      }\n      \n      setError(errorMessage);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  React.useEffect(() => {\n    loadDashboardData();\n  }, [user.id]);\n\n  // Call children as a function with props\n  return children({\n    user,\n    users,\n    appointments,\n    services,\n    isLoading,\n    isProcessing,\n    error,\n    onToggleUserStatus: handleToggleUserStatus,\n    onUpdateUserRole: handleUpdateUserRole,\n    onCreateStaff: handleCreateStaff,\n    onCreateService: handleCreateService,\n    onUpdateService: handleUpdateService,\n    onDeleteService: handleDeleteService,\n    onLogout: () => {\n      localStorage.removeItem('token');\n      window.location.href = '/auth';\n    }\n  });\n};\n\n// Main App Routes component\nconst AppRoutes: React.FC = () => {\n  const { isAuthenticated, user, login, register, logout, isLoading, error, clearError } = useAuth();\n\n  const handleLogin = async (email: string, password: string) => {\n    try {\n      await login({ email, password });\n    } catch (err) {\n      // Error is handled by AuthContext\n    }\n  };\n\n  const handleRegister = async (userData: any) => {\n    try {\n      await register(userData);\n    } catch (err) {\n      // Error is handled by AuthContext\n    }\n  };\n\n  const handleLogout = () => {\n    logout();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  return (\n    <Routes>\n      {/* Public Routes */}\n      <Route path=\"/\" element={<LandingPage />} />\n      <Route \n        path=\"/auth\" \n        element={\n          isAuthenticated ? (\n            <Navigate to={\n              user?.roles?.includes('admin') ? '/admin-dashboard' :\n              user?.roles?.includes('doctor') ? '/doctor-dashboard' :\n              user?.roles?.includes('nurse') ? '/nurse-dashboard' :\n              '/patient-dashboard'\n            } replace />\n          ) : (\n            <AuthPage\n              onLogin={handleLogin}\n              onRegister={handleRegister}\n              isLoading={isLoading}\n              error={error}\n              clearError={clearError}\n            />\n          )\n        } \n      />\n\n      {/* Protected Routes */}\n      <Route\n        path=\"/patient-dashboard\"\n        element={\n          <ProtectedRoute allowedRoles={['patient']}>\n            <DashboardWrapper user={user}>\n              {(props) => <PatientDashboard {...props} onLogout={handleLogout} />}\n            </DashboardWrapper>\n          </ProtectedRoute>\n        }\n      />\n\n      <Route\n        path=\"/doctor-dashboard\"\n        element={\n          <ProtectedRoute allowedRoles={['doctor']}>\n            <DoctorDashboardWrapper user={user}>\n              {(props) => <DoctorDashboard {...props} onLogout={handleLogout} />}\n            </DoctorDashboardWrapper>\n          </ProtectedRoute>\n        }\n      />\n\n      <Route\n        path=\"/admin-dashboard\"\n        element={\n          <ProtectedRoute allowedRoles={['admin']}>\n            <AdminDashboardWrapper user={user}>\n              {(props) => <AdminDashboard {...props} onLogout={handleLogout} />}\n            </AdminDashboardWrapper>\n          </ProtectedRoute>\n        }\n      />\n\n      <Route\n        path=\"/nurse-dashboard\"\n        element={\n          <ProtectedRoute allowedRoles={['nurse']}>\n            <NurseDashboardWrapper user={user}>\n              {(props) => <NurseDashboard {...props} onLogout={handleLogout} />}\n            </NurseDashboardWrapper>\n          </ProtectedRoute>\n        }\n      />\n\n      {/* Fallback Routes */}\n      <Route path=\"/unauthorized\" element={\n        <div className=\"min-h-screen flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-foreground mb-4\">Unauthorized</h1>\n            <p className=\"text-muted-foreground mb-4\">You don't have permission to access this page.</p>\n            <button \n              onClick={handleLogout}\n              className=\"px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90\"\n            >\n              Sign Out\n            </button>\n          </div>\n        </div>\n      } />\n      \n      <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\n    </Routes>\n  );\n};\n\n// Main App component\nconst App: React.FC = () => {\n  return (\n    <AuthProvider>\n      <Router future={{ v7_startTransition: true, v7_relativeSplatPath: true }}>\n        <div className=\"App\">\n          <AppRoutes />\n        </div>\n      </Router>\n    </AuthProvider>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}